"Category","Term","First_Paper_Title","First_Paper_Link","First_Paper_Year","First_Paper_Abstract","First_Paper_Authors","First_Paper_Citations"
"Domain","Reverse Engineering Domain","Static Analyzer of Vicious Executables (SAVE)","10.1109/CSAC.2004.37","2004","Software security assurance and malware (trojans, worms, and viruses, etc.) detection are important topics of information security. Software obfuscation, a general technique that is useful for protecting software from reverse engineering, can also be used by hackers to circumvent the malware detection tools. Current static malware detection techniques have serious limitations, and sandbox testing also fails to provide a complete solution due to time constraints. In this paper, we present a robust signature-based malware detection technique, with emphasis on detecting obfuscated (or polymorphic) malware and mutated (or metamorphic) malware. The hypothesis is that all versions of the same malware share a common core signature that is a combination of several features of the code. After a particular malware has been first identified, it can be analyzed to extract the signature, which provides a basis for detecting variants and mutants of the same malware in the future. Encouraging experimental results on a large set of recent malware are presented. © 2004 IEEE.","Sung A.H.; Xu J.; Chavez P.; Mukkamala S.","188"
"Domain","Network Security","Reactive to proactive support: A corn dance","10.1145/1181216.1181223","2006","The Linfield College support desk was disorganized and inefficient. The number of Integrated Technologies (IT) department personnel had remained static while the staff, faculty, and student populations grew. We could not keep up with the growing demand for service, our work queues grew longer, and we could not stay on top of viruses and malware. Our mission was to reinvent the support desk to meet the growing needs of the campus community but we were technicians, not managers, and this project was outside of our experience.The resources available for our reinvention project were limited. The IT staff was few in number with only a couple of student workers for assistance. Money for IT infrastructure upgrades was scarce. We spent our time in crisis management rather than preventative maintenance.The Fall 2005 Special Interest Group on University and College Computing Services (SIGUCCS) conference presented a variety of new ideas that gave us the direction we needed to make our support desk project succeed. Returning to campus, we had a fresh perspective for our IT support desk. We automated our network security with Cisco Clean Access and developed an assembly line for repair work with increased student worker technicians. TheBrain software centralized support desk management and helped us develop an ""on demand"" phone support. The campus support desk now offers increased network security, a wider range of services and faster repair times. Copyright 2006 ACM.","Blanco M.; White K.","0"
"Domain","5G Security","Detection of Intrusions and Malware and Vulnerability Assessment - Third International Conference, DIMVA 2006, Proceedings","","2006","The proceedings contain 11 papers. The topics discussed include: using type qualifiers to analyze untrusted integers and detecting security flaws in C programs; using static program analysis to aid intrusion detection; an SVM-based masquerade detection method with online update using co-occurrence matrix; network-level polymorphic shellcode detection using emulation; detecting unknown network attacks using language models; using labeling to prevent cross-service attacks against smart phones; using contextual security policies for threat response; detecting self-mutating malware using control-flow graph matching; digital forensic reconstruction and the virtual security testbed ViSe; a robust SNMP based infrastructure for intrusion detection and response in tactical MANETs; and a fast worm scan detection tool for VPN congestion avoidance.","","0"
"Domain","Crisis Management","Reactive to proactive support: A corn dance","10.1145/1181216.1181223","2006","The Linfield College support desk was disorganized and inefficient. The number of Integrated Technologies (IT) department personnel had remained static while the staff, faculty, and student populations grew. We could not keep up with the growing demand for service, our work queues grew longer, and we could not stay on top of viruses and malware. Our mission was to reinvent the support desk to meet the growing needs of the campus community but we were technicians, not managers, and this project was outside of our experience.The resources available for our reinvention project were limited. The IT staff was few in number with only a couple of student workers for assistance. Money for IT infrastructure upgrades was scarce. We spent our time in crisis management rather than preventative maintenance.The Fall 2005 Special Interest Group on University and College Computing Services (SIGUCCS) conference presented a variety of new ideas that gave us the direction we needed to make our support desk project succeed. Returning to campus, we had a fresh perspective for our IT support desk. We automated our network security with Cisco Clean Access and developed an assembly line for repair work with increased student worker technicians. TheBrain software centralized support desk management and helped us develop an ""on demand"" phone support. The campus support desk now offers increased network security, a wider range of services and faster repair times. Copyright 2006 ACM.","Blanco M.; White K.","0"
"Domain","Project Management","Reactive to proactive support: A corn dance","10.1145/1181216.1181223","2006","The Linfield College support desk was disorganized and inefficient. The number of Integrated Technologies (IT) department personnel had remained static while the staff, faculty, and student populations grew. We could not keep up with the growing demand for service, our work queues grew longer, and we could not stay on top of viruses and malware. Our mission was to reinvent the support desk to meet the growing needs of the campus community but we were technicians, not managers, and this project was outside of our experience.The resources available for our reinvention project were limited. The IT staff was few in number with only a couple of student workers for assistance. Money for IT infrastructure upgrades was scarce. We spent our time in crisis management rather than preventative maintenance.The Fall 2005 Special Interest Group on University and College Computing Services (SIGUCCS) conference presented a variety of new ideas that gave us the direction we needed to make our support desk project succeed. Returning to campus, we had a fresh perspective for our IT support desk. We automated our network security with Cisco Clean Access and developed an assembly line for repair work with increased student worker technicians. TheBrain software centralized support desk management and helped us develop an ""on demand"" phone support. The campus support desk now offers increased network security, a wider range of services and faster repair times. Copyright 2006 ACM.","Blanco M.; White K.","0"
"Domain","HIPAA Security Requirements","Secure and advanced unpacking using computer emulation","10.1007/s11416-007-0046-0","2007","The purpose of this article is firstly to present a secure unpacker which is specifically designed for a security analyst when studying viruses but also any anti-virus scanner. Such a tool is in fact required when assessing security requirements of an anti-virus scanner through a black box approach. During testing of anti-virus software, a security analyst needs to build virus populations required for several penetration tests. Virus unpacking is a first mandatory step before gaining the ability to apply obfuscation transformation or any information extraction algorithm on a viral set. A secure unpacker is also useful when checking security robustness against reverse engineering of any packed or protected security product. Several static and dynamic analysis tools already implement unpacking algorithms, but these often require human intervention and are not well designed to automatically unpack such a dangerous program as a virus. A new algorithm for automatically unpacking encrypted viruses is presented in this paper. Forensics techniques to reconstruct an unpacked executable and advanced heuristics are also presented in order to decrypt more sophisticated self-protected Malwares. We present several detection techniques which are specifically designed to deceive virtual machine monitors and discuss the security of our tool against these low-level viral attacks. Our secure unpacker figures among a set of several tools. We then present in this paper a proof-of-concept human analysis framework which implements most standard components of an anti-virus scanner (real-time scanner, emulator engine) and in addition proposes a reliable system for automatically gaining information about a virus and its interaction with the OS executive (stealth native API hooking), but focuses on human decision as a detection process without the same resource limitation constraint as product oriented anti-virus scanners. This framework is used as a basis/reference for the comparative analysis of security aspects of anti-virus scanners and deals with the robustness of their driver stack and the efficiency of their de-obfuscation and unpacking algorithms. © 2007 Springer-Verlag France.","Josse S.","20"
"Domain","Deception Technology","Farm: An automated malware analysis environment","10.1109/CCST.2008.4751322","2008","We present the Forensic Analysis Repository for Malware (FARM), a system for automating malware analysis. FARM leverages existing dynamic and static analysis tools and is designed in a modular fashion to provide future extensibility. We present our motivations for designing the system and give an overview of the system architecture. We also present several common scenarios that detail uses for FARM as well as illustrate how automated malware analysis saves time. Finally, we discuss future development of this tool. ©2008 IEEE.","Van Randwyk J.; Chiang K.; Lloyd L.; Vanderveen K.","6"
"Domain","Web Security","Resolving JavaScript vulnerabilities in the browser runtime","10.1109/ISSRE.2008.11","2008","The volume of web based malware on the Internet keeps rising despite huge investments on web security. JavaScript, the dominant scripting language for web applications, is the primary channel for most of these attacks. In this paper, we describe research into the design and implementation of new web client protection system based on code instrumentation techniques. This system combines traditional static analysis techniques with a dynamic HTML, CSS and JavaScript code runtime monitoring agent to offer an efficient, easily deployable, policy driven framework for improved user protection. Rewriting and runtime monitoring are based on providing safe equivalents of JavaScript code constructs known to contain insecurities and hence exploitable by malicious web applications. As a demonstration of the practical capabilities of our framework, we also include a case study attack and empirical analysis of some of its various aspects across 1000 home pages belonging to the most popular web sites on the Internet. © 2008 IEEE.","Ofuonye E.; Miller J.","6"
"Domain","Application Security","Static enforcement of web application integrity through strong typing","","2009","Security vulnerabilities continue to plague web applications, allowing attackers to access sensitive data and co-opt legitimate web sites as a hosting ground for malware. Accordingly, researchers have focused on various approaches to detecting and preventing common classes of security vulnerabilities in web applications, including anomaly-based detection mechanisms, static and dynamic analyses of server-side web application code, and client-side security policy enforcement. This paper presents a different approach to web application security. In this work, we present a web application framework that leverages existing work on strong type systems to statically enforce a separation between the structure and content of both web documents and database queries generated by a web application, and show how this approach can automatically prevent the introduction of both server-side cross-site scripting and SQL injection vulnerabilities. We present an evaluation of the framework, and demonstrate both the coverage and correctness of our sanitization functions. Finally, experimental results suggest that web applications developed using this framework perform competitively with applications developed using traditional frameworks. © 2009 Proceedings of the 18th USENIX Security Symposium. All rights reserved.","Robertson W.; Vigna G.","46"
"Domain","API Development","Malware analysis using reverse engineering and data mining tools","10.1109/ICSSE.2010.5551719","2010","One challenge in malware analysis involves collecting useful data without risking experimenters' machines or systems. Static analysis of malware code bases is valuable in providing insights on malware development mechanisms, however, it cannot provide understanding in dynamic profiling of executable codes. In this paper, we present a case study of the well-known Nugache worm using existing reverse engineering tools to collect data from malwares running in a closed-lab environment. Useful dynamic patterns of mal wares are generated by using a rough set based machine learning tool. The proposed approach can be used for the study of mal ware behaviors in a safe and pedagogical environment. The dynamic patterns generated by data mining tools may provide insights for specifying similarity measures used by network level Intrusion Detection Systems. © 2010 IEEE.","Burji S.; Liszka K.J.; Chan C.-C.","13"
"Domain","Digital Forensics","Lessons learned from an investigation into the analysis avoidance techniques of malicious software","","2010","This paper outlines a number of key lessons learned from an investigation into the techniques malicious executable software can employ to hinder digital forensic examination. Malware signature detection has been recognised by researchers to be far less than ideal. Thus, the forensic analyst may be required to manually analyse suspicious files. However, in order to hinder the forensic analyst, hide its true intent and to avoid detection, modern malware can be wrapped with packers or protectors, and layered with a plethora of anti-analysis techniques. This necessitates the forensic analyst to develop static and dynamic analysis skills tailored to navigate a hostile environment. To this end, the analyst must understand the anti-analysis techniques that can be employed and how to mitigate them, the limitations of existing tools and how to extend them, and how to employ an appropriate analysis methodology to uncover the intent of the malware.","Brand M.; Valli C.; Woodward A.","10"
"Domain","Distributed Computing","Classification of malware using structured control flow","","2010","Malware is a pervasive problem in distributed computer and network systems. Identification of malware variants provides great benefit in early detection. Control flow has been proposed as a characteristic that can be identified across variants, resulting in flowgraph based malware classification. Static analysis is widely used for the classification but can be ineffective if malware undergoes a code packing transformation to hide its real content. This paper proposes a novel algorithm for constructing a control flow graph signature using the decompilation technique of structuring. Similarity between structured graphs can be quickly determined using string edit distances. To reverse the code packing transformation, a fast application level emulator is proposed. To demonstrate the effectiveness of the automated unpacking and flowgraph based classification, we implement a complete system and evaluate it using synthetic and real malware. The evaluation shows our system is highly effective in terms of accuracy in revealing all the hidden code, execution time for unpacking, and accuracy in classification. © 2010, Australian Computer Society, Inc.","Cesare S.; Xiang Y.","92"
"Domain","Firmware Reverse Engineering","Malware self protection mechanism issues in conducting malware behaviour analysis in a virtual environment as compared to a real environment","10.1109/ITSIM.2010.5561600","2010","Malware writers are constantly trying to defeat and hinder malware analysis with malware self protection mechanism. There are two main methods of malware analysis which are reverse engineering and behaviour analysis. Reverse engineering consists of static and dynamic code analysis. Behaviour analysis studies the malware's interaction in and out of the infected host. Behaviour analysis will always be a faster method compared to reverse engineering due to its more visual approach. This study will analyse issues related to malware self protection mechanism in conducting malware behaviour analysis in a virtual environment as compared to a real environment and suggestion(s), on how to overcome the problem. © 2010 IEEE.","Alsagoff S.N.","2"
"Domain","Trusted Platform Module","Building a trusted image for embedded systems","10.1145/1852666.1852739","2010","In this work, we propose PlugNPlay Trust, an integrity measurement framework which enables a remote system to evaluate the integrity and state of an embedded node. The PlugNPlay Trust design exploits the relatively static nature of embedded communication systems and uses a Trusted Platform Module (TPM) to measure the state and provide identity verification for the embedded host. This framework enables remote parties to confirm the integrity of embedded communication systems, thereby limiting the effects and the proliferation of malware in compromised system. We implement a prototype of the PlugNPlay framework using Live CD technologies and a USB Flash-drive. We measure the performance of our system and show that our design choices result in efficient measurement and verification of system integrity. © 2010 ACM.","Harris J.; Hill R.","2"
"Domain","Drive-By Download","Throwing a MonkeyWrench into web attackers plans","10.1007/978-3-642-13241-4_4","2010","Client-based attacks on internet users with malicious web pages represent a serious and rising threat. Internet Browsers with enabled active content technologies such as JavaScript are vulnerable to so-called drive-by downloads. Drive-by downloads are able to automatically infect a victim's system during a single visit of a crafted web page testing various vulnerabilities and installing e.g. malware files or illegal content without user interaction. In this paper we present MonkeyWrench, a low-interaction web-honeyclient allowing automatic identification of malicious web pages by performing static analysis of the HTML-objects in a web page as well as dynamic analysis of scripts by execution in an emulated browser environment. Using this hybrid approach MonkeyWrench overcomes shortcomings of existing low-interaction web-honeyclients in dealing with obfuscated JavaScript while outperforming high-interaction systems. Further MonkeyWrench is able to identify the exact vulnerability triggered by a malicious page and to extract payloads from within obfuscated scripts which are valuable information to security analysts and researchers. Results of an examination of several hundred thousand web pages demonstrate MonkeyWrench's ability to expose rising threats of the web, and to collect malware and JavaScript exploit samples. © 2010 Springer-Verlag.","Büscher A.; Meier M.; Benzmüller R.","5"
"Domain","Stream Processing","1st International Conference on Runtime Verification, RV 2010","","2010","The proceedings contain 39 papers. The special focus in this conference is on Runtime Verification. The topics include: Statistical model checking: An overview; Runtime verification with the RV system; a meta-aspect protocol for developing dynamic analyses; behavior abstraction in malware analysis; clara: A framework for partially evaluating finite-state runtime monitors ahead of time; Checking the correspondence between UML models and implementation; compensation-aware runtime monitoring; recovery Tasks: An Automated Approach to Failure Recovery; formally efficient program instrumentation; Code Contracts for.NET: Runtime verification and so much more; interval analysis for concurrent trace programs using transaction sequence graphs; causality analysis in contract violation; reducing configurations to monitor in a software product line; runtime instrumentation for precise flow-sensitive type analysis; trace recording for embedded systems: Lessons learned from five industrial projects; Verification of an AFDX infrastructure using simulations and probabilities; copilot: A Hard Real-Time Runtime Monitor; stealthWorks: Emulating memory errors; efficient data race detection for async-finish parallelism; run-time verification of optimistic concurrency; visual debugging for stream processing applications; who guards the guardians? — Toward V&V of health management software: (Short paper); Aspect-Oriented instrumentation with GCC; runtime Verification for Software Transactional Memories; optimized temporal monitors for systemC; runtime verification of stochastic, faulty systems; low-overhead bug fingerprinting for fast debugging; ESAT: A tool for animating logic-based specifications of evolvable component systems; a tool which mines partial execution traces to improve static analysis; larvaStat: Monitoring of statistical properties; WS-PSC monitor: A tool chain for monitoring temporal and timing properties in composite service based on property sequence chart.","","1"
"Domain","IoT Security","A study of android application security","","2011","The fluidity of application markets complicate smartphone security. Although recent efforts have shed light on particular security issues, there remains little insight into broader security characteristics of smartphone applications. This paper seeks to better understand smartphone application security by studying 1,100 popular free Android applications. We introduce the ded decompiler, which recovers Android application source code directly from its installation image. We design and execute a horizontal study of smartphone applications based on static analysis of 21 million lines of recovered code. Our analysis uncovered pervasive use/misuse of personal/ phone identifiers, and deep penetration of advertising and analytics networks. However, we did not find evidence of malware or exploitable vulnerabilities in the studied applications. We conclude by considering the implications of these preliminary findings and offer directions for future analysis. © 2011 by The USENIX Association.","Enck W.; Octeau D.; McDaniel P.; Chaudhuri S.","709"
"Domain","Cryptanalysis","Information Security and Assurance - International Conference, ISA 2011, Proceedings","","2011","The proceedings contain 42 papers. The topics discussed include: information security awareness campaign: an alternate approach; recent progress in code-based cryptography; a comparative study of a new associative classification approach for mining rare and frequent classification rules; secret key awareness security public key encryption scheme; design of a retargetable decompiler for a static platform-independent malware analysis; the proactive and reactive digital forensics investigation process: a systematic literature review; multistep attack detection and alert correlation in intrusion detection systems; S-FSB: an improved variant of the FSB hash family; improved identity-based identification and signature schemes using quasi-dyadic Goppa codes; non-interactive deniable authentication protocol using generalized ECDSA signature scheme; and lower bounds for interpolating polynomials for square roots of the elliptic curve discrete logarithm.","","0"
"Domain","Batch Processing","Static detection of malicious JavaScript-bearing PDF documents","10.1145/2076732.2076785","2011","Despite the recent security improvements in Adobe's PDF viewer, its underlying code base remains vulnerable to novel exploits. A steady flow of rapidly evolving PDF malware observed in the wild substantiates the need for novel protection instruments beyond the classical signature-based scanners. In this contribution we present a technique for detection of JavaScript-bearing malicious PDF documents based on static analysis of extracted JavaScript code. Compared to previous work, mostly based on dynamic analysis, our method incurs an order of magnitude lower run-time overhead and does not require special instrumentation. Due to its efficiency we were able to evaluate it on an extremely large real-life dataset obtained from the VirusTotal malware upload portal. Our method has proved to be effective against both known and unknown malware and suitable for large-scale batch processing. Copyright 2011 ACM.","Laskov P.; Šrndić N.","141"
"Domain","Hardware Security","A unified framework for multimodal submodular integrated circuits trojan detection","10.1109/TIFS.2010.2096811","2011","This paper presents a unified formal framework for integrated circuits (ICs) Trojan detection that can simultaneously employ multiple noninvasive side-channel measurement types (modalities). After formally defining the IC Trojan detection for each side-channel measurement and analyzing the complexity, we devise a new submodular formulation of the problem objective function. Based on the objective function properties, an efficient Trojan detection method with strong approximation and optimality guarantees is introduced. Signal processing methods for calibrating the impact of interchip and intrachip correlations are presented. We define a new sensitivity metric that formally quantifies the impact of modifications to each existing gate that is affected by Trojan. Using the new metric, we compare the Trojan detection capability of different measurement types for static (quiescent) current, dynamic (transient) current, and timing (delay) side-channel measurements. We propose four methods for combining the detection results that are gained from different measurement modalities and show how the sensitivity results can be used for a systematic combining of the detection results. Experimental evaluations on benchmark designs reveal the low-overhead and effectiveness of the new Trojan detection framework and provides a comparison of different detection combining methods. © 2010 IEEE.","Koushanfar F.; Mirhoseini A.","107"
"Domain","Proof of Concept","Proceedings - 35th Annual IEEE International Computer Software and Applications Conference Workshops, COMPSACW 2011","","2011","The proceedings contain 88 papers. The topics discussed include: fuzzy control-based software self-adaptation: a case study in mission critical systems; a sufficient condition for parameters estimation in dynamic random testing; distributed monitoring and adaptation of multiple QoS in service-based systems; policies to enable serving untrusted services on alternative (non-3GPP) and untrusted access networks in EPS; a framework for the management of operator policies and user preferences for service compositions in the IP multimedia subsystem; IMS threat and attack surface analysis using common vulnerability scoring system; IMS/NGN service lab: testbed for creating innovative IMS/NGN service applications; test-driving static analysis tools in search of C code vulnerabilities; adaptive rule-based malware detection employing learning classifier systems: a proof of concept; and secure communication via shared knowledge and a salted hash in ad-hoc environments.","","0"
"Domain","Attack Surface Analysis","Proceedings - 35th Annual IEEE International Computer Software and Applications Conference Workshops, COMPSACW 2011","","2011","The proceedings contain 88 papers. The topics discussed include: fuzzy control-based software self-adaptation: a case study in mission critical systems; a sufficient condition for parameters estimation in dynamic random testing; distributed monitoring and adaptation of multiple QoS in service-based systems; policies to enable serving untrusted services on alternative (non-3GPP) and untrusted access networks in EPS; a framework for the management of operator policies and user preferences for service compositions in the IP multimedia subsystem; IMS threat and attack surface analysis using common vulnerability scoring system; IMS/NGN service lab: testbed for creating innovative IMS/NGN service applications; test-driving static analysis tools in search of C code vulnerabilities; adaptive rule-based malware detection employing learning classifier systems: a proof of concept; and secure communication via shared knowledge and a salted hash in ad-hoc environments.","","0"
"Domain","Reverse Engineering Practices","Dynamic analysis of malware using decision trees","","2011","Detecting new and unknown malware is a major challenge in today's software security profession. Most existing works for malware detection are based on static features of malware. In this work, we applied a reversed engineering process to extract static and behavioural features from malware. Two data sets are created based on reversed features and API Call features. Essential features are identified by applying Weka's J48 decision tree classifier to 582 malware and 521 benign software samples collected from the Internet. The performance of decision tree and Naïve Bayes classifiers are evaluated by 5-fold cross validation with 80-20 splits of training sets. Experimental results show that Naïve Bayes classifier has better performance on the smaller data set with 12 reversed features, while J48 has better performance on the data set created from the API Call data set with 141 features.","Ravula R.R.; Liszka K.J.; Chan C.-C.","1"
"Domain","Deep Learning Techniques","AISec'12 - Proceedings of the ACM Workshop on Security and Artificial Intelligence","","2012","The proceedings contain 10 papers. The topics discussed include: improving malware classification: bridging the static/dynamic gap; early detection of malicious behavior in JavaScript code; an information theoretic framework for web inference detection; learning stateful models for network honeypots; nonparametric semi-supervised learning for network intrusion detection: combining performance improvements with realistic in-situ training; robust detection of comment spam using entropy rate; understanding the time-series behavioral characteristics of evolutionally advanced email spammers; tracking concept drift in malware families; autonomous learning for detection of JavaScript attacks: vision or reality?; and on the effectiveness of using state-of-the-art machine learning techniques to launch cryptographic distinguishing attacks.","","0"
"Domain","Cloud Services","Similarity analysis of shellcodes in drive-by download attack kits","10.4108/icst.collaboratecom.2012.2S0S07","2012","Drive-by downloads have become the primary attack vehicle for malware distribution in recent years. With the rise of targeted attacks, the vulnerabilities within the cloud based services and web based collaboration frameworks might end up as the principal targets for hosting drive-by download attacks. In this paper, we studied the similarity of the shellcodes among different attack kits. Shellcode is the malicious code used as the payload in drive-by download attacks. Specifically, we collected 15 different drive-by download attack kits and identified shellcodes used in each kit. As the shellcodes are transmitted to the browser as Javascript strings, we measured the similarity between regular strings and shellcodes defined in Javascript. We disassembled the shellcodes and computed the mean of Cosine Similarity, Extended Jaccard Similarity and Pearson Correlation measures based on the frequencies of the opcodes. Our analysis shows that the shellcodes, used as payloads, across different attack kits were similar with other shellcodes and dissimilar with benign Javascript strings. We observe that some of the attack kits released across different years had same shellcodes. The performance of similarity analysis was compared to an emulation based approach and observed reduction of 75% in the analysis time. Based on the results, the similarity measure of the shellcodes could be an effective static mechanism in detecting the shellcode based drive-by download attacks. © 2012 ICST.","Cherukuri M.; Mukkamala S.; Dongwan S.","3"
"Domain","Artificial Intelligence Ethics","AISec'12 - Proceedings of the ACM Workshop on Security and Artificial Intelligence","","2012","The proceedings contain 10 papers. The topics discussed include: improving malware classification: bridging the static/dynamic gap; early detection of malicious behavior in JavaScript code; an information theoretic framework for web inference detection; learning stateful models for network honeypots; nonparametric semi-supervised learning for network intrusion detection: combining performance improvements with realistic in-situ training; robust detection of comment spam using entropy rate; understanding the time-series behavioral characteristics of evolutionally advanced email spammers; tracking concept drift in malware families; autonomous learning for detection of JavaScript attacks: vision or reality?; and on the effectiveness of using state-of-the-art machine learning techniques to launch cryptographic distinguishing attacks.","","0"
"Domain","User Feedback","Closing the Pandora's box: Defenses for thwarting epidemic outbreaks in mobile adhoc networks","10.1109/MASS.2012.6502518","2012","The openness of the Android operating system increased the number of applications developed, but it also introduced a new propagation vector for mobile malware. We model the propagation of mobile malware using epidemiology theory and study the problem as a function of the underlying mobility models. We define the optimal approach to heal an infected system with the help of a set of static healers that distribute patches, as the T-COVER problem and show that it is NP-HARD. We then propose two families of healer protocols that trade-off time recovery and energy consumed by sending patches. The first one uses randomization to ensure a small recovery time but may result in healers sending more patches than needed. The second one uses system feedback to optimize energy consumed by sending patches, but it may result in a larger recovery time. We show through simulations using the NS-3 simulator that despite lacking knowledge of the future, our protocols obtain a recovery time within a 10x bound of the oracle solution that knows the arrival time of the infected nodes. © 2012 IEEE.","Potharaju R.; Hoque E.; Nita-Rotaru C.; Sarkar S.; Venkatesh S.S.","2"
"Domain","Privacy Protection","A case study in open source software security and privacy: Android adware","","2012","The goal of this paper is to analyze the behavior and intent of recent types of privacy-invasive Android adware. This paper starts with a review of Android mobile operating system security. This paper also addresses the broader issue as to the pros and cons of an open source operating system in terms of security and privacy. Static analysis of malware can provide higher quality results and lead to a better understanding. This approach is used in this paper. As Android's market share is rapidly growing around the world, Android security will be a crucial area of research for IT security professionals and their academic counterparts. The upside of the current situation is that malware is being quickly exposed, thanks to open-source software development tools. © 2012 Infonomics Society.","Erturk E.","34"
"Domain","Access Control","Proceedings - 2012 8th International Conference on Computing and Networking Technology (INC, ICCIS and ICMIC), ICCNT 2012","","2012","The proceedings contain 87 papers. The topics discussed include: performance research and analysis of ForCES TML based DP-WRR algorithm; solving sudoku in reconfigurable hardware; ideal and perfect multi-secret sharing schemes whose access structure are Q3; applications of cloud computing in education; new buffer management schemes for P2P streaming systems; a dynamic cryptographic access control scheme in cloud storage service; mobile cloud computing: the impact of users' motivation on actual usage; exploiting the concept of traffic shaping to improve distributed systems under node dynamics; graph-theory model based e-commerce website design and realize; a framework for resource recommendations for learners using social bookmarking; smartphone cloud storage anti virus detection and prevention using robust algorithm; and toward extracting malware features for classification using static and dynamic analysis.","","0"
"Domain","Operating System Security","A case study in open source software security and privacy: Android adware","","2012","The goal of this paper is to analyze the behavior and intent of recent types of privacy-invasive Android adware. This paper starts with a review of Android mobile operating system security. This paper also addresses the broader issue as to the pros and cons of an open source operating system in terms of security and privacy. Static analysis of malware can provide higher quality results and lead to a better understanding. This approach is used in this paper. As Android's market share is rapidly growing around the world, Android security will be a crucial area of research for IT security professionals and their academic counterparts. The upside of the current situation is that malware is being quickly exposed, thanks to open-source software development tools. © 2012 Infonomics Society.","Erturk E.","34"
"Domain","Election System Security","BTMD: A framework of binary translation based malcode detector","10.1109/CyberC.2012.16","2012","Binary Translation technology is used to convert binary code of one Instruction Set Architecture (ISA) into another. This technology can solve the software-inheritance problem and ISA-compatibility between different computers architecture. In this paper, we describe BTMD (Binary Translation based Malcode Detector), a novel framework that exploits static and dynamic binary translation features to detect broad spectrum malware and prevent its execution. By operating directly on binary code with MD Rules on the availability of source code, BTMD is appropriate for translating low-level binary code to high-level proper representation, obtaining CFG (Control Flow Graph) and other high-level Control Structure by MD Parser. Then Critical API Graph based on CFG is generated to do sub graph matching with the defined Malware Behavior Template. MD Engine in BTMD is called to undertake the process to take on the remaining code analysis. Compared with other detection approaches, BTMD is found to be very efficient in terms of detection capability and false alarm rate. © 2012 IEEE.","Shan Z.; Guo H.; Pang J.","7"
"Domain","Mobile Security","New Android malware detection approach using Bayesian classification","10.1109/AINA.2013.88","2013","Mobile malware has been growing in scale and complexity as smartphone usage continues to rise. Android has surpassed other mobile platforms as the most popular whilst also witnessing a dramatic increase in malware targeting the platform. A worrying trend that is emerging is the increasing sophistication of Android malware to evade detection by traditional signature-based scanners. As such, Android app marketplaces remain at risk of hosting malicious apps that could evade detection before being downloaded by unsuspecting users. Hence, in this paper we present an effective approach to alleviate this problem based on Bayesian classification models obtained from static code analysis. The models are built from a collection of code and app characteristics that provide indicators of potential malicious activities. The models are evaluated with real malware samples in the wild and results of experiments are presented to demonstrate the effectiveness of the proposed approach. © 2013 IEEE.","Suleiman Y.; Sezer S.; McWilliams G.; Muttik I.","222"
"Domain","Natural Language Processing","Dynamic information-theoretic measures for security informatics","10.1109/ISI.2013.6578784","2013","Many important security informatics problems require consideration of dynamical phenomena for their solution; examples include predicting the behavior of individuals in social networks and distinguishing malicious and innocent computer network activities based on activity traces. While information theory offers powerful tools for analyzing dynamical processes, to date the application of information-theoretic methods in security domains has focused on static analyses (e.g., cryptography, natural language processing). This paper leverages information-theoretic concepts and measures to quantify the similarity of pairs of stochastic dynamical systems, and shows that this capability can be used to solve important problems which arise in security applications. We begin by presenting a concise review of the information theory required for our development, and then address two challenging tasks: 1.) characterizing the way influence propagates through social networks, and 2.) distinguishing malware from legitimate software based on the instruction sequences of the disassembled programs. In each application, case studies involving real-world datasets demonstrate that the proposed techniques outperform standard methods. © 2013 IEEE.","Colbaugh R.; Glass K.; Bauer T.","1"
"Domain","Predictive Analytics","Dynamic information-theoretic measures for security informatics","10.1109/ISI.2013.6578784","2013","Many important security informatics problems require consideration of dynamical phenomena for their solution; examples include predicting the behavior of individuals in social networks and distinguishing malicious and innocent computer network activities based on activity traces. While information theory offers powerful tools for analyzing dynamical processes, to date the application of information-theoretic methods in security domains has focused on static analyses (e.g., cryptography, natural language processing). This paper leverages information-theoretic concepts and measures to quantify the similarity of pairs of stochastic dynamical systems, and shows that this capability can be used to solve important problems which arise in security applications. We begin by presenting a concise review of the information theory required for our development, and then address two challenging tasks: 1.) characterizing the way influence propagates through social networks, and 2.) distinguishing malware from legitimate software based on the instruction sequences of the disassembled programs. In each application, case studies involving real-world datasets demonstrate that the proposed techniques outperform standard methods. © 2013 IEEE.","Colbaugh R.; Glass K.; Bauer T.","1"
"Domain","Machine Learning Domain","Machine learning for Android malware detection using permission and API calls","10.1109/ICTAI.2013.53","2013","The Google Android mobile phone platform is one of the most anticipated smartphone operating systems on the market. The open source Android platform allows developers to take full advantage of the mobile operation system, but also raises significant issues related to malicious applications. On one hand, the popularity of Android absorbs attention of most developers for producing their applications on this platform. The increased numbers of applications, on the other hand, prepares a suitable prone for some users to develop different kinds of malware and insert them in Google Android market or other third party markets as safe applications. In this paper, we propose to combine permission and API (Application Program Interface) calls and use machine learning methods to detect malicious Android Apps. In our design, the permission is extracted from each App's profile information and the APIs are extracted from the packed App file by using packages and classes to represent API calls. By using permissions and API calls as features to characterize each Apps, we can learn a classifier to identify whether an App is potentially malicious or not. An inherent advantage of our method is that it does not need to involve any dynamical tracing of the system calls but only uses simple static analysis to find system functions involved in each App. In addition, because permission settings and APIs are alwaysavailable for each App, our method can be generalized to all mobile applications. Experiments on real-world Apps with more than 1200 malware and 1200 benign samples validate the algorithm performance. © 2013 IEEE.","Peiravian N.; Zhu X.","331"
"Domain","Edge Computing","Protecting infrastructure assets from real-time and run-time threats","10.1007/978-3-642-45330-4_7","2013","Real-time availability with integrity is a crucial security requirement for critical infrastructure assets – delays in reporting device states or computations may result in equipment damage, perhaps even catastrophic failure. However, it is also necessary to address malicious software-based threats. Trusted computing (TC) is a security paradigm that enables application platforms to enforce the integrity of execution targets. A TC architecture can be combined with a real-time access control system to help protect against real-time availability and malware threats. However TC architectures offer only static (load-time) protection, so it is still necessary to address the possibility of run-time (execution) attacks. This paper focuses on the protection afforded by TC platforms to critical infrastructure assets. The paper defines a threat model, analyzes vulnerabilities, proposes services and tools that guarantee real-time availability with integrity, and demonstrates how they can be used to protect communications of an IEC61850-90-5-compliant substation automation system in an electricity grid. Also, it discusses the impact of run-time attacks on TC-compliant critical infrastructure assets. © IFIP International Federation for Information Processing 2013.","Jenkins J.; Burmester M.","1"
"Domain","Continuous Improvement","Revolver: An automated approach to the detection of evasive web-based malware","","2013","In recent years, attacks targeting web browsers and their plugins have become a prevalent threat. Attackers deploy web pages that contain exploit code, typically written in HTML and JavaScript, and use them to compromise unsuspecting victims. Initially, static techniques, such as signature-based detection, were adequate to identify such attacks. The response from the attackers was to heavily obfuscate the attack code, rendering static techniques insufficient. This led to dynamic analysis systems that execute the JavaScript code included in web pages in order to expose malicious behavior. However, today we are facing a new reaction from the attackers: evasions. The latest attacks found in the wild incorporate code that detects the presence of dynamic analysis systems and try to avoid analysis and/or detection. In this paper, we present Revolver, a novel approach to automatically detect evasive behavior in malicious JavaScript. Revolver uses efficient techniques to identify similarities between a large number of JavaScript programs (despite their use of obfuscation techniques, such as packing, polymorphism, and dynamic code generation), and to automatically interpret their differences to detect evasions. More precisely, Revolver leverages the observation that two scripts that are similar should be classified in the same way by web malware detectors (either both scripts are malicious or both scripts are benign); differences in the classification may indicate that one of the two scripts contains code designed to evade a detector tool. Using large-scale experiments, we show that Revolver is effective at automatically detecting evasion attempts in JavaScript, and its integration with existing web malware analysis systems can support the continuous improvement of detection techniques. copyright © 2013 USENIX Security Symposium.All right reserved.","Kapravelos A.; Shoshitaishvili Y.; Cova M.; Kruegel C.; Vigna G.","108"
"Domain","Information Theory","Dynamic information-theoretic measures for security informatics","10.1109/ISI.2013.6578784","2013","Many important security informatics problems require consideration of dynamical phenomena for their solution; examples include predicting the behavior of individuals in social networks and distinguishing malicious and innocent computer network activities based on activity traces. While information theory offers powerful tools for analyzing dynamical processes, to date the application of information-theoretic methods in security domains has focused on static analyses (e.g., cryptography, natural language processing). This paper leverages information-theoretic concepts and measures to quantify the similarity of pairs of stochastic dynamical systems, and shows that this capability can be used to solve important problems which arise in security applications. We begin by presenting a concise review of the information theory required for our development, and then address two challenging tasks: 1.) characterizing the way influence propagates through social networks, and 2.) distinguishing malware from legitimate software based on the instruction sequences of the disassembled programs. In each application, case studies involving real-world datasets demonstrate that the proposed techniques outperform standard methods. © 2013 IEEE.","Colbaugh R.; Glass K.; Bauer T.","1"
"Domain","Benchmarking","Morpheus: Benchmarking computational diversity in mobile malware","10.1145/2611765.2611767","2014","Computational characteristics of a program can potentially be used to identify malicious programs from benign ones. However, systematically evaluating malware detection techniques, especially when malware samples are hard to run correctly and can adapt their computational characteristics, is a hard problem. We introduce Morpheus - a benchmarking tool that includes both real mobile malware and a synthetic malware generator that can be configured to generate a computationally diverse malware sample-set - as a tool to evaluate computational signatures based malware detection. Morpheus also includes a set of computationally diverse benign applications that can be used to repackage malware into, along with a recorded trace of over 1 hour long realistic human usage for each app that can be used to replay both benign and malicious executions. The current Morpheus prototype targets Android applications and malware samples. Using Morpheus, we quantify the computational diversity in malware behavior and expose opportunities for dynamic analyses that can detect mobile malware. Specifically, the use of obfuscation and encryption to thwart static analyses causes the malicious execution to be more distinctive - a potential opportunity for detection. We also present potential challenges, specifically, minimizing false positives that can arise due to diversity of benign executions. Copyright 2014 ACM.","Kazdagli M.; Huang L.; Reddi V.; Tiwari M.","1"
"Domain","Anomaly Detection Systems","A detection design for malicious code with the use of multiple profiling technique","","2014","In diverse environments such as cloud environment, big data environment, etc. caused by the recent remarkable development in IT (information technology), even a system available for coping generally with anomaly is being repeated the development. This anomaly detection system needs to be advanced even the coping technology for detecting and analyzing the distribution of malicious code, which is being developed elaborately, as well as the technology of handling and processing a massive amount of data with real time, which are collected from diverse heterogeneous systems. To generally detect malicious code diese days, a multi-level behavior-based analysis is needed including static and dynamic analysis on malicious code of being included in executable files. This study researched into the original technology of quickly detecting a sign on hacking by integrating the results of unit profiling and then generally profiling the collected log, malicious code distribution · passage, malicious code behavior information. © 2014 International Information Institute.","Kim J.-K.; Shin S.-J.","0"
"Domain","Firmware Security","DroidRay: A security evaluation system for customized Android firmwares","10.1145/2590296.2590313","2014","Android mobile devices are enjoying a lion's market share in smartphones and mobile devices. This also attracts malware writers to target the Android platform. Recently, we have discovered a new Android malware distribution channel: releasing malicious firmwares with pre-installed malware to the wild. This poses significant risk since users of mobile devices cannot change the content of the malicious firmwares. Furthermore, pre-installed applications have ""more permissions"" (i.e., silent installation) than other legitimate mobile apps, so they can download more malware or access users' confidential information. To understand and address this new form of malware distribution channel, we design and implement ""DroidRay"": a security evaluation system for customized Android firmwares. DroidRay uses both static and dynamic analyses to evaluate the firmware security on both the application and system levels. To understand the impact of this new malware distribution channel, we analyze 250 Android firmwares and 24,009 pre-installed applications. We reveal how the malicious firmware and pre-installed malware are injected, and discovered 1,947 (8.1%) pre-installed applications have signature vulnerability and 19 (7.6%) firmwares contain pre-installed malware. In addition, 142 (56.8%) firmwares have the default signature vulnerability, five (2.0%) firmwares contain malicious hosts file, at most 40 (16.0%) firmwares have the native level privilege escalation vulnerability and at least 249 (99.6%) firmwares have the Java level privilege escalation vulnerability. Lastly, we investigate a realworld case of a pre-installed zero-day malware known as CEPlugnew, which involves 348,018 infected Android smart-phones, and we show its degree and geographical penetration. This shows the significance of this new malware distribution channel, and DroidRay is an effective tool to combat this new form of malware spreading. Copyright 2014 ACM.","Zheng M.; Sun M.; Lui J.C.S.","36"
"Domain","Defense in Depth","Spam Trapping System: Novel security framework to fight against spam botnets","10.1109/ICT.2014.6845160","2014","In this paper, we inspire from two analogies: the warfare kill zone and the airport check-in system, to tackle the issue of spam botnet detection. We add a new line of defense to the defense-in-depth model called the third line. This line is represented by a security framework, named the Spam Trapping System (STS) and adopts the prevent-then-detect approach to fight against spam botnets. The framework exploits the application sandboxing principle to prevent the spam from going out of the host and detect the corresponding malware bot. We show that the proposed framework can ensure better security against malware bots. In addition, an analytical study demonstrates that the framework offers optimal performance in terms of detection time and computational cost in comparison to intrusion detection systems based on static and dynamic analysis. © 2014 IEEE.","Derhab A.; Bouras A.; Muhaya F.B.; Khan M.K.; Xiang Y.","9"
"Domain","Behavioral Analytics","Static and dynamic malware behavioral analysis based on arm based board","","2015","A trap set to detect attempts at unauthorized use of information systems. But setting up these honeypots and keep these guzzling electricity 24×7 is rather expensive. Plus there is always a risk of a skillful hacker or a deadly malware may break through this and compromise the whole system. Honeypot name suggest, a pot that contents full of honey to allure beers, but in networks Scenario honeypot is valuable tool that helps to allure attackers. It helps to detect and analyze malicious activity over your network. However honeypots used for commercial organization do not share data and large honeypot gives read only data. We propose an Arm based device having all capability of honeypots to allure attackers. Current honeypots are based on large Network but we are trying to make s device which have the capabilities to establish in small network and cost effective. This research helps us to make a device based on arm board and CCFIS Software to allure attackers which is easy to install and cost effective. CCFIS Sensor helps us to Capture mal ware and Analysis the attack. In this we did reverse Engineering of honeypots to know about how it captures malware. During reverse engineering we know about pros and cons of honeypots that are mitigated in CCFIS Sensor. After Completion of device we compared honeypots and CCFIS Sensor to check the effectiveness of device. © 2015 IEEE.","Saxena U.; Bachhan O.P.; Majumdar R.","1"
"Domain","Risk Assessment","18th International Symposium on Research in Attacks, Intrusions, and Defenses, RAID 2015","","2015","The proceedings contain 29 papers. The special focus in this conference is on Hardware and Networks. The topics include: Ensemble learning for low-level hardware-supported malware detection; physical-layer detection of hardware keyloggers; reverse engineering intel last-level cache complex addressing using performance counters; hardware-assisted fine-grained code-reuse attack detection; scaling the performance of network intrusion detection with many-core processors; demystifying the IP blackspace; providing dynamic control to passive network security monitoring; probabilistic inference on integrity for access behavior based malware detection; counteracting data-only malware with code pointer examination; practical exploit early detection; preventing exploits in microsoft office documents through content randomization; improving accuracy of static integer overflow detection in binary; a formal framework for program anomaly detection; using dynamic analysis to crawl and test modern web applications; subverting network operating systems of software-defined networks; bytecode decrypting and DEX reassembling for packed android malware; dissecting and detecting mobile ransomware; continuous authentication on mobile devices using power consumption, touch gestures and physical movement of users; privacy risk assessment on online photos; privacy is not an option; evaluation of intrusion detection systems in virtualized environments using attack injection; security analysis of PHP bytecode protection mechanisms; early detection of application-level resource exhaustion and starvation attacks; towards automatic inference of kernel object semantics from binary code; transparent and generic botnet tracking and automatic orchestration of elastic detection services to secure cloud hosting.","","0"
"Domain","Hardware Trojan Detection","Efficient static power based side channel analysis for Hardware Trojan detection using controllable sleep transistors","10.1109/SECON.2015.7132948","2015","Modern integrated circuits (ICs) are vulnerable to Hardware Trojans (HTs) due to the globalization of semiconductor design and fabrication process. HT is an extra circuitry which alters functionality or leaks information making military and financial sectors vulnerable to security threats. The challenge in detection of HTs lies in their clever design and placement that makes them stealthy due to rare activation. While HTs can be detected through power side channels, methodologies that rely on dynamic power, which requires activation of HTs, can prove inefficient. On the other hand, static power based methodologies, which do not require activation of HTs, will be efficient even though they suffer from lower detection sensitivity. In this work, we propose a static power based HT detection methodology where the detection sensitivity is improved by compartmentalizing the circuit, utilizing the sleep transistors used to reduce leakage power. In order to provide efficient HT detection, the power based control is overridden in such a way that only a single sleep transistor is turned ON at any given instance. Even if the Trojan is distributed across the circuit to make it stealthier, the proposed method can effectively detect it. Using the proposed method, detection sensitivity of a 3-bit comparator based HT (0.26% of the total number of gates) has increased from 0.7% to 4.43% without process variations and from 2.03% to 4.32% in the presence of process variations with just 3 controllable sleep transistors The proposed method improved the detection sensitivity of smaller Trojan (only 0.02% of the total number of gates) by 10 folds with just 15 controllable sleep transistors. © 2015 IEEE.","Gunti N.B.; Lingasubramanian K.","6"
"Domain","Gap Analysis","AppContext: Differentiating malicious and benign mobile app behaviors using context","10.1109/ICSE.2015.50","2015","Mobile malware attempts to evade detection during app analysis by mimicking security-sensitive behaviors of benign apps that provide similar functionality (e.g., sending SMS messages), and suppressing their payload to reduce the chance of being observed (e.g., executing only its payload at night). Since current approaches focus their analyses on the types of securitysensitive resources being accessed (e.g., network), these evasive techniques in malware make differentiating between malicious and benign app behaviors a difficult task during app analysis. We propose that the malicious and benign behaviors within apps can be differentiated based on the contexts that trigger securitysensitive behaviors, i.e., the events and conditions that cause the security-sensitive behaviors to occur. In this work, we introduce AppContext, an approach of static program analysis that extracts the contexts of security-sensitive behaviors to assist app analysis in differentiating between malicious and benign behaviors. We implement a prototype of AppContext and evaluate AppContext on 202 malicious apps from various malware datasets, and 633 benign apps from the Google Play Store. AppContext correctly identifies 192 malicious apps with 87.7% precision and 95% recall. Our evaluation results suggest that the maliciousness of a security-sensitive behavior is more closely related to the intention of the behavior (reflected via contexts) than the type of the security-sensitive resources that the behavior accesses. © 2015 IEEE.","Yang W.; Xiao X.; Andow B.; Li S.; Xie T.; Enck W.","212"
"Domain","System Integration","A novel hybrid mobile malware detection system integrating anomaly detection with misuse detection","10.1145/2802130.2802132","2015","As the dominator of the Smartphone operating system market, Android has attracted the attention of malware authors and researchers alike. The number of Android malware is increasing rapidly regardless of the considerable number of proposed malware analysis systems. In this paper, by taking advantages of low false-positive rate of misuse detection and the ability of anomaly detection to detect zero-day malware, we propose a novel hybrid detection system based on a new open-source framework CuckooDroid, which enables the use of Cuckoo Sandbox's features to analyze Android malware through dynamic and static analysis. Our proposed system mainly consist of two parts, a misuse detector performing known malware detection and classification through combining static analysis with dynamic analysis; an anomaly detector performing abnormal apps detection through dynamic analysis. We evaluate our method with 5560 malware samples and 12000 benign samples. Experiments shows that our misuse detector with hybrid analysis can accurately detect and classify malware samples with an average positive rate 98.79%, 98.32% respectively; it is worth noting that our anomaly detector by dynamic analysis is capable of detecting zero-day malware with a low false negative rate (1.24%) and acceptable false positive rate (2.24%). Our proposed detection system is mainly designed for App store markets and the ordinary users who can access our system through mobile cloud service. © 2015 ACM.","Wang X.; Shi J.; Yang Y.; Xu K.; Zeng Y.; Tang C.","34"
"Domain","Statistical Analysis","System call analysis of Android Malware families","10.17485/ijst/2016/v9i21/90273","2016","Background/Objectives: Now a days, Android Malware is coded so wisely that it has become very difficult to detect them. The static analysis of malicious code is not enough for detection of malware as this malware hides its method call in encrypted form or it can install the method at runtime. The system call tracing is an effective dynamic analysis technique for detecting malware as it can analyze the malware at the run time. Moreover, this technique does not require the application code for malware detection. Thus, this can detect that android malware also which are difficult to detect with static analysis of code. As Android was launched in 2008, so there were fewer studies available regarding the behavior of Android Malware Families and their characteristics. The aim of this work is to explore the behavior of 10 popular Android Malware Families focused on System Call Pattern of these families. Methods/Statistical Analysis: For this purpose, the authors have extracted the system call trace of 345 malicious applications from 10 Android Malware Families named FakeInstaller, Opfake, Plankton, DroidKungFu, BaseBridge, Iconosys, Kmin, Adrd and Gappusin using strace android tool and compared it with the system calls pattern of 300 Benign Applications to justify the behavior of malicious application. Findings: During the experiment, it is observed that the malicious applications invoke some system calls more frequently than benign applications. Different Android malware invokes the different set of system calls with different frequency. Applications/Improvements: This analysis can prove helpful in designing intrusion-detection systems for an android mobile device with more accuracy.","Malik S.; Khatter K.","33"
"Domain","Edge Device Security","Machine learning-based mobile threat monitoring and detection","10.1109/SERA.2016.7516130","2016","Mobile device security must keep up with the increasing demand of mobile users. Smartphones are every day becoming connected to more devices and services, interacting with the growing Internet of things. Every new service, and connection, creates a new pathway for intrusion and data theft. Each intrusion can yield further opportunities for breaches of corporate and enterprise infrastructure, and significant cost. In our study, we propose a mobile security platform that combines our developed security web server, analysis module, and Android OS application, with the Google Cloud Messaging service for queued and targeted device messaging. In the cloud, the developed LAMP (Linux, Apache, MySQL, PHP) server sends, receives, and stores data from a connected device via the corresponding Android OS application. The data consists of system information for device identification, and application data to be distributed to the analysis module for malicious content to be extracted and identified. The analysis module, utilizing the Weka software, performs both static and dynamic analyses to detect Android malware, simultaneously providing rapid and intuitive security with predictive capabilities. The server additionally provides device status visualization and manual security operations. © 2016 IEEE.","Hatcher W.G.; Maloney D.; Yu W.","10"
"Domain","Security Architecture","Exploring the malicious android applications and reducing risk using static analysis","10.1109/ICEEOT.2016.7754896","2016","Android plays a vital role in the today's market. According to recent survey placed nearly 84.4% of people stick to android which explosively become popular for personal or business purposes. It is no doubt that the application are extremely familiar in the market for their amazing features and the wonderful benefits of android applications makes the users to fall for it. Android imparts significant responsibility to application developers for designing the application with understanding the risk of security issues. When concerned about security, malware protection is a major issue in which android has been a major target of malicious applications. In android based applications, permission control is one of the major security mechanisms. In this project, the permission induced risk in application, and the fundamentals of the android security architecture are explored, and it also focuses on the security ranking algorithms that are unique to specific applications. Hence, we propose the system providing the detection of malware analysis based on permission and steps to mitigate from accessing unwanted permission (limits the permission). It is also designed to reduce the probability of vulnerable attacks. © 2016 IEEE.","Kavitha K.; Salini P.; Ilamathy V.","11"
"Domain","Adware Injection","POSTER: Static ROP chain detection based on hidden Markov model considering ROP chain integrity","10.1145/2976749.2989040","2016","Return-oriented programming (ROP) has been crucial for attackers to evade the security mechanisms of operating systems. It is currently used in malicious documents that exploit viewer applications and cause malware infection. For inspecting a large number of commonly handled documents, high-performance and exible-detection methods are required. However, current solutions are either time-consuming or less precise. In this paper, we propose a novel method for statically detecting ROP chains in malicious documents. Our method generates a hidden Markov model (HMM) of ROP chains as well as one of benign documents by learning known malicious and benign documents and libraries used for ROP gadgets. Detection is performed by calculating the likelihood ratio between malicious and benign HMMs. In addition, we reduce the number of false positives by ROP chain integrity checking, which confirms whether ROP gadgets link properly if they are executed. Experimental results showed that our method can detect ROP-based malicious documents with no false negatives and few false positives at high throughput. Return-oriented programming (ROP) has been crucial for attackers to evade the security mechanisms of operating systems. It is currently used in malicious documents that exploit viewer applications and cause malware infection. For inspecting a large number of commonly handled documents, high-performance and exible-detection methods are required. However, current solutions are either time-consuming or less precise. In this paper, we propose a novel method for statically detecting ROP chains in malicious documents. Our method generates a hidden Markov model (HMM) of ROP chains as well as one of benign documents by learning known malicious and benign documents and libraries used for ROP gadgets. Detection is performed by calculating the likelihood ratio between malicious and benign HMMs. In addition, we reduce the number of false positives by ROP chain integrity checking, which confirms whether ROP gadgets link properly if they are executed. Experimental results showed that our method can detect ROP-based malicious documents with no false negatives and few false positives at high throughput. © 2016 Copyright held by the owner/author(s).","Usui T.; Ikuse T.; Iwamura M.; Yada T.","1"
"Domain","Tool Development","Towards a 2-hybrid Android malware detection test framework","10.1109/CONIELECOMP.2016.7438552","2016","Current pervasive usage of mobile devices around the world has rose big security and data protection concerns both into the application development process as into the data security field. Although the long way of development in PC security malware treatment in the computer science and industrial areas, mobile devices security research and development have proved that in this area malware treatment goes far beyond PC malware analysis and prevention techniques replication. In this context, this paper provides a description of a current open-ended project aimed to produce a 2-hybrid malware detection test framework. Based on the current trends of hybrid malware analysis, in this work the term 2-hybrid implies both a local(host)-remote(server/cloud) implementation and a static-dynamic analysis approach. © 2016 IEEE.","Rodriguez-Mota A.; Escamilla-Ambrosio P.J.; Morales-Ortega S.; Salinas-Rosales M.; Aguirre-Anaya E.","11"
"Domain","Risk Management","11th International Conference on Global Security, Safety, and Sustainability, ICGS3 2017","","2016","The proceedings contain 32 papers. The special focus in this conference is on Global Security, Safety, and Sustainability. The topics include: Forensic analysis of secure ephemeral messaging applications on android platforms; aspects of voice communications fraud; scalable frameworks for application security and data protection; balancing targeted delivery of content and personal freedom in the digital on-line video marketing landscape; towards an enterprise architecture framework for community policing; a scalable malware classification based on integrated static and dynamic features; source camera identification using non-decimated wavelet transform; phishing-deception data model for online detection and human protection; cyber attacks analysis using decision tree technique for improving cyber situational awareness; disaster management system as an element of risk management for natural disaster systems using the pestle framework; a critical review of technology acceptance models and the decision to invest in information security; application of a digraph for behavioural eye tracking biometrics; the future of enterprise security with regards to mobile technology and applications; performance analysis for traffics in mobile ad hoc network; global triumph or exploitation of security and privacy concerns in e-learning systems; efficient energy and processes time algorithm for offloading using cloud computing; a novel anonymity quantification and preservation model for Undernet relay networks and facial recognition cane for the visually impaired.","","0"
"Domain","Research and Development","Towards a 2-hybrid Android malware detection test framework","10.1109/CONIELECOMP.2016.7438552","2016","Current pervasive usage of mobile devices around the world has rose big security and data protection concerns both into the application development process as into the data security field. Although the long way of development in PC security malware treatment in the computer science and industrial areas, mobile devices security research and development have proved that in this area malware treatment goes far beyond PC malware analysis and prevention techniques replication. In this context, this paper provides a description of a current open-ended project aimed to produce a 2-hybrid malware detection test framework. Based on the current trends of hybrid malware analysis, in this work the term 2-hybrid implies both a local(host)-remote(server/cloud) implementation and a static-dynamic analysis approach. © 2016 IEEE.","Rodriguez-Mota A.; Escamilla-Ambrosio P.J.; Morales-Ortega S.; Salinas-Rosales M.; Aguirre-Anaya E.","11"
"Domain","Capability Assessment","Proceedings - International Symposium on Software Reliability Engineering, ISSRE","","2016","The proceedings contain 46 papers. The topics discussed include: on adaptive sampling-based testing for software reliability assessment; frequent subgraph based familial classification of android malware; SCOUT: a multi-objective method to select components in designing unit testing; the effect of test suite type on regression test selection; WAP: a novel automatic test generation technique based on moth flame optimization; cause points analysis for effective handling of alarms; ORPLocator: identifying read points of configuration options via static analysis; anomaly detection and root cause localization in virtual network functions; experience report: system log analysis for anomaly detection; SV-AF a security vulnerability analysis framework; proving concurrent data structures linearizable; detecting, exposing, and classifying sequential consistency violations; approximate lock: trading off accuracy for performance by skipping critical sections; and the impact of feature selection on defect prediction performance: an empirical comparison.","","0"
"Domain","Telecom Infrastructure","Enhanced detection of advanced malicious software","10.1109/UEMCON.2016.7777866","2016","Over the last year the number of polymorphic and metamorphic malware samples seen in the wild has grown exponentially. The development of signatures for defensive purposes simply cannot keep up with the pace of these new malware attacks. New and sophisticated malware have been able to bypass network protection infrastructures to deliver attacks on the intended target. The network defense apparatus which relies on signature-based detection finds itself practically useless and unable to protect networks, platforms and data. This paper describes a novel approach to detect polymorphic and metamorphic malware. Our approach uses a unique method of leveraging multidimensional topological data with advanced clustering techniques for network detection. The results of our initial research and a discussion of future research possibilities are also presented. © 2016 IEEE.","Fraley J.B.; Cannady J.","4"
"Domain","Effectiveness Assessment","Improving fuzzing using software complexity metrics","10.1007/978-3-319-30840-1_16","2016","Vulnerable software represents a tremendous threat to modern information systems. Vulnerabilities in widespread applications may be used to spread malware, steal money and conduct target attacks. To address this problem, developers and researchers use different approaches of dynamic and static software analysis; one of these approaches is called fuzzing. Fuzzing is performed by generating and sending potentially malformed data to an application under test. Since first appearance in 1988, fuzzing has evolved a lot, but issues which addressed to effectiveness evaluation have not fully investigated until now. In our research, we propose a novel approach of fuzzing effectiveness evaluation and improving, taking into account semantics of executed code along with a quantitative assessment. For this purpose, we use specific metrics of source code complexity assessment specially adapted to perform analysis of machine code. We conducted effectiveness evaluation of these metrics on 104 wide-spread applications with known vulnerabilities. As a result of these experiments, we were able to identify the best metrics that is more suitable to find bugs. In addition we proposed a set of open-source tools for improving fuzzing effectiveness. The experimental results of effectiveness assessment have shown viability of our approach and allowed to reduce time costs for fuzzing campaign by an average of 26–28% for 5 well-known fuzzing systems. © Springer International Publishing Switzerland 2016.","Shudrak M.O.; Zolotarev V.V.","15"
"Domain","Cloud Security","5th International Symposium on Security in Computing and Communications, SSCC 2017","","2017","The proceedings contain 34 papers. The special focus in this conference is on Security in Computing and Communications. The topics include: Security Schemes for Constrained Application Protocol in IoT: A Precise Survey; jordan Center Segregation: Rumors in Social Media Networks; honeyword with Salt-Chlorine Generator to Enhance Security of Cloud User Credentials; multi Class Machine Learning Algorithms for Intrusion Detection - A Performance Study; symmetric Key Based Secure Resource Sharing; Prevention of PAC File Based Attack Using DHCP Snooping; a Quasigroup Based Synchronous Stream Cipher for Lightweight Applications; security Analysis of Key Management Schemes Based on Chinese Remainder Theorem Under Strong Active Outsider Adversary Model; deep Learning for Network Flow Analysis and Malware Classification; fast Verification of Digital Signatures in IoT; Kernel Modification APT Attack Detection in Android; opaque Predicate Detection by Static Analysis of Binary Executables; an Overview on Spora Ransomware; Pattern Generation and Test Compression Using PRESTO Generator; challenges in Android Forensics; Current Consumption Analysis of AES and PRESENT Encryption Algorithms in FPGA Using the Welch Method; spiral Model for Digital Forensics Investigation; smart-Lock Security Re-engineered Using Cryptography and Steganography; adding Continuous Proactive Forensics to Android; ASLR and ROP Attack Mitigations for ARM-Based Android Devices; Efficient and Provably Secure Pairing Free ID-Based Directed Signature Scheme; CBEAT: Chrome Browser Extension Analysis Tool; hardware Trojan Detection Using Effective Test Patterns and Selective Segmentation; estimation and Tracking of a Ballistic Target Using Sequential Importance Sampling Method; an Android Application for Secret Image Sharing with Cloud Storage.","","0"
"Domain","Market Analysis","Ransomware analysis based on the surface, runtime and static code method","","2017","Ransomware is one of the latest malware in recent years that can infect computers and smartphones. The malware is able to encrypt the files inside the computer or smartphone, thus prevents the users (victims) from accessing their system. In addition, the victims will be asked to pay the ransom through certain online payment methods to get a decrypt key. Due to the latest development of ransomware variants, a solution is required to prevent the malware attack. This study analyzes the cryptolockers ransomware which utilize three method such as surface, runtime and static code method. The result provided the detail characteristics of ransomware through three aforementioned methods as well as the solution to prevent the attack. © 2005 – ongoing JATIT & LLS.","Usman L.; Prayudi Y.; Riadi I.","5"
"Domain","Complexity Theory","Evolving Deep Neural Networks architectures for Android malware classification","10.1109/CEC.2017.7969501","2017","Deep Neural Networks (DNN) have become a powerful, widely used, and successful mechanism to solve problems of different nature and varied complexity. Their ability to build models adapted to complex non-linear problems, have made them a technique widely applied and studied. One of the fields where this technique is currently being applied is in the malware classification problem. The malware classification problem has an increasing complexity, due to the growing number of features needed to represent the behaviour of the application as exhaustively as possible. Although other classification methods, as those based on SVM, have been traditionally used, the DNN pose a promising tool in this field. However, the parameters and architecture setting of these DNNs present a serious restriction, due to the necessary time to find the most appropriate configuration. This paper proposes a new genetic algorithm designed to evolve the parameters, and the architecture, of a DNN with the goal of maximising the malware classification accuracy, and minimizing the complexity of the model. This model is tested against a dataset of malware samples, which are represented using a set of static features, so the DNN has been trained to perform a static malware classification task. The experiments carried out using this dataset show that the genetic algorithm is able to select the parameters and the DNN architecture settings, achieving a 91% accuracy. © 2017 IEEE.","Martin A.; Fuentes-Hurtado F.; Naranjo V.; Camacho D.","34"
"Domain","Email Security","A pragmatic android malware detection procedure","10.1016/j.cose.2017.07.013","2017","The academic security research community has studied the Android malware detection problem extensively. Machine learning methods proposed in previous work typically achieve high reported detection performance on fixed datasets. Some of them also report reasonably fast prediction times. However, most of them are not suitable for real-world deployment because requirements for malware detection go beyond these figures of merit. In this paper, we introduce several important requirements for deploying Android malware detection systems in the real world. One such requirement is that candidate approaches should be tested against a stream of continuously evolving data. Such streams of evolving data represent the continuous flow of unknown file objects received for categorization, and provide more reliable and realistic estimate of detection performance once deployed in a production environment. As a case study we designed and implemented an ensemble approach for automatic Android malware detection that meets the real-world requirements we identified. Atomic Naive Bayes classifiers used as inputs for the Support Vector Machine ensemble are based on different APK feature categories, providing fast speed and additional reliability against the attackers due to diversification. Our case study with several malware families showed that different families are detected by different atomic classifiers. To the best of our knowledge, our work contains the first publicly available results generated against evolving data streams of nearly 1 million samples with a model trained over a massive sample set of 120,000 samples. © 2017 Elsevier Ltd","Palumbo P.; Sayfullina L.; Komashinskiy D.; Eirola E.; Karhunen J.","35"
"Domain","Intellectual Property Protection","Protecting software through obfuscation: can it keep pace with progress in code analysis?","10.1145/2886012","2017","Software obfuscation has always been a controversially discussed research area. While theoretical results indicate that provably secure obfuscation in general is impossible, its widespread application inmalware and commercial software shows that it is nevertheless popular in practice. Still, it remains largely unexplored to what extent today's software obfuscations keep up with state-of-The-Art code analysis and where we stand in the arms race between software developers and code analysts. The main goal of this survey is to analyze the effectiveness of different classes of software obfuscation against the continuously improving deobfuscation techniques and off-The-shelf code analysis tools. The answer very much depends on the goals of the analyst and the available resources. On the one hand, many forms of lightweight static analysis have difficulties with even basic obfuscation schemes, which explains the unbroken popularity of obfuscation among malware writers. On the other hand, more expensive analysis techniques, in particular when used interactively by a human analyst, can easily defeat many obfuscations. As a result, software obfuscation for the purpose of intellectual property protection remains highly challenging. ©2016 ACM.","Schrittwieser S.; Katzenbeisser S.; Kinder J.; Merzdovnik G.; Weippl E.","137"
"Domain","Continuous Monitoring","Formal model of process functioning in the operating system","10.15622/sp.51.4","2017","The article presents a formal model of the functioning of the process in the operating system, created on the basis of a subject-object approach to the separation of the main elements of the operating system. A feature of the presented model is a high-level abstraction of the interaction between the operating system processes and resources, which allows applying the obtained results to a wide range of similar systems. The use of this model is necessary for carrying out the transition from the real world object (process) to a formal model to take into account the significant properties of the behavior of the process both during the static analysis phase of a binary executable file and the dynamic phase of monitoring its implementation. The system of safe execution of code is an extension of the composition of such approaches to the detection of malicious software as the application of the formal verification method «Model checking» and the use of machine safety to monitor the implementation of the studied program. This system allows using in corporate information and computer networks only such software, reliability of which is confirmed by a formal mathematical proof and continuous monitoring of its execution.","Kozachok A.V.; Kochetkov E.V.","1"
"Domain","Security Metrics","Using ontologies to perform threat analysis and develop defensive strategies for mobile security","10.1007/s10799-014-0213-1","2017","Existing studies on the detection of mobile malware have focused mainly on static analyses performed to examine the code-structure signature of viruses, rather than the dynamic behavioral aspects. By contrast, the unidentified behavior of new mobile viruses using the self-modification, polymorphic, and mutation techniques for variants have largely been ignored. The problem of precision regarding malware variant detection has become one of the key concerns in mobile security. Accordingly, the present study proposed a threat risk analysis model for mobile viruses, using a heuristic approach incorporating both malware behavior analysis and code analysis to generate a virus behavior ontology associated with the Protégé platform. The proposed model can not only explicitly identify an attack profile in accordance with structural signature of mobile viruses, but also overcome the uncertainty regarding the probability of an attack being successful. This model is able to achieve this by extending frequent episode rules to investigate the attack profile of a given malware, using specific event sequences associated with the sandbox technique for mobile applications (apps) and hosts. For probabilistic analysis, defense evaluation metrics for each node were used to simulate the results of an attack. The simulations focused specifically on the attack profile of a botnet to assess the threat risk. The validity of the proposed approach was demonstrated numerically by using two malware cyber-attack examples. Overall, the results presented in this paper prove that the proposed scheme offers an effective countermeasure, evaluated using a set of security metrics, for mitigating network threats by considering the interaction between the attack profiles and defense needs. © 2015, Springer Science+Business Media New York.","Wang P.; Chao K.-M.; Lo C.-C.; Wang Y.-S.","14"
"Domain","Publication and Dissemination","HTChecker: Detecting hardware trojans based on static characteristics","10.1109/ISCAS.2017.8050674","2017","Hardware Trojan detection, which is very important to the chip security, has drawn more and more attention in both academia and industry. In this paper, we propose a novel hardware Trojan detection scheme named HTChecker, which detects hardware Trojans with subgraph isomorphism based on static characteristics of Trojans. Unlike other schemes, HTChecker pay more attention to preventing the replication and dissemination of hardware Trojans. We evaluate the HTChecker with random mixtures of Trojans and circuits from ITC'99 benchmarks and OpenCores. Experiments show that HTChecker can detect Trojans quickly and accurately without Golden Chip and it can cope with actual VLSI designs with large scale efficiently. © 2017 IEEE.","Shen H.; Zhao Y.","4"
"Domain","Critical Infrastructure Domain","A new static-based framework for ransomware detection","10.1109/DASC/PiCom/DataCom/CyberSciTec.2018.00124","2018","Recently, ransomware attacks are on the rise hitting critical infrastructures and organizations globally. Ransomware uses advanced encryption techniques to encrypt important files on the targeted computer, then it requests payment to decrypt the encrypted files again. Therefore, the detection and prevention of ransomware attacks represent major challenges for security researchers. This research proposes a novel static-based rules ransomware detection framework. The decision rules of the proposed framework are based on static features extracted from the ransomware files. When scanned file reached rules threshold, the framework evaluates triggered rules through logical operations to assign a score for each file. Every score represents a confidence level whether this file is ransomware or not from critical to low. The proposed framework has proven that it can detect new families based on rules and logical operations with high accuracy and detection ratio. © 2018 IEEE.","Medhat M.; Gaber S.; Abdelbaki N.","37"
"Domain","Incident Response","Introduction to dynamic malware analysis for cyber intelligence and forensics","","2018","Day by day cyber threats are increasing and one of the common aspects of all attacks has a commonality, which is a malware. Almost every systems, networks, mobile phones breaches has Involvement of Trojans, rootkits, backdoors, spywares, et cetera. The network security team of certain firm where an attack has happened cannot respond to zero day attack or day one attack, and hence requires a special incident response team or Malware analysts. The report incident by Verizon data Breach of 2015 says, about 80-90% of malwares are unique to an organization. The Verizon information break episode reaction finished up this year around 40,000 occurrences, including 1,935 affirmed information ruptures. No system is 100% safe, but understanding the threat we will face will help us to improve our security. Therefore in order to understand a malware we need to study its behaviour, and that will be our dynamic analysis of a malware. © IAEME Publication","Vara Prasad P.V.; Sowmya N.; Rajasekhar Reddy K.; Jayant Bala P.","5"
"Domain","Data Visualization","Use of Data Visualisation for Zero-Day Malware Detection","10.1155/2018/1728303","2018","With the explosion of Internet of Things (IoT) worldwide, there is an increasing threat from malicious software (malware) attackers that calls for efficient monitoring of vulnerable systems. Large amounts of data collected from computer networks, servers, and mobile devices need to be analysed for malware proliferation. Effective analysis methods are needed to match with the scale and complexity of such a data-intensive environment. In today's Big Data contexts, visualisation techniques can support malware analysts going through the time-consuming process of analysing suspicious activities thoroughly. This paper takes a step further in contributing to the evolving realm of visualisation techniques used in the information security field. The aim of the paper is twofold: (1) to provide a comprehensive overview of the existing visualisation techniques for detecting suspicious behaviour of systems and (2) to design a novel visualisation using similarity matrix method for establishing malware classification accurately. The prime motivation of our proposal is to identify obfuscated malware using visualisation of the extended x86 IA-32 (opcode) similarity patterns, which are hard to detect with the existing approaches. Our approach uses hybrid models wherein static and dynamic malware analysis techniques are combined effectively along with visualisation of similarity matrices in order to detect and classify zero-day malware efficiently. Overall, the high accuracy of classification achieved with our proposed method can be visually observed since different malware families exhibit significantly dissimilar behaviour patterns. © 2018 Sitalakshmi Venkatraman and Mamoun Alazab.","Venkatraman S.; Alazab M.","130"
"Domain","NIST Cybersecurity Framework","CEUR Workshop Proceedings","","2018","The proceedings contain 15 papers. The topics discussed include: Dr Cookie and Mr Token web session implementations and how to live with them; performance of Botnet detection by neural networks in software-defined networks; extending domain name monitoring. identifying potentially malicious domains using hash signatures of DOM elements; data leakage in Java applets with exception mechanism; PBFT vs proof-of-authority: applying the CAP theorem to permissioned blockchain; malware detection through low-level features and stacked denoising autoencoders; preventing ransomware attacks through file system filter drivers; understanding the Twitter user networks of viruses and ransomware attacks; static analysis for GDPR compliance; a distributed cybersecurity framework for heterogeneous environments; cross-cloud management of sensitive data via blockchain: a payslip calculation use case; visualizing Bitcoin flows of ransomware: WannaCry one week later; MAD-IOS: dynamic app vulnerability analysis in non-jail-broken devices; enforcing security in IoT and home networks; and firewall management with firewall synthesizer.","","0"
"Domain","Disaster Recovery","A survey on technical threat intelligence in the age of sophisticated cyber attacks","10.1016/j.cose.2017.09.001","2018","Today's cyber attacks require a new line of security defenses. The static approach of traditional security based on heuristic and signature does not match the dynamic nature of new generation of threats that are known to be evasive, resilient and complex. Organizations need to gather and share real-time cyber threat information and to transform it to threat intelligence in order to prevent attacks or at least execute timely disaster recovery. Threat Intelligence (TI) means evidence-based knowledge representing threats that can inform decisions. There is a general awareness for the need of threat intelligence while vendors today are rushing to provide a diverse array of threat intelligence products, specifically focusing on Technical Threat Intelligence (TTI). Although threat intelligence is being increasingly adopted, there is little consensus on what it actually is, or how to use it. Without any real understanding of this need, organizations risk investing large amounts of time and money without solving existing security problems. Our paper aims to classify and make distinction among existing threat intelligence types. We focus particularly on the TTI issues, emerging researches, trends and standards. Our paper also explains why there is a reluctance among organizations to share threat intelligence. We provide sharing strategies based on trust and anonymity, so participating organizations can do away with the risks of business leak. We also show in this paper why having a standardized representation of threat information can improve the quality of TTI, thus providing better automated analytics solutions on large volumes of TTI which are often non-uniform and redundant. Finally, we evaluate most popular open source/free threat intelligence tools, and compare their features with those of a new AlliaCERT TI tool. © 2017 Elsevier Ltd","Tounsi W.; Rais H.","349"
"Domain","Cyber Threat Intelligence","Research design and consulting through seminars in proactive artificial intelligence for cybersecurity (SPAIC)","","2019","The authors have designed a platform for research and consulting through a high-level collaborative seminar series to promote networking in proactive artificial intelligence (AI) for cybersecurity (SPAIC). The primary objective is to cover a wide range of techniques in cyber threat intelligence gathering from various social media to dark-net and deep-net, hacker forum discussions, and malicious hacking. The secondary objective is to bring together researchers and consultants in the field to come up with automated and advanced methods of attack vector recognition and isolation using AI and machine learning (ML). In most cases, the hidden nature of security issues makes it hard for fixes in real time. Advanced AI techniques have proven to be superior to the current static methods in cyber threat detection. There have been numerous recent advances in the field of AI, especially in algorithmic approaches such as Speech and Signal Processing, Machine and Deep Learning, Computer Vision, Robotics, Data Mining, Augmented/Virtual Reality, Blockchain, and Cognitive Computing. These highly advanced methods provide tremendous opportunities for behavior/trend based automated analysis, detection, and prevention of cyber attacks/threats. The seminar series focus on techniques developed to identify emerging cyber threats including information on newly developed malware and exploits that have not yet been deployed in a cyber-attack. The seminar series will be augmented with various data mining and machine learning techniques as they have proven to recall malicious hacking with high precision. In addition to the potential of development of concepts and whitepapers for a large-scale center, the seminar series will result in identification and recruitment of industrial, academic and/or government partnerships in support of initiatives and research and consulting collaborations as well as creation and support of resources such as research consortia, collaboration sites or social networking tools to facilitate large-scale inter-university research programs in AI and ML in cybersecurity. Copyright 2019. © by the International Institute of Informatics and Systemics. All rights reserved.","Sheybani E.; Javidi G.","0"
"Domain","Penetration Testing","Survey of protocol reverse engineering algorithms: Decomposition of tools for static traffic analysis","10.1109/COMST.2018.2867544","2019","Knowledge about a network protocol to understand the communication between entities is necessary for vulnerability research, penetration testing, malware analysis, network reconnaissance, and network modeling. Traffic analysis is one approach to infer a protocol, and this approach has specific challenges, tasks, methods, and solutions. In this survey, we collect tools presented by prior research in the field of protocol reverse engineering by static traffic trace analysis. We dissect each tool to discern the individual mechanisms and the algorithms on which they are based, then categorize and contrast the mechanisms and algorithms used in static traffic trace analysis to discuss how successfully they were applied in each case. To structure our discussion about the tools, we compared classification schemes for protocol reverse engineering. We present and discuss an explicit process model for static traffic trace analysis to reveal the common structure of the decomposed tools and frameworks from previous research. Via discussions of the algorithms applied within each tool, we show relations between tools, methods, and the process for each process task. We validate our model by applying it to each of the tools, then provide an outline of the utility of protocol reverse engineering. Beginning with the process description, we deduce which solutions and algorithms have already been investigated and where challenges remain to determine how new solutions may be researched in the future. Across the entire field of protocol reverse engineering, few implementations of tools and frameworks are publicly available, which remains a prevalent problem. © 2018 IEEE.","Kleber S.; Maile L.; Kargl F.","45"
"Domain","Performance Optimization","GPU taint tracking","","2019","Dynamic tainting tracks the influence of certain inputs (taint sources) through execution and it is a powerful tool for information flow analysis and security. Taint tracking has primarily targeted CPU program executions. Motivated by recent recognition of information leaking in GPU memory and GPU-resident malware, this paper presents the first design and prototype implementation of a taint tracking system on GPUs. Our design combines a static binary instrumentation with dynamic tainting at runtime. We present new performance optimizations by exploiting unique GPU characteristics-a large portion of instructions on GPU runtime parameters and constant memory can be safely eliminated from taint tracking; large GPU register file allows fast maintenance of a hot portion of the taint map. Experiments show that these techniques improved the GPU taint tracking performance by 5 to 20 times for a range of image processing, data encryption, and deep learning applications. We further demonstrate that GPU taint tracking can enable zeroing sensitive data to minimize information leaking as well as identifying and countering GPU-resident malware. © USENIX Annual Technical Conference, USENIX ATC 2017. All rights reserved.","Hayes A.B.; Li L.; He J.; Zhang E.Z.; Hedayati M.; Shen K.","6"
"Domain","Cyber Kill Chain","A layered security architecture based on cyber kill chain against advanced persistent threats","10.1049/PBPC028E_ch7","2019","Inherently, static traditional defense mechanisms which mostly act successfully in detecting known attacks using techniques such as blacklisting and malware signature detection are insufficient in defending against dynamic and sophisticated advanced persistent threat (APT) cyberattacks. These attacks are usually conducted dynamically in several stages and may use different attack paths simultaneously to accomplish their commission. Cyber kill chain (CKC) framework provides a model for all stages of an intrusion from early reconnaissance to actions on objectives when the attacker’s goal is met which could be stealing data, disrupting operations or destroying infrastructure. Achieving the final goal, an adversary must progress all stages successfully. Any disruption at any stage of the attack by the defender would mitigate or cease the intrusion campaign. In this chapter, we align 7D defense model with CKC steps to develop a layered architecture to detected APT actors tactics, techniques and procedures in each step of CKC. This model can be applied by defenders to plan resilient defense and mitigation strategies against prospective APT actors. © The Institution of Engineering and Technology 2019.","Bahrami P.N.; Dehghantanha A.; Dargahi T.; Parizi R.M.; Choo K.-K.R.; Javadi H.H.S.","0"
"Domain","Monitoring and Alerting","Research on key technology of enterprise private cloud anti-leakage","10.1109/ICICAS48597.2019.00178","2019","With the rapid development of Internet and cloud computing technology, more and more enterprises use private cloud for collaborative work. Important data protection has become the focus of enterprise security protection. Based on the need of data anti-leakage, content monitoring and filtering security techniques were studied. And the private cloud anti-leakage prototype system was realized, which provided real-time monitoring for internal staff's intentional or unintentional leakages and the leakages caused by the implantation of malicious code from external attackers. When sending files containing pre-set sensitive words, the system will remind the user and inform the administrator. The received document is embedded with executable script code or the document itself is binary code, and dynamic and static combination detection will be performed. If the document includes malicious code, then warning information will timely feedback to the administrator to strengthen the enterprise information security management. © 2019 IEEE.","Chen Z.; Wang J.; Yang Y.; Yang G.; Wen L.; Chen L.","1"
"Domain","Healthcare Security","SOFTWARE ENGINEERING ARTIFICIAL INTELLIGENCE, COMPLIANCE, AND SECURITY","","2020","Information security is important in every aspect of daily life. This book examines four areas where risks are present: artificial intelligence (AI), the internet of things (IoT), government and malware. The authors channel their experience and research into an accessible body of knowledge for consideration by professionals. AI is introduced as a tool for healthcare, security and innovation. The advantages of using AI in new industries are highlighted in the context of recent developments in mechanical engineering, and a survey of AI software risks is presented focusing on well-publicized failures and US FDA regulatory guidelines. The risks associated with the billions of devices that form the IoT grow with the availability of such devices in consumer products, healthcare, energy infrastructure and transportation. The risks, software engineering risk mitigation methods and standards promoting a level of care for the manufacture of IoT devices are examined because of their importance for software developers. Strategic insights for software developers looking to do business with the US federal government are presented, considering threats to both public and private sectors as well as governmental priorities from recent executive and legislative branch actions. Finally, an analysis of malicious software that infects numerous computer systems each day and causes millions of dollars in damages every year is presented. Malicious software, or ""malware,"" is software designed with hostile intent, but the damage may be mitigated with static and dynamic analyses, which are processes for studying how malware operates and analyzing potential impacts. © 2021 by Nova Science Publishers, Inc. All rights reserved.","D’Andrade B.","0"
"Domain","Software as a Service","District Ransomware: Static and Dynamic Analysis","10.1109/ISDFS49300.2020.9116451","2020","Ransomware is one of the fastest growing threats to internet security. New Ransomware attacks happen around the globe, on a weekly basis. These attacks happen to individual users and groups, from almost any type of business. Many of these attacks involve Ransomware as a service, where one attacker creates a template Malware, which can be purchased and modified by other attackers to perform specific actions. The District Ransomware was a less well-known strain. This work focuses on statically and dynamically analyzing the District Ransomware and presenting the results. © 2020 IEEE.","Andes N.; Wei M.","1"
"Domain","Mesh Network Malware","A Malware Classification Method Based on the Capsule Network","10.1007/978-3-030-62223-7_4","2020","Malware has become a serious threat to network security. Traditional static analysis methods usually cannot effectively detect packers, obfuscations, and variants. Dynamic analysis is not efficient when dealing with large amounts of malware. Aiming at the shortcomings of the existing methods, this paper proposes a method for analyzing malware based on the capsule network. It uses a supervised learning method to train the capsule network with a large number of malware samples with existing category labels. In the process of constructing features, this paper adopts a method of combining static features and dynamic features to extract the operation code information based on static analysis, and extract the API call sequence information based on general analysis. Both characteristics can well represent the structure and behavior of malware. Then use N-Gram to construct sequence features, visualize the N-Gram sequence, generate malware images, and finally use the capsule network for classification detection. In addition, this paper improves the original capsule network and verifies the effect of the improved model. © 2020, Springer Nature Switzerland AG.","Wang Z.; Han W.; Lu Y.; Xue J.","4"
"Domain","Firmware Analysis","ISAdetect: Usable Automated Detection of CPU Architecture and Endianness for Executable Binary Files and Object Code","10.1145/3374664.3375742","2020","Static and dynamic binary analysis techniques are actively used to reverse engineer software's behavior and to detect its vulnerabilities, even when only the binary code is available for analysis. To avoid analysis errors due to misreading op-codes for a wrong CPU architecture, these analysis tools must precisely identify the Instruction Set Architecture (ISA) of the object code under analysis. The variety of CPU architectures that modern security and reverse engineering tools must support is ever increasing due to massive proliferation of IoT devices and the diversity of firmware and malware targeting those devices. Recent studies concluded that falsely identifying the binary code's ISA caused alone about 10% of failures of IoT firmware analysis. The state of the art approaches detecting ISA for executable object code look promising, and their results demonstrate effectiveness and high-performance. However, they lack the support of publicly available datasets and toolsets, which makes the evaluation, comparison, and improvement of those techniques, datasets, and machine learning models quite challenging (if not impossible). This paper bridges multiple gaps in the field of automated and precise identification of architecture and endianness of binary files and object code. We develop from scratch the toolset and datasets that are lacking in this research space. As such, we contribute a comprehensive collection of open data, open source, and open API web-services. We also attempt experiment reconstruction and cross-validation of effectiveness, efficiency, and results of the state of the art methods. When training and testing classifiers using solely code-sections from executable binary files, all our classifiers performed equally well achieving over 98% accuracy. The results are consistent and comparable with the current state of the art, hence supports the general validity of the algorithms, features, and approaches suggested in those works. © 2020 ACM.","Kairajärvi S.; Costin A.; Hämäläinen T.","4"
"Domain","Vulnerability Static Scan","Dynamic Distributed Secure Storage against Ransomware","10.1109/TCSS.2019.2924650","2020","In just a few years, ransomware evolved into one of the most pernicious threats on the web. From hijacking private disks, the cybercriminals moved to disabling hospital networks, while the cyberwarriors launched destructive cyberwar exercises masquerading as ransomware. To match the variety of attacks, there is also a variety of promising proposals for the mitigation of the ransomware problem by disrupting the attack cycle at various points. None of them seems to be eliminating the vulnerability of static nodes in dynamic networks. We put forward the idea that ransomware is a symptom of a broader problem of architectural imbalance in social computation, while the processes are dynamic and nonlocal, the storage is static and local. We study and discuss some paths toward dynamic, nonlocal, and secure storage. Furthermore, we provide a toy method for locally encrypting the data that can provide a balance of high security and encryption speed.  © 2014 IEEE.","Castiglione J.; Pavlovic D.","5"
"Domain","Code Signing Domain","Feature Extraction Approach to Unearth Domain Generating Algorithms (DGAs)","10.1109/DASC-PICom-CBDCom-CyberSciTech49142.2020.00077","2020","Domain name plays a crucial role today, a technique was developed to algorithmically generate do-main names (AGD) with the idea to solve the problem of designing domain names manually. Attackers deploy highly sophisticated tactics to compromise end-user systems to gain control as a target for malware to spread, as they are immune to static prevention methods like blacklisting and sinkholing. There have been multiple attempts to prevent them using lexical feature analysis, domain query responses, and some of these techniques have been really efficient as well. In this paper we propose a framework to detect Domain Generating Algorithms (DGAs) even in real network traffic, using features studied from legitimate domain names in static and real traffic, by considering feature extraction as the key of the framework we propose. The detection process consists of detection, prediction and classification attaining a maximum accuracy of 99%. © 2020 IEEE.","Upadhyay S.; Ghorbani A.","6"
"Domain","Anti-Forensics Techniques","BERTDeep-Ware: A Cross-architecture Malware Detection Solution for IoT Systems","10.1109/TrustCom53373.2021.00130","2021","Malware is widely regarded as one of the most severe security threats to modern technologies. Detecting malware in the Internet of Things (IoT) infrastructures is a critical and complicated task. The complexity of this task increases with the recent growth of malware variants targeting different IoT CPU architectures since the new malware variants often use anti-forensic techniques to avoid detection and investigation. There-fore, we cannot utilize the traditional machine learning (ML) techniques that require domain knowledge and sophisticated feature engineering in detecting the unseen mal ware variants. Re-cent deep learning approaches have performed well on mal ware analysis and detection while using minimum feature engineering requirements. In this paper, we propose BERTDeep- Ware, a real-time cross-architecture malware detection solution tailored for IoT systems. BERTDeep- Ware analyzes the executable file's operation codes (OpCodes) sequence representations using Bidi-rectional Encoder Representations from Transformers (BERT) Embedding, the state-of-the-art natural language processing (NLP) approach. The extracted sentence embedding from BERT is fed into a customized hybrid multi-head CNN-BiLSTM-LocAtt model. This deep learning (DL) model combines the convolutional neural network (CNN), bidirectional long short-term memory (BiLSTM), and the local attention mechanisms (locAtt) to capture conual features and long-term dependencies between OpCode sequences. We train and evaluate BERTDeep- Ware using the datasets created for three different CPU architectures. The performance evaluation results confirm that the proposed multi-head CNN-BiLSTM-LocAtt model produces more accurate classification results with higher detection rates and lower false positives than a number of baseline ML and DL models.  © 2021 IEEE.","Hamad S.A.; Tran D.H.; Sheng Q.Z.; Zhang W.E.","10"
"Domain","Machine Learning Applications","A panoramic view of cyber attack detection and prevention using machine learning and deep learning approaches","10.1201/9781003119838-4","2021","A set of code or a software designed in such a way to cause damage to a computer, server, mobile phones, or computer network is known as malware. Malicious software is a malware that exploits the cyber world and causes huge losses. Cyber attacks are increasing day by day and have become a great threat to the digital world. A recent survey says that there will be a malware (Ransomware) attack every 11 seconds by 2021 and by that time, global costs will be around $20 billion yearly. And also, every year, Ransomware generates an estimated $1 billion in revenue for cybercriminals. Various types of malware may cause serious threats to the digital world. Largely, malware is identified using signatures of the previously attacked malware even when the attackers try to create new malware that doesn’t fall under this signature. In such a scenario, it is necessary to develop a malware detection and a prevention system. The existing machine learning applications to provide solutions to problems of cyber security had a substantial impact and hence, it’s critical to explore the novel deep learning approaches toward protecting the information in the field of cyber security. The deep learning approaches are currently used in a widespread manner for cyber security applications. This chapter aims to review the deep learning architectures suitable for malware detection and prevention for cyber security applications. The categories of malware based on the functionality and attack patterns are termed virus, Trojan, backdoor, adware, botnet, root kit, and dropper. This chapter’s objective is to understand the working of malware and to detect and eliminate it using machine learning and deep learning approaches. The classification of malware analysis falls under categories such as static analysis, dynamic analysis, code analysis, and memory analysis. Detection of malware based on windows operating system, Android Operating system, and Ransomware is studied and its future direction is analyzed. To prevent this type of malware, traditional Machine Learning (ML)-based classification algorithms such a Support Vector Machine (SVM), Random Forest (RF), Naive Bayes (NB), Decision Tree (DT), Logistic regression (LR), and AdaBoost can be used to efficiently detect the malware. Feature extraction is an important feature that requires prior knowledge of the application and hence neural network-based machine learning techniques are utilized that improves the performance of the classifiers used. These soft computing techniques can be utilized when the features are known in advance and these features are not changed frequently so that the classifications can be more accurate. But when the features cannot be predicted due to insufficient domain knowledge and also the data are too large to analyze, then the deep learning approaches become critical. As the initial level of deep learning architecture Multilayer perceptron (MLP), the neural network can be incorporated when the features for an application are known and can be categorized for analysis. The time-series data utilize long short-term memory (LSTM) and Gated Recurrent Unit (GRU) for improved classification accuracy. © 2022 Taylor & Francis Group, LLC.","Daniel E.; Susila N.; Durga S.","2"
"Domain","Version Control","Impact of Running Dynamic/Static Scans on the Performance of an App Running in a GKE Clusters","10.1109/IDSTA53674.2021.9660814","2021","The IT world we live in today, are prone to ransomware attacks or hijacking of applications due to vulnerability and stealing vital data has become a norm, so to say our IT resources are vulnerable. The scanning of the applications, data, the IT infrastructure which houses them is become paramount. Data and/or Applications stored/running in a dormant/active state in a GitHub repository, centralized version control system (CVCS), or whether it is running as a service such as Website, Representational State Transfer (REST) [1], having an API Gateway accessing the critical data [2]., etc are more vulnerable to attacks than before. Modern techniques of a CI/CD process where data is pulled, compiled and brings the application/data alive has to be continuously monitored and checked for vulnerabilities without compromising the responsiveness of the application. This study is an effort to show that the static/dynamic scanning of applications/data in both dormant/running state of an application does not affect the performance of the application or access of critical data using the REST/Web Service Definition Language, or WUSDL (Web Services Description Language). In this study, the applications/data were deployed in a GKE (Google Cloud Kubernetes environment ) and were scanned using an industry-standard scanning tool viz Prisma Compute®. The performance of the application/data access using REST and or WUSDL was computed using the TCP/IP handshake delta time. These delta time were statistically analyzed by using Test of Hypothesis/Analysis of variance (ANOVA) [3] and K-Means [4] to determine if the delta in TCP/IP 3-way handshake is significantly different when the application is in an idle state ( no user traffic being processed), and in a static/dynamic scan mode using the Prisma Compute® tool when the user traffic is introduced. Based on the tests conducted, we found that there is not a significant difference in running dynamic or static scans on the application or the data and its impact is not statistically significant to the performance. This paper presents the case study which details the application/data test setup in the GKE environment, tests ran, statistical analysis conducted on the data obtained and the preliminary results.  © 2021 IEEE.","Athamnah M.; Hussain M.F.; Hasan S.S.","3"
"Domain","Infrastructure as a Service","A dynamic malware detection in cloud platform","10.37622/IJDE/15.2.2020.243-258","2021","Cloud computing not only provides high availability on elastic resources, scalable, and cost-efficient. The platform is also widely used in information technology (IT) to support technology infrastructure and services. However, due to the complex environment and scalability of services, one of the highest security issues is malware attacks, where some of the antivirus scanner unable to detect metamorphic malware or encrypted malware where these kinds of malware able to bypass some traditional protection solution. This is why a high recognition rate and good precision detection are important to eliminate a high false-positive rate. Machine Learning (ML) classifiers are a critical role in artificial intelligent-system. However, machine learning will require to learn from the high amplitude of input data; classify then only able to generate a reliable model with a high detection rate. The objective of this work is to study and performs detection based on dynamic malware analysis and classification is through the WEKA classifier and Random Forest Jupyter Notebook. There are three classifiers chosen in this work, which are Random Forest, J-48, and Naive Bayes with 10-folds validation from the WEKA tool and another additional classifier from Random Forest - Jupyter Notebook to substantiate the accuracy. © Research India Publications","Fui N.L.Y.; Asmawi A.; Hussin M.","7"
"Domain","DevSecOps","International Conference on Evolving Technologies for Computing, Communication and Smart World, ETCCS 2020","","2021","The proceedings contain 40 papers. The special focus in this conference is on Evolving Technologies for Computing, Communication and Smart World. The topics include: Event-Triggered Share Price Prediction; a Review: Efficient Transportation—Future Aspects of IoV; Compact High Gain 28 GHz Concentric Circular Director Low-Cost Antenna for 5G Millimeter-Wave Communication; preface; toward Response-Type Identification for the Real Time; questionnaire-Based Prediction of Hypertension Using Machine Learning; nature-Inspired Computing Behaviour of Cellular Automata; a Survey on Transport Layer Protocols for Reliable and Secure Wireless Sensor Networks; A Lightweight Exchangeable Encryption Scheme for IoT Devices Based on Vigenere Cipher and MLS Keystream; improving Steepest Descent Method by Learning Rate Annealing and Momentum in Neural Network; fingerprint and Face-Based Secure Biometric Authentication System Using Optimized Robust Features; DevOps, DevSecOps, AIOPS- Paradigms to IT Operations; Optimized Route Discovery and Node Registration for FANET; 4.1 GHz Low-Phase Noise Differential XCP LC-VCO with High Q and LC Noise Filtering; secured Surveillance Storage Model Using Blockchain; automatic Leaf Species Recognition Using Deep Neural Network; information Retrieval in Financial Documents; VNF Security in Telco Environment; Rank-Level Fusion of Random Indexing, Word Embedding, and TF-IDF-Based Rankings for Clinical Document Retrieval; a Novel Feature Engineering Approach for Twitter-Based Text Sentiment Analysis; Survey on DDoS and EDoS Attack in Cloud Environment; preprocessing Steps for Opinion Mining on Tweets; machine Learning-Based Lightweight Android Malware Detection System with Static Features; area and Power Efficient 2 Bit Multiplier by Using Enhanced Half Adder; the Modified Algorithm of Quantum Key Distribution System Synchronization; breast Cancer Classification Using Transfer Learning.","","0"
"Domain","Database Security","Implementing Enterprise Cybersecurity With Open-Source Software and Standard Architecture","","2021","Many small and medium scale businesses cannot afford to procure expensive cybersecurity tools. In many cases, even after procurement, lack of a workforce with knowledge of the standard architecture of enterprise security, tools are often used ineffectively. The Editors have developed multiple projects which can help in developing cybersecurity solution architectures and the use of the right tools from the open-source software domain. This book has 8 chapters describing these projects in detail with recipes on how to use open-source tooling to obtain standard cyber defense and the ability to do self-penetration testing and vulnerability assessment. This book also demonstrates work related to malware analysis using machine learning and implementation of honeypots, network Intrusion Detection Systems in a security operation center environment. It is essential reading for cybersecurity professionals and advanced students. © 2021 River Publishers.","Handa A.; Negi R.; Shukla S.K.","2"
"Domain","Supply Chain Attack Domain","Towards Measuring Supply Chain Attacks on Package Managers for Interpreted Languages","10.14722/ndss.2021.23055","2021","Package managers have become a vital part of the modern software development process. They allow developers to reuse third-party code, share their own code, minimize their codebase, and simplify the build process. However, recent reports showed that package managers have been abused by attackers to distribute malware, posing significant security risks to developers and end-users. For example, eslint-scope, a package with millions of weekly downloads in Npm, was compromised to steal credentials from developers. To understand the security gaps and the misplaced trust that make recent supply chain attacks possible, we propose a comparative framework to qualitatively assess the functional and security features of package managers for interpreted languages. Based on qualitative assessment, we apply well-known program analysis techniques such as metadata, static, and dynamic analysis to study registry abuse. Our initial efforts found 339 new malicious packages that we reported to the registries for removal. The package manager maintainers confirmed 278 (82%) from the 339 reported packages where three of them had more than 100, 000 downloads. For these packages we were issued official CVE numbers to help expedite the removal of these packages from infected victims. We outline the challenges of tailoring program analysis tools to interpreted languages and release our pipeline as a reference point for the community to build on and help in securing the software supply chain. © 2021 28th Annual Network and Distributed System Security Symposium, NDSS 2021. All Rights Reserved.","Duan R.; Alrawi O.; Kasturi R.P.; Elder R.; Saltaformaggio B.; Lee W.","61"
"Domain","POS Terminal Malware","Android Malware Detection via Behavior-Based Features","10.1007/978-981-15-5887-0_13","2021","With the rapid development of Android smartphones and the widespread use of mobile Internet as well as the open-source Android system, the mobile terminal malware has been widely spread and became popular. In order to detect malware and prevent the interests of mobile phone users from being infringed, this paper performs a malware detection via both the static and dynamic features generated by a user’s operator behavior, software behavior, and malicious behavior. © 2021, The Editor(s) (if applicable) and The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd.","Li Y.; Liu Y.","0"
"Domain","Container Security","Implementing a Method for Docker Image Security; [Docker Görüntü Güvenli?ine Yönelik Bir Yöntem Uygulamas]","10.1109/ISCTURKEY53027.2021.9654383","2021","Containers that can be easily created, transported and scaled with the use of container-based virtualization technologies work better than classical virtualization technologies and provide efficient resource usage. The Docker platform is one of the most widely used solutions among container-based virtualization technologies. The OS-level virtualization of the Docker platform and the container's use of the host operating system kernel may cause security problems. In this study, a method including static and dynamic analysis has been proposed to ensure Docker image and container security. In the static analysis phase of the method, the packages of the images are scanned for vulnerabilities and malware. In the dynamic analysis phase, Docker containers are run for a certain period of time, after the open port scanning, network traffic is analyzed with the Snort3. Seven Docker images are analyzed and the results are shared.  © 2021 IEEE.","Sengul O.; Ozkilicaslan H.; Arda E.; Yavanoglu U.; Dogru I.A.; Selcuk A.A.","7"
"Domain","Threat Hunting Methodologies","Efficient Threat Hunting Methodology for Analyzing Malicious Binaries in Windows Platform","10.1007/978-3-030-76352-7_54","2021","The rising cyber threat puts organizations and ordinary users at risk of data breaches. In many cases, Early detection can hinder the occurrence of these incidents or even prevent a full compromise of all internal systems. The existing security controls such as firewalls and intrusion prevention systems are constantly blocking numerous intrusions attempts that happen on a daily basis. However, new situations may arise where these security controls are not sufficient to provide full protection. There is a necessity to establish a threat hunting methodology that can assist investigators and members of the incident response team to analyse malicious binaries quickly and efficiently. The methodology proposed in this research is able to distinguish malicious binaries from benign binaries using a quick and efficient way. The proposed methodology consists of static and dynamic hunting techniques. Using these hunting techniques, the proposed methodology is not only capable of identifying a range of signature-based anomalies but also to pinpoint behavioural anomalies that arise in the operating system when malicious binaries are triggered. Static hunting can describe any extracted artifacts as malicious depending on a set of pre-defined patterns of malicious software. Dynamic hunting can assist investigators in finding behavioural anomalies. This work focuses on applying the proposed threat hunting methodology on samples of malicious binaries, which can be found in common malware repositories and presenting the results. © 2021, Springer Nature Switzerland AG.","Elmisery A.M.; Sertovic M.; Qasem M.","0"
"Domain","Cryptominer Detection","MineDetector: JavaScript Browser-side Cryptomining Detection using Static Methods","10.1109/CSE53436.2021.00022","2021","Because of the rise of the Monroe coin, many JavaScript files with embedded malicious code are used to mine cryptocurrency using the computing power of the browser client. This kind of script does not have any obvious behaviors when it is running, so it is difficult for common users to witness them easily. This feature could lead the browser side cryptocurrency mining abused without the user's permission. Traditional browser security strategies focus on information disclosure and malicious code execution, but not suitable for such scenes. Thus, we present a novel detection method named MineDetector using a machine learning algorithm and static features for automatically detecting browser-side cryptojacking scripts on the websites. MineDetector extracts five static feature groups available from the abstract syntax tree and text of codes and combines them using the machine learning method to build a powerful cryptojacking classifier. In the real experiment, MineDetector achieves the accuracy of 99.41% and the recall of 93.55% and has better performance in time comparing with present dynamic methods. We also made our work user-friendly by developing a browser extension that is click-to-run on the Chrome browser.  © 2021 IEEE.","Wang P.; Sun Y.; Huang C.; Du Y.; Liang G.; Long G.","2"
"Domain","Resource Allocation","17th International Conference on Hybrid Artificial Intelligence Systems, HAIS 2022","","2022","The proceedings contain 43 papers. The special focus in this conference is on Hybrid Artificial Intelligence Systems. The topics include: A New Game Theoretic Based Random Forest for Binary Classification; concept Drift Detection to Improve Time Series Forecasting of Wind Energy Generation; a Decision Support Tool for the Static Allocation of Emergency Vehicles to Stations; adapting K-Means Algorithm for Pair-Wise Constrained Clustering of Imbalanced Data Streams; small Wind Turbine Power Forecasting Using Long Short-Term Memory Networks for Energy Management Systems; CORE-BCD-mAI: A Composite Framework for Representing, Querying, and Analyzing Big Clinical Data by Means of Multidimensional AI Tools; generalized Fisher Kernel with Bregman Divergence; A HAIS Approach to Predict the Energy Produced by a Solar Panel; companion Losses for Ordinal Regression; smartwatch Sleep-Tracking Services Precision Evaluation Using Supervised Domain Adaptation; convex Multi-Task Learning with Neural Networks; Smash: A Compression Benchmark with AI Datasets from Remote GPU Virtualization Systems; Time Series Forecasting Using Artificial Neural Networks: A Model for the IBEX 35 Index; a Fine-Grained Study of Interpretability of Convolutional Neural Networks for Text Classification; olive Phenology Forecasting Using Information Fusion-Based Imbalanced Preprocessing and Automated Deep Learning; architecture for Fault Detection in Sandwich Panel Production Using Visual Analytics; deep Reinforcement Learning-Based Resource Allocation for mm-Wave Dense 5G Networks; evolutionary Triplet Network of Learning Disentangled Malware Space for Malware Classification; a Two-Level Hybrid Based Genetic Algorithm to Solve the Clustered Shortest-Path Tree Problem Using the Prüfer Code; new Hybrid Methodology Based on Particle Swarm Optimization with Genetic Algorithms to Improve the Search of Parsimonious Models in High-Dimensional Databases; tracking and Classification of Features in the Bio-Inspired Layered Networks; Evolving Dynamic Route Generators for Open-Ended ARPs; SHAP Algorithm for Healthcare Data Classification; assessment of Creditworthiness Models Privacy-Preserving Training with Synthetic Data.","","0"
"Domain","Information Sharing","MULBER: Effective Android Malware Clustering Using Evolutionary Feature Selection and Mahalanobis Distance Metric","10.3390/sym14102221","2022","Symmetric and asymmetric patterns are fascinating phenomena that show a level of co-existence in mobile application behavior analyses. For example, static phenomena, such as information sharing through collaboration with known apps, is a good example of a symmetric model of communication, and app collusion, where apps collaborate dynamically with unknown malware apps, is an example of a serious threat with an asymmetric pattern. The symmetric nature of app collaboration can become vulnerable when a vulnerability called PendingIntent is exchanged during Inter-Component Communication (ICC). The PendingIntent (PI) vulnerability enables a flexible software model, where the PendingIntent creator app can temporarily share its own permissions and identity with the PendingIntent receiving app. The PendingIntent vulnerability does not require approval from the device user or Android OS to share the permissions and identity with other apps. This is called a PI leak, which can lead to malware attacks such as privilege escalation and component hijacking attacks. This vulnerability in the symmetric behavior of an application without validating an app’s privileges dynamically leads to the asymmetric phenomena that can damage the robustness of an entire system. In this paper, we propose MULBER, a lightweight machine learning method for the detection of Android malware communications that enables a cybersecurity system to analyze multiple patterns and learn from them to help prevent similar attacks and respond to changing behavior. MULBER can help cybersecurity teams to be more proactive in preventing dynamic PI-based communication threats and responding to active attacks in real time. MULBER performs a static binary analysis on the APK file and gathers approximately 10,755 features, reducing it to 42 key features by grouping the permissions under the above-mentioned four categories. Finally, MULBER learns from these multivariate features using evolutionary feature selection and the Mahalanobis distance metric and classifies them as either benign or malware apps. In an evaluation of 22,638 malware samples from recent Android APK malware databases such as Drebin and CICMalDroid-2020, MULBER outperformed others by clustering applications based on the Mahalanobis distance metric and detected 95.69% of malware with few false alarms and the explanations provided for each detection revealed the relevant properties of the detected malware. © 2022 by the authors.","Duraisamy Soundrapandian P.; Subbiah G.","1"
"Domain","Cyber Warfare","HELO DarkSide: Breaking Free from Katas and Embracing the Adversarial Mindset in Cybersecurity Education","10.1145/3478431.3499404","2022","The pedagogy of cybersecurity education presents an exciting challenge. Although cyber-warfare has existed for nearly four decades, we fail to adequately model the chaos of offensive cyber attacks in the classroom. Instead, coursework focuses on studying choreographed cyber-attack patterns. In this paper, we present an undergraduate cybersecurity course design that balances theoretical learning with an emphasis on exploring offensive tactics, techniques, and procedures. Labs consist of writing payloads and channels to evade detection, cobbling together operating system internals to achieve attack functionality, and developing survivable post-exploitation tools. In the exams, students develop malware capable of avoiding static and dynamic analysis and identify the strategic and tactical flaws that lead to the discovery of highly successful attack campaigns. We believe that sharing this experience will prove valuable for instructors who wish to explore offensive cyber tactics in the classroom.  © 2022 ACM.","Oconnor T.J.","10"
"Domain","Endpoint Security","PROUD-MAL: static analysis-based progressive framework for deep unsupervised malware classification of windows portable executable","10.1007/s40747-021-00560-1","2022","Enterprises are striving to remain protected against malware-based cyber-attacks on their infrastructure, facilities, networks and systems. Static analysis is an effective approach to detect the malware, i.e., malicious Portable Executable (PE). It performs an in-depth analysis of PE files without executing, which is highly useful to minimize the risk of malicious PE contaminating the system. Yet, instant detection using static analysis has become very difficult due to the exponential rise in volume and variety of malware. The compelling need of early stage detection of malware-based attacks significantly motivates research inclination towards automated malware detection. The recent machine learning aided malware detection approaches using static analysis are mostly supervised. Supervised malware detection using static analysis requires manual labelling and human feedback; therefore, it is less effective in rapidly evolutionary and dynamic threat space. To this end, we propose a progressive deep unsupervised framework with feature attention block for static analysis-based malware detection (PROUD-MAL). The framework is based on cascading blocks of unsupervised clustering and features attention-based deep neural network. The proposed deep neural network embedded with feature attention block is trained on the pseudo labels. To evaluate the proposed unsupervised framework, we collected a real-time malware dataset by deploying low and high interaction honeypots on an enterprise organizational network. Moreover, endpoint security solution is also deployed on an enterprise organizational network to collect malware samples. After post processing and cleaning, the novel dataset consists of 15,457 PE samples comprising 8775 malicious and 6681 benign ones. The proposed PROUD-MAL framework achieved an accuracy of more than 98.09% with better quantitative performance in standard evaluation parameters on collected dataset and outperformed other conventional machine learning algorithms. The implementation and dataset are available at https://bit.ly/35Sne3a. © 2021, The Author(s).","Rizvi S.K.J.; Aslam W.; Shahzad M.; Saleem S.; Fraz M.M.","32"
"Domain","Peer Review","RETRACTED ARTICLE: Detection of malware on the internet of things and its applications depends on long short-term memory network(Journal of Ambient Intelligence and Humanized Computing, (2021), 13, (1), (1-12), 10.1007/s12652-020-02823-0)","10.1007/s12652-020-02823-0","2022","The Editor-in-Chief and the publisher have retracted this article. The article was submitted to be part of a guest-edited issue. An investigation by the publisher found a number of articles, including this one, with a number of concerns, including but not limited to compromised editorial handling and peer review process, inappropriate or irrelevant references or not being in scope of the journal or guest-edited issue. Based on the investigation’s findings the Editor-in- Chief therefore no longer has confidence in the results and conclusions of this article.Author Varun Gupta disagrees with this retraction. The other authors have not responded to correspondence regardingthis retraction. The online version of this article contains the full text of the retracted article as Supplementary Information. © The Author(s), under exclusive licence to Springer-Verlag GmbH, DE part of Springer Nature 2021.","Priyadarsini K.; Mishra N.; Prasad M.; Gupta V.; Khasim S.","0"
"Domain","Ransomware Encryption","A New Scheme for Ransomware Classification and Clustering Using Static Features","10.3390/electronics11203307","2022","Ransomware is a strain of malware that disables access to the user’s resources after infiltrating a victim’s system. Ransomware is one of the most dangerous malware organizations face by blocking data access or publishing private data over the internet. The major challenge of any entity is how to decrypt the files encrypted by ransomware. Ransomware’s binary analysis can provide a means to characterize the relationships between different features used by ransomware families to track the ransomware encryption mechanism routine. In this paper, we compare the different ransomware detection approaches and techniques. We investigate the criteria, parameters, and tools used in the ransomware detection ecosystem. We present the main recommendations and best practices for ransomware mitigation. In addition, we propose an efficient ransomware indexing system that provides search functionalities, similarity checking, sample classification, and clustering. The new system scheme mainly targets native ransomware binaries, and the indexing engine depends on hybrid data from the static analyzer system. Our scheme tracks and classifies ransomware based on static features to find the similarity between different ransomware samples. This is done by calculating the absolute Jaccard index. Results have shown that Import Address Table (IAT) feature can be used to classify different ransomware more accurately than the Strings feature. © 2022 by the authors.","Yamany B.; Elsayed M.S.; Jurcut A.D.; Abdelbaki N.; Azer M.A.","19"
"Domain","Return on Investment","Malware Attacks: Dimensions, Impact, and Defenses","10.1007/978-3-030-90708-2_9","2022","Malware is a top threat to the current digital world. It will be more devastating in coming years due to the expansion of information technology in various fields of life, engagement of different type of users, and increased technical sophistication in malware. The changing motivations, multi-resource investment in malware development and Return on Investment (RoI) are the main reasons for the exponential growth in malware. Businesses and users are losing millions of dollars due to various malware attacks. Although there are different Anti-malware solutions and other security software, malware attacks are successful due to inherent limitations of these security products and common security vulnerabilities such as“zero-day”, “buffer-overflow”, etc. This book chapter provides a detailed study about malware, its propagation and attack mechanisms and discusses various anti-malware techniques (machine learning, bio-inspired algorithms etc.). It also presents possible research directions for developing tools and techniques for better protection against malware. © 2022, The Author(s), under exclusive license to Springer Nature Switzerland AG.","Kumar A.; Choi B.J.; Kuppusamy K.S.; Aghila G.","3"
"Domain","Performance Measurement","AASH: A Lightweight and Efficient Static IoT Malware Detection Technique at Source Code Level","10.1109/ACCC58361.2022.00010","2022","IoT malware applications significantly threaten user privacy and security. Traditionally, IoT developers have focused primarily on hardware, but connectivity requires additional embedded software, usually developed by third-party developers. Unfortunately, third-party code is not always secure and trustworthy, and it frequently contains bugs and malicious code, which leaves IoT devices vulnerable. We propose the AASH technique (IoT Malware Detection) a novel technique that can detect malware at the source code level using the Adler-32 hash function and Fibonacci search. Previously, DROIDMD technique and SQVDT technique have been proposed to detect malware on Android and Linux devices. According to the authors, their schemes are scalable and can be deployed on IoT devices. However, their technique suffers from lower accuracy and takes longer to detect malicious code. The performance measurement shows that our proposed AASH technique is comparatively better than DROIDMD and SQVDT techniques in terms of accuracy and malware detection. AASH is reliable, efficient, and can be deployed on a large-scale level. © 2022 IEEE.","Glani Y.; Ping L.; Shah S.A.","5"
"Domain","Aerospace Security","MateGraph: Toward Mobile Malware Detection Through Traffic Behavior Graph","10.1109/HPCC-DSS-SmartCity-DependSys57074.2022.00132","2022","As the number of interconnected mobile devices increases exponentially, mobile malware poses a severe threat to cyberspace security. Existing techniques utilize network traffic analysis effectively to identify and detect mobile malware. The majority of these solutions concentrate on the statistical features of malicious traffic or the information of key fields in the packet, but fail to take advantage of rich communication patterns throughout the entire network. In this paper, we present MateGraph, a traffic behavior graph-based approach to detect and classify mobile malware. The key insight of our research is that the communication patterns of a mobile application can be modeled as several traffic behavior graphs in Non-Euclidean space, and thus we can differentiate between malicious and benign applications by using graph convolution network models to learn graph topologies and representations. In MateGraph, we first construct a traffic behavior graph from a given chunk of network traffic within a time window, where a node of the graph is defined by a tuple of destination IP and port while an edge is established by the static and dynamic correlation between the nodes. Next, we present an enhanced graph convolution network for discovering the diverse pattern representations of benign and malicious traffic behavior graphs and achieving high detection performance and efficiency. We have conducted experiments on a publicly available dataset to evaluate MateGraph against several state-of-the-art methods, and the experimental results show that MateGraph has a better performance, the F1 score of which reached 96.57% and the accuracy increased by more than 7%.  © 2022 IEEE.","Ge R.; Zhang Y.; Si C.; Zhou G.; Zhou W.","3"
"Domain","Firmware Security Domain","Inter-IP Malicious Modification Detection through Static Information Flow Tracking","10.23919/DATE54114.2022.9774694","2022","To help expand the usage of formal methods in the hardware security domain. We propose a static register-transfer level (RTL) security analysis framework and an electronic design automation (EDA) tool named If-Tracker to support the proposed framework. Through this framework, a data-flow model will be automatically extracted from the RTL description of the SoC. Information flow security properties will then be generated. The tool checks all possible inter-IP paths to verify whether any property violations exist. The effectiveness of the proposed framework is demonstrated on customized SoC designs using AMBA bus where malicious modifications are inserted across multiple IPs. Existing IP level security analysis tools cannot detect such Trojans. Compared to commercial formal tools such as Cadence JasperGold and Synopsys VC-Formal, our framework provides a much simpler user interface and can identify more types of malicious modifications. © 2022 EDAA.","Liu Z.; Arias O.; Fu W.; Jin Y.; Guo X.","5"
"Domain","MITRE ATT&CK Framework","Real Time Multistage Attack Detection Leveraging Machine Learning and MITRE Framework","10.1109/SMART55829.2022.10047248","2022","Organizations regardless of their size are rapidly transforming, adopting and embracing digitalization amid the COVID pandemic. The pandemic forced organizations to ratio- nalize offline operations and swift towards online operations. Many organizations have digitized their services and have witnessed increasing Multistage cyber-attacks. Further, a lot of organizations have enabled remote access to the enterprise resources and services. As a result, organizations are striving to defend against Multistage cyber-attacks. These multistage attacks often spread across many stages, which is best described by MITRE Adversarial Tactics, Techniques, and Common Knowl- edge (ATT&CK) Framework. There are many research efforts for static detection of malicious binaries but very few or limited research targeting run-time detection of malicious processes in the system. Detection of these malicious processes are key for identifying new variants of multistage attacks or malware in the real world. This paper proposes a system for detecting multistage attacks in real-time or run-time by leveraging Machine learning and MITRE ATT&CK Framework. Machine learning facilitates detecting the malicious process in the system, and the MITRE ATT&CK framework offers insight into adversary techniques. Combination of these two is very effective in detecting multistage attacks and identifying individual stages. The proposed system shows promising results when tested on real-time/latest malware. Test result shows that our system can achieve 95.83% of accuracy. This paper discusses the challenges in detection of runtime malware, dataset generation © 2022 IEEE.","Takey Y.S.; Tatikayala S.G.; Patil M.U.; Lakshmi Eswari P.R.; Samavedam S.S.","2"
"Domain","Software Supply Chain Domain","Research on Software Supply Chain Poisoning Attack Detection Scheme Based on Deep Learning","10.1145/3652628.3652768","2023","As the modern software development process continues to evolve, the significance of the software supply chain has grown substantially. Developers often utilize third-party software packages in the development phase to enhance efficiency, improve software quality and extend functionality. However, the rising prevalence of software supply chain poisoning attacks against third-party software packages has become a serious security threat. In response to this challenge, we propose a comprehensive detection solution based on deep learning and traditional methods. The approach employs both metadata analysis and static analysis techniques, combining a model for detecting typo-squatting attacks with a static detection model. This integration enables real-time detection of malicious packages in third-party software repositories. We further collect a substantial number of malicious package samples and implements a prototype system, demonstrating the effectiveness and efficiency of the proposed solution. © 2023 ACM.","Tang K.; Fan S.","0"
"Domain","Cryptocurrency Wallet","An Empirical Analysis of Security and Privacy Risks in Android Cryptocurrency Wallet Apps","10.1007/978-3-031-33491-7_26","2023","A cryptocurrency wallet app is a piece of software that manages, stores, and generates private keys of cryptocurrency accounts. With the provision of services such as easy access to transaction history, and checking account balance besides transmissions of new transactions in distributed networks such as Blockchains, cryptocurrency wallet apps gain unprecedented popularity which in turn attracts malicious actors to attack users resulting in loss of cryptocurrency assets and leakage of sensitive user data. This paper presents the first large-scale study of Android cryptocurrency wallet apps. We surveyed apps on Google Play to detect and extract meta-data and application packages of 457 cryptocurrency wallet apps. We perform several passive and active measurements designed to investigate the security and privacy features to study the behavior of cryptocurrency wallet apps. Our analysis includes investigating cryptocurrency wallet apps’ third-party embedding, malware presences, and exfiltration of users’ sensitive data to third-parties. Our study reveals vulnerabilities and privacy issues in cryptocurrency apps including the insecure use of HTTP to serve transactions. © 2023, The Author(s), under exclusive license to Springer Nature Switzerland AG.","Sentana I.W.B.; Ikram M.; Kaafar M.A.","4"
"Domain","Resource Efficiency","A Neural Network Approach to a Grayscale Image-Based Multi-File Type Malware Detection System","10.3390/app132312888","2023","This study introduces an innovative all-in-one malware identification model that significantly enhances convenience and resource efficiency in classifying malware across diverse file types. Traditional malware identification methods involve the extraction of static and dynamic features, followed by comparisons with signature-based databases or machine learning-based classifiers. However, many malware detection applications that rely on transfer learning and image transformation suffer from excessive resource consumption. In recent years, transfer learning has emerged as a powerful tool for developing effective classifiers, leveraging pre-trained neural network models. In this research, we comprehensively explore various pre-trained network architectures, including compact and conventional networks, as well as series and directed acyclic graph configurations for malware classification. Our approach utilizes grayscale transform-based features as a standardized set of characteristics, streamlining malware classification across various file types. To ensure the robustness and generalization of our classification models, we integrate multiple datasets into the training process. Remarkably, we achieve an optimal model with 96% accuracy, while maintaining a modest 5 MB size using the SqueezeNet classifier. Overall, our model efficiently classifies malware across file types, reducing the computational load, which can be useful for cybersecurity professionals and organizations. © 2023 by the authors.","Copiaco A.; El Neel L.; Nazzal T.; Mukhtar H.; Obaid W.","3"
"Domain","Vulnerability Management","Theoretical Study of Security for a Software Product","10.1007/978-981-19-7660-5_20","2023","In the beginning, some of the most fundamental aspects of security, like confidentiality, integrity, and availability are presented. Then, the attacker’s key motivators are mentioned. In the following parts, the focus is on the ways of designing and developing a secure software product. So, from a design point of view, the secure software development life cycle and how a security management process should take place are described in multiple phases starting from security threat and risk analysis phase to security testing phase and malware scanning. To keep track of vulnerabilities that might appear in the future, especially for 3rd party products, a security vulnerability management process should be used. Finally, some of the most common vulnerabilities and ways to assure secure code are presented in the secure development chapter. Making source code security analysis by using static/dynamic/interactive application security testing tools with manual code reviews is some important factors in assuring secure software development. © 2023, The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd.","Stanciu A.-M.","3"
"Domain","Professional Certification","Implementing enterprise cyber security with open-source software and standard architecture","","2023","Cyber security is one of the most critical problems faced by enterprises, government organizations, education institutes, small and medium scale businesses, and medical institutions today. Creating a cyber security posture through proper cyber security architecture, deployment of cyber defense tools, and building a security operation center are critical for all such organizations given the preponderance of cyber threats. However, cyber defense tools are expensive, and many small and medium-scale business houses cannot procure these tools within their budgets. Even those business houses that manage to procure them cannot use them effectively because of the lack of human resources and the knowledge of the standard enterprise security architecture. In 2020, the C3i Center at the Indian Institute of Technology Kanpur developed a professional certification course where IT professionals from various organizations go through rigorous six-month long training in cyber defense. During their training, groups within the cohort collaborate on team projects to develop cybersecurity solutions for problems such as malware analysis, threat intelligence collection, endpoint detection and protection, network intrusion detection, developing security incidents, event management systems, etc. All these projects leverage open-source tools, and code from various sources, and hence can be also constructed by others if the recipe to construct such tools is known. It is therefore beneficial if we put these recipes out in the form of book chapters such that small and medium scale businesses can create these tools based on open-source components, easily following the content of the chapters. In 2021, we published the first volume of this series based on the projects done by cohort 1 of the course. This volume, second in the series has new recipes and tool development expertise based on the projects done by cohort 3 of this training program. This volume consists of nine chapters that describe experience and know-how of projects in malware analysis, web application security, intrusion detection system, and honeypot in sufficient detail so they can be recreated by anyone looking to develop home grown solutions to defend themselves from cyber-attacks. © 2023 River Publishers. All rights reserved.","Handa A.; Negi R.; Venkatesan S.; Shukla S.K.","0"
"Domain","Fileless Malware Static","Fileless malware threats: Recent advances, analysis approach through memory forensics and research challenges","10.1016/j.eswa.2022.119133","2023","The rapid advancements in cyber-attack strategies are in parallel with the measures for detection, analysis, and prevention. Attackers have recently developed fileless malware that can simply bypass existing security mechanisms. Researchers publish reports to help discover fileless malware and to better understand the threatʼs scope to counteract it. However, with the lack of studies on fileless malware regarding the classification and the scale of the threat, they have not been thoroughly analyzed. As a result, in this research, we explored the most recent advancements in fileless malware prevention and detection and highlighted future research challenges. We also propose an analytical approach based on the attack strategies and attributes of the selected sample. Our method simplifies feature extraction and reduces processing load. Furthermore, compared to the static analysis we do not need for decompression and unpacking for the analysis. We applied the proposed method on a real case example. It has been seen that information about fileless malware detection, working mechanism, attack method and attacker named “Kovter” can be accessed. Our approach is advantageous and can be applied as a new technique for fileless malware detection to protect systems from cyber threats. This paper also presents an insight to the fileless malware threat and provides a basic review of the methods and techniques used in the detection and analysis of fileless malware attacks. © 2022 Elsevier Ltd","Kara I.","46"
"Domain","Neuromorphic Computing","A Brain-inspired Approach for Malware Detection using Sub-semantic Hardware Features","10.1145/3583781.3590293","2023","Despite significant efforts to enhance the resilience of computer systems against malware attacks, the abundance of exploitable vulnerabilities remains a significant challenge. While preventing compromises is difficult, traditional signature-based static analysis techniques are susceptible to bypassing through metamorphic/polymorphic malware or zero-day exploits. Dynamic detection techniques, particularly those utilizing machine learning (ML), have the potential to identify previously unseen signatures by monitoring program behavior. However, classical ML models are power and resource intensive and may not be suitable for devices with limited budgets. This constraint creates a challenging tradeoff between security and resource utilization, which cannot be fully addressed through model compression and pruning. In contrast, neuromorphic architectures offer a promising solution for low-power brain-inspired systems. In this work, we explore the novel use of neuromorphic architectures for malware detection. We accomplish this by encoding sub-semantic micro-architecture level features in the spiking domain and proposing a Spiking Neural Network (SNN) architecture for hardware-aware malware detection. Our results demonstrate promising malware detection performance with an 89% F1-score. Ultimately, this work advocates that neuromorphic architectures, due to their low power consumption, represent a promising candidate for malware detection, especially for energy-constraint processors in IoT and Edge devices.  © 2023 Owner/Author.","Parsa M.; Khasawneh K.N.; Alouani I.","0"
"Domain","High Performance Computing","DockerWatch: a two-phase hybrid detection of malware using various static features in container cloud","10.1007/s00500-022-07546-2","2023","As an emerging virtualization technology, the Linux container provides a more lightweight, flexible, and high-performance operating-system-level virtual run-time environment. Its appearance has profoundly changed the development and deployment of multi-tier distributed applications. However, the imperfect system resource isolation features and the kernel-sharing mechanism will introduce significant security risks to the cloud platform. In this paper, we present DockerWatch, a real-time detection system for malware detection in the container-based cloud platform. DockerWatch uses a non-intrusive manner to extract executable files inside the containers, then uses the ensemble of various static features and behavior-based graphs as the analysis vector to learn the robust representations of malicious patterns. Consequently, a two-phase hybrid detection method based on deep learning is proposed to accelerate and enhance the detection performance, aiming to address the trade-off between fast and high-performance real-time detection. Extensive experiments are conducted and compared with extensive existing related methods using real-world datasets to validate the effectiveness of our system. The results show that DockerWatch achieves excellent detection performance with acceptable run-time performance overhead introduced into the platform. © 2022, The Author(s), under exclusive licence to Springer-Verlag GmbH Germany, part of Springer Nature.","Wang Y.; Wang Q.; Qin X.; Chen X.; Xin B.; Yang R.","7"
"Domain","Change Management","Analysis and Categorization of Emotet IoT Botnet Malware","10.1109/AISC56616.2023.10085302","2023","To provide the ease control and remote monitoring, Internet of Things (IoT) plays an important role in smart devices. The IoT system ranges from smart city to healthcare sector, and supply chain management. This extent of advancement generated a huge amount of data which may be the reason of malware threats of the IoT system. IoT Malware is a threat which may affects all sectors such as business, network, telecoms, media, military, etc. The recent report claimed the proliferation of global cost of malware estimated that till 2023 it would be around 8 trillion dollars annually which may double due to coronavirus outbreak. The analysis of IoT malware needs serious concern as now warfare and digital retaliation can cause serious damage than the war lead on ground. The major aim of this paper is performing the critical analysis of an IoT malware named Emotet. The IoT malware analysis can be categorized in two types such as static and dynamic malware analysis. Static analysis is the process of analyzing malware or binary without executing it. It is considered a more effective method when it comes to the diversity of processor architecture. While dynamic analysis is based on the detection of malware and its behavior with real-time execution. This paper focused on the testbed and Analysis of Emotet malware statically and dynamically using distinguished malware analysis tools.  © 2023 IEEE.","Garg U.; Kumar S.; Ghanshala M.","1"
"Domain","Continuous Integration","Reflections on Trusting Docker: Invisible Malware in Continuous Integration Systems","","2023","Continuous integration (CI) is a widely adopted methodology for supporting software development. It provides automated generation of artifacts (e.g., binaries, container images) which are then deployed in production. However, to which extent should you trust the generated artifacts even if the source code is clean of malicious code? Revisiting the famous compiler backdoor from Ken Thompson, we show that a container-based CI system can be compromised without leaving any trace in the source code. Therefore, detecting such malware is challenging or even impossible with common practices such as peer review or static code analysis. We detail multiple ways to do the initial infection process. Then, we show how to persist during CI system updates, allowing long-term compromise. We detail possible malicious attack payloads such as sensitive data extraction or backdooring production software. We show that infected CI systems can be remotely controlled using covert channels to update attack payload or adapt malware to mitigation strategies. Finally, we propose a proof of concept implementation tested on GitLab CI and applicable to major CI providers. © 2023 17th IEEE Workshop on Offensive Technologies, WOOT 2023, co-located with IEEE S and P 2023. All Rights Reserved.","Moriconi F.; Neergaard A.I.; Georget L.; Aubertin S.; Francillon A.","2"
"Domain","Authentication Systems","Results of Experimental Research on Phase Data of Processed Signals in Voice Authentication Systems","10.1007/978-3-031-35467-0_40","2023","The number of cybercrimes in infocommunications area is growing, and they are becoming more sophisticated. According to the Cisco 2018 Annual Cybersecurity Report, spreading malicious software (in particular, ransomware), the volume of encrypted web traffic transmitted by cybercriminals, and the number of e-mail threats have increased. To protect financial and information resources pin codes, passwords, identification cards are used; however, they can be lost or counterfeited. Biometric authentication is now a solution these problems. Initially, static biometric features (fingerprints, face shape and size, iris and retina patterns) were mostly used, especially in forensic science. Due to simple forgery and limited amount of analyzed data in access systems, preference is given to behavioral biometric features, especially to the user voice signal. Voice systems are preferred by the efficiency/cost criterion. Moreover, voice systems have additional advantages: simplicity, ease of use, complexity of counterfeiting, remote use through communication channels, unlimited operational increase in password phrases, and the availability of digital data processing achievements. Unfortunately, the qualitative characteristics of voice authentication systems yield to systems which use static biometric features because the formation of a user's template is based on amplitude and frequency information. One of the directions for improving the quality indicators of voice authentication systems, according to the authors, is to use phase information of registration materials, which has not been sufficiently considered in the scientific literature. The object of research is the process of digital processing of speech signals in voice authentication systems. Research methods include analysis, observation, measurement, modeling and experiment. The paper considers the procedures for the formation and direction of voice signal phase data use in authentication systems. The feasibility of phase data use, which allows to improve qualitative indicators of the considered systems, is essentially proved on the example of processing experimental voice signals. © 2023, The Author(s), under exclusive license to Springer Nature Switzerland AG.","Pastushenko M.; Krasnozheniuk Y.","0"
"Domain","Anonymization Techniques","DOLOS: A Novel Architecture for Moving Target Defense","10.1109/TIFS.2023.3318964","2023","Moving Target Defense and Cyber Deception emerged in recent years as two key proactive cyber defense approaches, contrasting with the static nature of the traditional reactive cyber defense. The key insight behind these approaches is to impose an asymmetric disadvantage for the attacker by using deception and randomization techniques to create a dynamic attack surface. Moving Target Defense (MTD) typically relies on system randomization and diversification, while Cyber Deception is based on decoy nodes and fake systems to deceive attackers. However, current Moving Target Defense techniques are complex to manage and can introduce high overheads, while Cyber Deception nodes are easily recognized and avoided by adversaries. This paper presents DOLOS, a novel architecture that unifies Cyber Deception and Moving Target Defense approaches. DOLOS is motivated by the insight that deceptive techniques are much more powerful when integrated into production systems rather than deployed alongside them. DOLOS combines typical Moving Target Defense techniques, such as randomization, diversity, and redundancy, with cyber deception and seamlessly integrates them into production systems through multiple layers of isolation. We extensively evaluate DOLOS against a wide range of attackers, ranging from automated malware to professional penetration testers, and show that DOLOS is effective in slowing down attacks and protecting the integrity of production systems. We also provide valuable insights and considerations for the future development of MTD techniques based on our findings. © 2005-2012 IEEE.","Pagnotta G.; De Gaspari F.; Hitaj D.; Andreolini M.; Colajanni M.; Mancini L.V.","12"
"Domain","Open Source Intelligence","A Study on the Measuring Methods of Website Security Risk Rate","10.3390/app14010042","2024","Traditionally, website security risks are measured using static analysis based on patterns and dynamic analysis by accessing websites with user devices. Recently, similarity hash-based website security risk analysis and machine learning-based website security risk analysis methods have been proposed. In this study, we propose a technique to measure website risk by collecting public information on the Internet. Publicly available DNS information, IP information, and website reputation information were used to measure security risk. Website reputation information includes global traffic rankings, malware distribution history, and HTTP access status. In this study, we collected public information on a total of 2000 websites, including 1000 legitimate domains and 1000 malicious domains, to assess their security risk. We evaluated 11 categories of public information collected by the Korea Internet & Security Agency, an international domain registrar. Through this study, public information about websites can be collected and used to measure website security risk. © 2023 by the author.","Lee Y.-J.","0"
"Domain","Cost Optimization","African Vulture Optimization-Based Decision Tree (AVO-DT): An Innovative Method for Malware Identification and Evaluation through the Application of Meta-Heuristic Optimization Algorithm","10.2478/cait-2024-0020","2024","Malware remains a big threat to cyber security, calling for machine learning-based malware detection. Malware variations exhibit common behavioral patterns indicative of their source and intended use to enhance the existing framework's usefulness. Here we present a novel model, i.e., African Vulture Optimization-based Decision Tree (AVO-DT) to increase the overall optimization. The datasets from Android apps and malware software train the AVO-DT model. After training, the datasets are pre-processed by removing training errors. The DT algorithm is used by the developed AVO model to carry out the detection procedure and predict malware activity. To detect malware activities and improve accuracy, such an AVO-DT model technique employs both static and dynamic methodologies. The other measurements on Android applications might be either malicious or benign. Here we also developed malware prevention and detection systems to address ambiguous search spaces in multidimensionality difficulties and resolve optimization challenges.  © 2024 Praveen Kumar Kaithal et al., published by Sciendo.","Kaithal P.K.; Sharma V.","3"
"Domain","Training and Education","PEVuln: A Benchmark Dataset for Using Machine Learning to Detect Vulnerabilities in PE Malware","","2024","In this paper, we present a benchmark dataset for training and evaluating static PE malware machine learning models, specifically for detecting known vulnerabilities in malware. Our goal is to enable further research in defense against malware by exploiting their bugs or weaknesses. After recognising limitations in current malware datasets regarding exploitable malware, our dataset addresses these gaps by utilizing the malware vulnerability database Malvuln, and software vulnerability database ExploitDB to create a new malware dataset with 684 vulnerable malware samples, 35, 241 non-vulnerable malware samples, 1, 425 vulnerable benign samples, and 7, 905 non-vulnerable benign samples, detailed with timestamps, families, threat mapping, vulnerability mapping, and obfuscation analysis. This 4-class dataset lays the foundation for advancing future research in analysis and vulnerability exploitation in malware using machine learning. We also provide baseline results using state-of-the-art models for malware classification to benchmark the performance of the dataset, where the binary tasks achieve F1 scores above 0.90, while the multi-class task attains an F1-Score of 0.958. © 2024 Copyright for this paper by its authors.","Ross N.; Olukoya O.; del Rincón J.M.; Carlin D.","0"
"Domain","Executable Packing Domain","Extended Abstract: Evading Packing Detection: Breaking Heuristic-Based Static Detectors","10.1007/978-3-031-64171-8_9","2024","Nowadays, executable packing remains an open issue in its detection especially when it comes to static analysis. Packing is significantly used in malware to hide malicious code from detection systems. These last years, many studies about static packing detection addressed this problem with heuristics and machine learning, considering different ad hoc techniques, algorithms and feature sets but very few addressed it from the adversarial point of view, that is, how to fool heuristics by altering samples with targeted modifications. The objective of this work is to study to what extent it is easy to evade detection by open source static detectors that are commonly used by the community by applying alterations on packed samples, which require only slight adaptations of the related packers, resulting in evasion. An adversarial setting from the problem-space perspective is addressed by using realistic modifications of binary samples that target common significant features. For this purpose, alterations and datasets are composed and static detection is applied using the experimental toolkit Packing Box. Results of alterations are shown, in terms of information gain of features and accuracy of detection, on open source static packing detectors. Finally, their significant effects are highlighted and their effectiveness is evaluated. © The Author(s), under exclusive license to Springer Nature Switzerland AG 2024.","D’Hondt A.; Bertrand Van Ouytsel C.H.; Legay A.","0"
"Domain","Secure Coding Practices","Secure Coding Practices for Web Applications: Addressing Cyber Threats and Safeguarding User Data - A Comprehensive Review","10.1109/ICCED64257.2024.10983330","2024","Web applications provide an efficient approach to delivering a wide range of services over the Internet. However, the growing number of Internet users, web applications, and valuable user data has led to a significant increase in global cyber threats. This poses significant challenges for organizations seeking to protect their data across the globe. This review paper delves into secure coding practices designed for web applications, with a particular focus on SQL Injection (SQLIA) attacks and Cross Site Scripting (XSS) vulnerabilities within ASP.NET environments. Through a comprehensive review of existing methodologies and techniques, we examine advanced detection and prevention mechanisms, including dynamic analysis, crafted statements, input validation, and coding practices. Our unique contribution is a proposed multi-layered defense approach that combines these methodologies specifically for ASP.NET applications, improving their effectiveness against SQLIA and XSS attacks. Additionally, we discuss the implementation of the AMNESIA technique, which leverages static and dynamic analysis to neutralize vulnerabilities in real-time. By highlighting both foundational practices and recent advancements, this paper aims to provide the developers and security professionals with actionable insights to enhance the resilience of ASP.NET web applications against prevalent cyber threats.  © 2024 IEEE.","Sarrar A.; Yusef Sa'ad H.H.; Al-Ashmoery Y.; Saad A.-M.H.Y.; Yusef Sa'd A.H.; Alwesabi K.","0"
"Domain","Runtime Library Detection","Identifying runtime libraries in statically linked linux binaries","10.1016/j.future.2024.107602","2025","Vulnerabilities in unpatched applications can originate from third-party dependencies in statically linked applications, as they must be relinked each time to take advantage of libraries that have been updated to fix any vulnerability. Despite this, malware binaries are often statically linked to ensure they run on target platforms and to complicate malware analysis. In this sense, identification of libraries in malware analysis becomes crucial to help filter out those library functions and focus on malware function analysis. In this paper, we introduce MANTILLA, a system for identifying runtime libraries in statically linked Linux-based binaries. Our system is based on radare2 to identify functions and extract their features (independent of the underlying architecture of the binary) through static binary analysis and on the K-nearest neighbors supervised machine learning model and a majority rule to predict final values. MANTILLA is evaluated on a dataset consisting of binaries built for different architectures (MIPSeb, ARMel, Intel x86, and Intel x86-64) and different runtime libraries (uClibc, glibc, and musl), achieving very high accuracy. We also evaluate it in two case studies. First, using a dataset of binary files belonging to the binutils collection and second, using an IoT malware dataset. In both cases, good accuracy results are obtained both in terms of runtime library detection (94.4% and 95.5%, respectively) and architecture identification (100% and 98.6%, respectively). © 2024 The Authors","Carrillo-Mondéjar J.; Rodríguez R.J.","1"
"Domain","Supply Chain Security","PypiGuard: A novel meta-learning approach for enhanced malicious package detection in PyPI through static-dynamic feature fusion","10.1016/j.jisa.2025.104032","2025","The increasing reliance on open-source software repositories, especially the Python Package Index (PyPi), has introduced serious security vulnerabilities as malicious actors embed malware into widely adopted packages, threatening the integrity of the software supply chain. Traditional detection methods, often based on static analysis, struggle to capture the complex and obfuscated behaviors characteristic of modern malware. Addressing these limitations, we present PypiGuard, an advanced hybrid ensemble meta-model for malicious package detection that integrates both static metadata and dynamic Application Programming Interface (API) call behaviors, enhancing detection accuracy and reducing error rates. Leveraging the MalwareBench dataset, our approach utilizes an innovative preprocessing pipeline that fuses metadata features with categorized API behaviors. The PypiGuard model employs a hybrid ensemble structure composed of Random Forest (RF), Gradient Boosting (GB), Decision Tree (DT), K-Nearest Neighbors (KNN), LightGBM, and an Artificial Neural Network (ANN), assembled through dynamically optimized stacking-based meta-learning framework that adapts to model-specific prediction strengths. Compared to Deep Learning (DL) baselines like Long-Short Term Memory (LSTM) and Convolutional Neural Network (CNN), PypiGuard achieves significant improvements in accuracy and False Positive Rate (FPR), with a detection accuracy of 98.43% and a markedly low FPR, confirming its enhanced effectiveness in accurately identifying malicious packages. © 2025 Elsevier Ltd","Iqbal T.; Wu G.; Iqbal Z.; Mahmood M.B.; Shafique A.; Guo W.","0"
"Domain","Quality Metrics","A fast hardware Trojan detection method with parallel clustering for large-scale gate-level netlists","10.1016/j.cose.2025.104570","2025","The growing complexity of hardware design makes third-party intellectual property (3PIP) a superior option. However, it poses security threats to the integrated circuit (IC) supply chain. An untrusted 3PIP may have been implanted with hardware Trojans (HTs), which are malicious modifications to ICs. To ensure the security of ICs, state-of-the-art HT detection techniques related to testability metrics have been recently researched. Nevertheless, the computation of testability values and clustering analysis may be time-consuming for large-scale gate-level netlists (GLNs). To address this issue, we propose a fast HT detection method based on a previously proposed modularity algorithm, incorporating parallel clustering for large-scale GLNs. D-flip-flops are utilized as the boundaries to divide the GLN into modules. Then, we use a self-designed tool to simultaneously compute testability values and static transition probabilities for each signal in each module. If the minimum static transition probability of signals within a module falls below a predefined threshold, the module is suspected to contain HTs and necessitates clustering analysis. Otherwise, it is considered safe and excluded from further analysis. Suspicious modules are then clustered in parallel to identify potential HT signals. Lastly, a secondary diagnosis is performed to minimize false positives in the clustering analysis results. For samples with up to approximately 105 signals from Trust-hub, the detection time is reduced by up to 60 % compared to our previous work, achieving a detection accuracy of 100 %, a signal diagnosis accuracy exceeding 93 %, and a false positive rate below 1 %. © 2025 Elsevier Ltd","Pan G.; Li H.; Wang J.","0"
"Domain","NFT Smart Contract","ScamDetect: Towards a Robust, Agnostic Framework to Uncover Threats in Smart Contracts","10.1109/DSN-S65789.2025.00068","2025","Smart contracts have transformed decentralized finance by enabling programmable, trustless transactions. However, their widespread adoption and growing financial significance have attracted persistent and sophisticated threats, such as phishing campaigns and contract-level exploits. Traditional transaction-based threat detection methods often expose sensitive user data and interactions, raising privacy and security concerns. In response, static bytecode analysis has emerged as a proactive mitigation strategy, identifying malicious contracts before they execute harmful actions.Building on this approach, we introduced PhishingHook, the first machine-learning-based framework for detecting phishing activities in smart contracts via static bytecode and opcode analysis, achieving approximately 90% detection accuracy. Nevertheless, two pressing challenges remain: (1) the increasing use of sophisticated bytecode obfuscation techniques designed to evade static analysis, and (2) the heterogeneity of blockchain environments requiring platform-agnostic solutions.This paper presents a vision for ScamDetect (Smart Contract Agnostic Malware Detector), a robust, modular, and platform-agnostic framework for smart contract malware detection. Over the next 2.5 years, ScamDetect will evolve in two stages: first, by tackling obfuscated Ethereum Virtual Machine (EVM) bytecode through graph neural network (GNN) analysis of control flow graphs (CFGs), leveraging GNNs' ability to capture complex structural patterns beyond opcode sequences; and second, by generalizing detection capabilities to emerging runtimes such as WASM. ScamDetect aims to enable proactive, scalable security for the future of decentralized ecosystems.  © 2025 IEEE.","De Rosa P.; Felber P.; Schiavoni V.","0"
"Domain","Security Awareness Training","The Importance of Malware Awareness for Aspiring Cyber Professionals: Applicability of Gamification Static Analysis Tools","10.1109/TE.2024.3471336","2025","Modern day organizations face a continuous challenge in ensuring that their employees are cognizant with malware and cyber attacks, since it has the potential to cause financial, legal, and reputational damage to them. Current awareness training exists in a multitude of forms to equip employees and organizations to protect themselves against malware and cyber attacks. This article proposes a more realistic and interactive approach to malware training through a simulated ransomware infection presented as a game, both for employees and students in cyber security domain. The proposed mechanism was tested by individuals within cyber industries and students and demonstrated at events within the South West of England to an audience of prospective employees and industry experts, who found the training beneficial and insightful into how malware can be avoided and identified. Overall, results from the development of the tool indicate that the ability to identify malicious files increased in the range of 12%-55%, with respondents generally agreeing the tool was useful for increasing learning capacity. External results from unstructured interviews appear to illustrate that individuals displayed a heightened awareness post-training. External surveys with undergraduate students studying cyber and computer science indicate 100% of students believe the training would be useful for some form of training, with 86% evaluating the training would be suitable for both unsupervised and supervised malware training. Language analysis revealed highly positive vocabulary in free-text questions from multiple year groups, most highly in second and third year cyber security cohorts. © 1963-2012 IEEE.","Cameron A.; Alam A.; Khurana M.; Allison J.; Anjum N.","0"
"Domain","Critical Infrastructure Protection","Multi-Task Learning Model for Mobile Threat Detection and Cyber Resilience in Urban Systems","10.1007/978-981-96-8197-6_6","2025","The rapid expansion of Android devices in urban environments has led to an increase in sophisticated cyber threats, including zero-day malware, which pose risks to public safety and critical infrastructure. Traditional signature-based detection methods are often ineffective against these evolving threats. This paper presents a multi-task learning (MTL) framework designed to enhance Android malware detection and classification, contributing to the resilience of urban digital ecosystems. The model simultaneously performs binary classification (malware detection) and multi-class classification (malware family identification), using shared representations to improve efficiency and accuracy compared to single-task learning (STL) models. The framework is trained and evaluated on the CCCS-CIC-AndMal-2020 dataset, utilizing API-based static features of Android applications. Feature dimensionality is reduced through Principal Component Analysis (PCA), and class imbalance is addressed with a weighted loss function. Hyperparameter tuning with Optuna further optimizes configurations, including layer sizes, learning rate, and task-specific weights. Experimental results demonstrate that the MTL framework outperforms STL models, offering a promising approach for strengthening cybersecurity. Future work will explore real-time deployment and dynamic analysis to enhance urban resilience against emerging cyber threats. © The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2025.","Ibrahim S.; Catal C.; Kacem T.","0"
"Domain","Real-Time Processing","Optimizing Malware Detection and Classification in Real-Time Using Hybrid Deep Learning Approaches","10.18280/ijsse.150115","2025","Malware detection and classification are critical for ensuring system security in real-time applications. Conventional approaches may not be optimized to combine precise results with low time consumption and become a problem when it comes to processing large volumes of different malware samples in a real-time setting. The general framework for this paper is to introduce a new detection and classification method that uses deep learning (DL) models to detect and classify malware. We developed and tested two models: the static convolutional neural network-long short-term memory (CNN-LSTM) model and the dynamic CNN 1D-LSTM model in this work. The models achieved an accurate rate of 99%. Static-CNN-LSTM was able to classify the malware based on static analysis. At the same time, the proposed dynamic (1D-CNN-LSTM) model got the best results, with a 100% success rate, by gathering behavioral data. This means that it can accurately classify even new and complicated dynamic malicious program variants. Therefore, this study's results show that using a hybrid approach raises the rate of detection while also meeting the real-time processing needs of systems with a lot at stake that need to perform well. Our approach represents a substantial improvement in malware detection, delivering a more efficient and versatile response to contemporary cyber threats. ©2025 The authors.","Alsumaidaee Y.A.M.; Yahya M.M.; Yaseen A.H.","1"
"Technique","Abstract Interpretation","Analysing approximate confinement under uniform attacks","10.1007/3-540-45789-5_23","2002","We are concerned to give certain guarantees about the security of a system. We identify two kinds of attack: the internally scheduled attack (exemplified by Trojan Horse attacks) and externally scheduled attacks (exemplified by timing attacks). In this paper we focus on the latter. We present a semantic framework for studying such attacks in the context of PCCP, a simple process algebra with a constraint store. We show that a measure of the efficacy of an attacker can be determined by considering its observable behaviour over the “average” store of the system (for some number of steps). We show how to construct an analysis to determine the average store using the technique of probabilistic abstract interpretation. © Springer-Verlag Berlin Heidelberg 2002.","Di Pierro A.; Hankin C.; Wiklicky H.","8"
"Technique","Dynamic Analysis","ISSTA 2004 - Proceedings of the ACM SIGSOFT International Symposium on Software Testing and Analysis","","2004","The proceedings contain 28 papers from ISSTA 2004 - Proceedings of the ACM SIGSOFT International Symposium on Software Testing and Analysis. The topics discussed include: static and dynamic analysis of call chains in Java; testing malware detectors; an experimental evaluation of continuous testing during development; evolutionary testing of classes; automated black-box testing of functional correctness using function approximation; modeling and verification of an air traffic concept of operations; improving the adaptability of multi-mode systems via program steering; faster constraint solving with subtypes; and a formal approach for modeling and verification of RTCORBA-based applications.","","0"
"Technique","Deobfuscation","Static Analyzer of Vicious Executables (SAVE)","10.1109/CSAC.2004.37","2004","Software security assurance and malware (trojans, worms, and viruses, etc.) detection are important topics of information security. Software obfuscation, a general technique that is useful for protecting software from reverse engineering, can also be used by hackers to circumvent the malware detection tools. Current static malware detection techniques have serious limitations, and sandbox testing also fails to provide a complete solution due to time constraints. In this paper, we present a robust signature-based malware detection technique, with emphasis on detecting obfuscated (or polymorphic) malware and mutated (or metamorphic) malware. The hypothesis is that all versions of the same malware share a common core signature that is a combination of several features of the code. After a particular malware has been first identified, it can be analyzed to extract the signature, which provides a basis for detecting variants and mutants of the same malware in the future. Encouraging experimental results on a large set of recent malware are presented. © 2004 IEEE.","Sung A.H.; Xu J.; Chavez P.; Mukkamala S.","188"
"Technique","Reverse Engineering","Static Analyzer of Vicious Executables (SAVE)","10.1109/CSAC.2004.37","2004","Software security assurance and malware (trojans, worms, and viruses, etc.) detection are important topics of information security. Software obfuscation, a general technique that is useful for protecting software from reverse engineering, can also be used by hackers to circumvent the malware detection tools. Current static malware detection techniques have serious limitations, and sandbox testing also fails to provide a complete solution due to time constraints. In this paper, we present a robust signature-based malware detection technique, with emphasis on detecting obfuscated (or polymorphic) malware and mutated (or metamorphic) malware. The hypothesis is that all versions of the same malware share a common core signature that is a combination of several features of the code. After a particular malware has been first identified, it can be analyzed to extract the signature, which provides a basis for detecting variants and mutants of the same malware in the future. Encouraging experimental results on a large set of recent malware are presented. © 2004 IEEE.","Sung A.H.; Xu J.; Chavez P.; Mukkamala S.","188"
"Technique","Disassembly","Disassembled code analyzer for malware (DCAM)","10.1109/IRI-05.2005.1506506","2005","Current static malware detection techniques have serious limitations. Little modifications can result in a new strand of malware that escapes. In this paper, we present a static detection technique using disassembly of a malware emphasizing the recognition of variants of a malware in its signature set. The hypothesis is that all variants share a common core signature that is a combination of several features of the code. In addition to malware, spyware and adware are also analyzed to find the similar features. A previously identified malware can be analyzed to extract the signature, which will then be used to recognize its variants. Since this technique uses disassembled code, it can be used on any operating system. Encouraging experimental results on a set of malware are presented. Since the existence of spyware and adware is increasing, an analysis on how this technique can be extended to detect spyware is also presented. © 2005 IEEE.","Sulaiman A.; Ramamoorthy K.; Mukkamala S.; Sung A.H.","10"
"Technique","BERT for Malware","Disassembled code analyzer for malware (DCAM)","10.1109/IRI-05.2005.1506506","2005","Current static malware detection techniques have serious limitations. Little modifications can result in a new strand of malware that escapes. In this paper, we present a static detection technique using disassembly of a malware emphasizing the recognition of variants of a malware in its signature set. The hypothesis is that all variants share a common core signature that is a combination of several features of the code. In addition to malware, spyware and adware are also analyzed to find the similar features. A previously identified malware can be analyzed to extract the signature, which will then be used to recognize its variants. Since this technique uses disassembled code, it can be used on any operating system. Encouraging experimental results on a set of malware are presented. Since the existence of spyware and adware is increasing, an analysis on how this technique can be extended to detect spyware is also presented. © 2005 IEEE.","Sulaiman A.; Ramamoorthy K.; Mukkamala S.; Sung A.H.","10"
"Technique","Static Analysis","Dynamic analysis of malicious code","10.1007/s11416-006-0012-2","2006","Malware analysis is the process of determining the purpose and functionality of a given malware sample (such as a virus, worm, or Trojan horse). This process is a necessary step to be able to develop effective detection techniques for malicious code. In addition, it is an important prerequisite for the development of removal tools that can thoroughly delete malware from an infected machine. Traditionally, malware analysis has been a manual process that is tedious and time-intensive. Unfortunately, the number of samples that need to be analyzed by security vendors on a daily basis is constantly increasing. This clearly reveals the need for tools that automate and simplify parts of the analysis process. In this paper, we present TTAnalyze, a tool for dynamically analyzing the behavior of Windows executables. To this end, the binary is run in an emulated operating system environment and its (security-relevant) actions are monitored. In particular, we record the Windows native system calls and Windows API functions that the program invokes. One important feature of our system is that it does not modify the program that it executes (e.g., through API call hooking or breakpoints), making it more difficult to detect by malicious code. Also, our tool runs binaries in an unmodified Windows environment, which leads to excellent emulation accuracy. These factors make TTAnalyze an ideal tool for quickly understanding the behavior of an unknown malware. © Springer-Verlag France 2006.","Bayer U.; Moser A.; Kruegel C.; Kirda E.","252"
"Technique","IRC Analysis","Dynamic analysis of malicious code","10.1007/s11416-006-0012-2","2006","Malware analysis is the process of determining the purpose and functionality of a given malware sample (such as a virus, worm, or Trojan horse). This process is a necessary step to be able to develop effective detection techniques for malicious code. In addition, it is an important prerequisite for the development of removal tools that can thoroughly delete malware from an infected machine. Traditionally, malware analysis has been a manual process that is tedious and time-intensive. Unfortunately, the number of samples that need to be analyzed by security vendors on a daily basis is constantly increasing. This clearly reveals the need for tools that automate and simplify parts of the analysis process. In this paper, we present TTAnalyze, a tool for dynamically analyzing the behavior of Windows executables. To this end, the binary is run in an emulated operating system environment and its (security-relevant) actions are monitored. In particular, we record the Windows native system calls and Windows API functions that the program invokes. One important feature of our system is that it does not modify the program that it executes (e.g., through API call hooking or breakpoints), making it more difficult to detect by malicious code. Also, our tool runs binaries in an unmodified Windows environment, which leads to excellent emulation accuracy. These factors make TTAnalyze an ideal tool for quickly understanding the behavior of an unknown malware. © Springer-Verlag France 2006.","Bayer U.; Moser A.; Kruegel C.; Kirda E.","252"
"Technique","Stack Analysis","Behavior-based spyware detection","","2006","Spyware is rapidly becoming a major security issue. Spyware programs are surreptitiously installed on a user’s workstation to monitor his/her actions and gather private information about a user’s behavior. Current anti-spyware tools operate in a way similar to traditional anti-virus tools, where signatures associated with known spyware programs are checked against newly-installed applications. Unfortunately, these techniques are very easy to evade by using simple obfuscation transformations. This paper presents a novel technique for spyware detection that is based on the characterization of spyware-like behavior. The technique is tailored to a popular class of spyware applications that use Internet Explorer’s Browser Helper Object (BHO) and toolbar interfaces to monitor a user’s browsing behavior. Our technique uses a composition of static and dynamic analysis to determine whether the behavior of BHOs and toolbars in response to simulated browser events should be considered malicious. The evaluation of our technique on a representative set of spyware samples shows that it is possible to reliably identify malicious components using an abstract behavioral characterization. © 2006 USENIX Association. All rights reserved.","Kirda E.; Kruegel C.; Banks G.; Vigna G.; Kemmerer R.A.","179"
"Technique","Adware Analysis","Dynamic analysis of malicious code","10.1007/s11416-006-0012-2","2006","Malware analysis is the process of determining the purpose and functionality of a given malware sample (such as a virus, worm, or Trojan horse). This process is a necessary step to be able to develop effective detection techniques for malicious code. In addition, it is an important prerequisite for the development of removal tools that can thoroughly delete malware from an infected machine. Traditionally, malware analysis has been a manual process that is tedious and time-intensive. Unfortunately, the number of samples that need to be analyzed by security vendors on a daily basis is constantly increasing. This clearly reveals the need for tools that automate and simplify parts of the analysis process. In this paper, we present TTAnalyze, a tool for dynamically analyzing the behavior of Windows executables. To this end, the binary is run in an emulated operating system environment and its (security-relevant) actions are monitored. In particular, we record the Windows native system calls and Windows API functions that the program invokes. One important feature of our system is that it does not modify the program that it executes (e.g., through API call hooking or breakpoints), making it more difficult to detect by malicious code. Also, our tool runs binaries in an unmodified Windows environment, which leads to excellent emulation accuracy. These factors make TTAnalyze an ideal tool for quickly understanding the behavior of an unknown malware. © Springer-Verlag France 2006.","Bayer U.; Moser A.; Kruegel C.; Kirda E.","252"
"Technique","Worm Analysis","Dynamic analysis of malicious code","10.1007/s11416-006-0012-2","2006","Malware analysis is the process of determining the purpose and functionality of a given malware sample (such as a virus, worm, or Trojan horse). This process is a necessary step to be able to develop effective detection techniques for malicious code. In addition, it is an important prerequisite for the development of removal tools that can thoroughly delete malware from an infected machine. Traditionally, malware analysis has been a manual process that is tedious and time-intensive. Unfortunately, the number of samples that need to be analyzed by security vendors on a daily basis is constantly increasing. This clearly reveals the need for tools that automate and simplify parts of the analysis process. In this paper, we present TTAnalyze, a tool for dynamically analyzing the behavior of Windows executables. To this end, the binary is run in an emulated operating system environment and its (security-relevant) actions are monitored. In particular, we record the Windows native system calls and Windows API functions that the program invokes. One important feature of our system is that it does not modify the program that it executes (e.g., through API call hooking or breakpoints), making it more difficult to detect by malicious code. Also, our tool runs binaries in an unmodified Windows environment, which leads to excellent emulation accuracy. These factors make TTAnalyze an ideal tool for quickly understanding the behavior of an unknown malware. © Springer-Verlag France 2006.","Bayer U.; Moser A.; Kruegel C.; Kirda E.","252"
"Technique","Unpacking","PolyUnpack: Automating the hidden-code extraction of unpack-executing malware","10.1109/ACSAC.2006.38","2006","Modern malware often hide the malicious portion of their program code by making it appear as data at complle-time and transforming it back into executable code at runtime. This obfuscation technique poses obstacles to researchers who want to understand the malicious behavior of new or unknown malware and to practitioners who want to create models of detection and methods of recovery. In this paper we propose a technique for automating the process of extracting the hidden-code bodies of this class of malware. Our approach is based on the observation that sequences of packed or hidden code in a malware instance can be made self-identifying when its runtime execution is checked against its static code model. In deriving our technique, we formally define the unpack-executing behavior that such malware exhibits and devise an algorithm for identifying and extracting its hidden-code. We also provide details of the implementation and evaluation of our extraction technique; the results from our experiments on several thousand malware binaries show our approach can be used to significantly reduce the time required to analyze such malware, and to improve the performance of malware detection tools. © 2006 IEEE.","Royal P.; Halpin M.; Dagon D.; Edmonds R.; Lee W.","229"
"Technique","Taint Analysis","Behavior-based spyware detection","","2006","Spyware is rapidly becoming a major security issue. Spyware programs are surreptitiously installed on a user’s workstation to monitor his/her actions and gather private information about a user’s behavior. Current anti-spyware tools operate in a way similar to traditional anti-virus tools, where signatures associated with known spyware programs are checked against newly-installed applications. Unfortunately, these techniques are very easy to evade by using simple obfuscation transformations. This paper presents a novel technique for spyware detection that is based on the characterization of spyware-like behavior. The technique is tailored to a popular class of spyware applications that use Internet Explorer’s Browser Helper Object (BHO) and toolbar interfaces to monitor a user’s browsing behavior. Our technique uses a composition of static and dynamic analysis to determine whether the behavior of BHOs and toolbars in response to simulated browser events should be considered malicious. The evaluation of our technique on a representative set of spyware samples shows that it is possible to reliably identify malicious components using an abstract behavioral characterization. © 2006 USENIX Association. All rights reserved.","Kirda E.; Kruegel C.; Banks G.; Vigna G.; Kemmerer R.A.","179"
"Technique","Opcode Analysis","Cobra: Fine-grained malware analysis using stealth localized-executions","10.1109/SP.2006.9","2006","Fine-grained code analysis in the context of malware is a complex and challenging task that provides insight into malware code-layers (polymorphic/mesomorphic), its data encryption/decryption engine, its memory layout etc., important pieces of information that can be used to detect and counter the malware and its variants. Current research in fine-grained code analysis can be categorized into static and dynamic approaches. Static approaches have been tailored towards malware and allow exhaustive fine-grained malicious code analysis, but lack support for self-modifying code, have limitations related to code-obfuscations and face the undecidability problem. Given that most if not all malware employ self-modifying code and code-obfuscations, poses the need to analyze them at runtime using dynamic approaches. However, current dynamic approaches for fine-grained code analysis are not tailored specifically towards malware and lack support for multithreading, self-modifying/self-checking code and are easily detected and countered by ever-evolving anti-analysis tricks employed by malware. To address this problem we propose a powerful dynamic fine-grained malicious code analysis framework, codenamed Cobra, to combat malware that are becoming increasingly hard to analyze. Our goal is to provide a stealth, efficient, portable and easy-to-use framework supporting multithreading, self-modifying/self-checking code and any form of code obfuscation in both user- and kernel-mode on commodity operating systems. Cobra cannot be detected or countered and can be dynamically and selectively deployed on malware specific code-streams while allowing other code-streams to execute as is. We also illustrate the framework utility by describing our experience with a tool employing Cobra to analyze a real-world malware. © 2006 IEEE.","Vasudevan A.; Yerraballi R.","76"
"Technique","N-gram Analysis","Detection of Intrusions and Malware and Vulnerability Assessment - Third International Conference, DIMVA 2006, Proceedings","","2006","The proceedings contain 11 papers. The topics discussed include: using type qualifiers to analyze untrusted integers and detecting security flaws in C programs; using static program analysis to aid intrusion detection; an SVM-based masquerade detection method with online update using co-occurrence matrix; network-level polymorphic shellcode detection using emulation; detecting unknown network attacks using language models; using labeling to prevent cross-service attacks against smart phones; using contextual security policies for threat response; detecting self-mutating malware using control-flow graph matching; digital forensic reconstruction and the virtual security testbed ViSe; a robust SNMP based infrastructure for intrusion detection and response in tactical MANETs; and a fast worm scan detection tool for VPN congestion avoidance.","","0"
"Technique","Multi-Agent Systems","Analysis of firewall performance variation to identify the limits of automated network reconfigurations","","2006","Security in computer networks is typically passive, static, and reactive. This is typically due to most networking devices being rule-based, and when updates are necessary, they are normally done manually. Ultimately, the social and hierarchical structure of an organisation should be visible within the configuration of networks. Hence, it is desirable for a distributed system to be capable of reconfiguring itself in a timely-manner to reflect changes in policy, in practices, and in the social hierarchy, such as the promotion of a member of staff, or in the face of a security threat, such as in malware propagation. This paper builds on the concept of an automated mitigation and reconfiguration system for networked devices, and evaluates key firewall system performance tests. These could be important in defining the criteria for the success of this type of security implementation. It thus defines a range of experiments, which evaluate firewall parameters, such as number of rules, and their position in relation to performance metrics, such as CPU utilisation, bandwidth consumption, and network latency. The paper also includes tests with up to 65,000 rules, and presents results on the positions of the rules, such as on the incoming and outgoing ports, and the effect of different network throughputs. It concludes that networks can be made more resilient, under heavy network loads and large rule sets, if rule sets are applied on the outgoing ports. It also shows evidence that configuration interfaces are the performance bottleneck for multi-agent systems that may use these to reconfigure network equipments dynamically.","Saliou L.; Buchanan W.; Graves J.; Munoz J.","1"
"Technique","API Hooking","Secure and advanced unpacking using computer emulation","10.1007/s11416-007-0046-0","2007","The purpose of this article is firstly to present a secure unpacker which is specifically designed for a security analyst when studying viruses but also any anti-virus scanner. Such a tool is in fact required when assessing security requirements of an anti-virus scanner through a black box approach. During testing of anti-virus software, a security analyst needs to build virus populations required for several penetration tests. Virus unpacking is a first mandatory step before gaining the ability to apply obfuscation transformation or any information extraction algorithm on a viral set. A secure unpacker is also useful when checking security robustness against reverse engineering of any packed or protected security product. Several static and dynamic analysis tools already implement unpacking algorithms, but these often require human intervention and are not well designed to automatically unpack such a dangerous program as a virus. A new algorithm for automatically unpacking encrypted viruses is presented in this paper. Forensics techniques to reconstruct an unpacked executable and advanced heuristics are also presented in order to decrypt more sophisticated self-protected Malwares. We present several detection techniques which are specifically designed to deceive virtual machine monitors and discuss the security of our tool against these low-level viral attacks. Our secure unpacker figures among a set of several tools. We then present in this paper a proof-of-concept human analysis framework which implements most standard components of an anti-virus scanner (real-time scanner, emulator engine) and in addition proposes a reliable system for automatically gaining information about a virus and its interaction with the OS executive (stealth native API hooking), but focuses on human decision as a detection process without the same resource limitation constraint as product oriented anti-virus scanners. This framework is used as a basis/reference for the comparative analysis of security aspects of anti-virus scanners and deals with the robustness of their driver stack and the efficiency of their de-obfuscation and unpacking algorithms. © 2007 Springer-Verlag France.","Josse S.","20"
"Technique","DLL Injection","Secure and advanced unpacking using computer emulation","10.1007/s11416-007-0046-0","2007","The purpose of this article is firstly to present a secure unpacker which is specifically designed for a security analyst when studying viruses but also any anti-virus scanner. Such a tool is in fact required when assessing security requirements of an anti-virus scanner through a black box approach. During testing of anti-virus software, a security analyst needs to build virus populations required for several penetration tests. Virus unpacking is a first mandatory step before gaining the ability to apply obfuscation transformation or any information extraction algorithm on a viral set. A secure unpacker is also useful when checking security robustness against reverse engineering of any packed or protected security product. Several static and dynamic analysis tools already implement unpacking algorithms, but these often require human intervention and are not well designed to automatically unpack such a dangerous program as a virus. A new algorithm for automatically unpacking encrypted viruses is presented in this paper. Forensics techniques to reconstruct an unpacked executable and advanced heuristics are also presented in order to decrypt more sophisticated self-protected Malwares. We present several detection techniques which are specifically designed to deceive virtual machine monitors and discuss the security of our tool against these low-level viral attacks. Our secure unpacker figures among a set of several tools. We then present in this paper a proof-of-concept human analysis framework which implements most standard components of an anti-virus scanner (real-time scanner, emulator engine) and in addition proposes a reliable system for automatically gaining information about a virus and its interaction with the OS executive (stealth native API hooking), but focuses on human decision as a detection process without the same resource limitation constraint as product oriented anti-virus scanners. This framework is used as a basis/reference for the comparative analysis of security aspects of anti-virus scanners and deals with the robustness of their driver stack and the efficiency of their de-obfuscation and unpacking algorithms. © 2007 Springer-Verlag France.","Josse S.","20"
"Technique","Signature-based Detection","OmniUnpack: Fast, generic, and safe unpacking of malware","10.1109/ACSAC.2007.15","2007","Malicious software (or malware) has become a growing threat as malware writers have learned that signature-based detectors can be easily evaded by ""packing"" the malicious payload in layers of compression or encryption. State-of-the-art malware detectors have adopted both static and dynamic techinques to recover the pay-load of packed malware, but unfortunately such techniques are highly ineffective. In this paper we propose a new technique, called OmniUnpack, to monitor the execution of a program in real-time and to detect when the program has removed the various layers of packing. OmniUnpack aids malware detection by directly providing to the detector the unpacked malicious payload. Experimental results demonstrate the effectiveness of our approach. OmniUnpack is able to deal with both known and unknown packing algorithms and introduces a low overhead (at most 11% for packed benign programs). © 2007 IEEE.","Martignoni L.; Christodorescu M.; Jha S.","194"
"Technique","Normalization","Code normalization for self-mutating malware","10.1109/MSP.2007.31","2007","The significance of code normalization in self-mutating malware, is discussed. Code normalization reduces different instances of the same malware into a common form that can enable accurate detection of malware. A malware adopt several common strategies to achieve code mutation and applies these transformations randomly to control-flow graph. Metamorphic malware, a self-mutating code is being created that changes itself and its fingerprint automatically on every execution, eliminating the requirements of generation of new fingerprint of malware signatures. Code normalization detects self-mutating codes using static analysis for transformation of the self-mutating malware.","Bruschi D.; Martignoni L.; Monga M.","58"
"Technique","Anomaly-Based Detection","Detection of Intrusions and Malware, and Vulnerability Assessment: 4th International Conference, DIMVA 2007 Proceedings","","2007","The proceedings contain 14 papers. The topics discussed include: extensible web browser security; on the effectiveness of techniques to detect phishing sites; on the effects of learning set corruption in anomaly-based detection of web defacements; measurement and analysis of autonomous spreading malware in a university environment; characterizing dark DNS behavior; distributed evasive scan techniques and countermeasures; on the adaptive real-time detection of fast-propagating network worms; targeting physically addressable memory; static analysis on x86 executables for preventing automatic mimicry attacks; and a study of malcode-bearing documents.","","0"
"Technique","Logistic Regression","Data mining methods for malware detection using instruction sequences","","2008","Malicious programs pose a serious threat to computer security. Traditional approaches using signatures to detect malicious programs pose little danger to new and unseen programs whose signatures are not available. The focus of the research is shifting fromusing signature patterns to identify a specific malicious program and/or its variants to discover the general malicious behavior in the programs. This paper presents a novel idea of automatically identifying critical instruction sequences that can classify between malicious and clean programs using data mining techniques. Based upon general statistics gathered from these instruction sequences we formulated the problem as a binary classification problem and built logistic regression, neural networks and decision tree models. Our approach showed 98.4% detectionrate on new programs whose data was not used in the model building process.","Siddiqui M.; Wang M.C.; Lee J.","38"
"Technique","Anomaly Detection","A survey of data mining techniques for malware detection using file features","10.1145/1593105.1593239","2008","This paper presents a survey of data mining techniques for malware detection using file features. The techniques are categorized based upon a three tier hierarchy that includes file features, analysis type and detection type. File features are the features extracted from binary programs, analysis type is either static or dynamic, and the detection type is borrowed from intrusion detection as either misuse or anomaly detection. It provides the reader with the major advancement in the malware research using data mining on file features and categorizes the surveyed work based upon the above stated hierarchy. This served as the major contribution of this paper.","Siddiqui M.; Wang M.C.; Lee J.","60"
"Technique","Sandboxing","Efficient fine-grained binary instrumentation with applications to taint-tracking","10.1145/1356058.1356069","2008","Fine-grained binary instrumentations, such as those for tainttracking, have become very popular in computer security due to their applications in exploit detection, sandboxing, malware analysis, etc. However, practical application of taint-tracking has been limited by high performance overheads. For instance, previous software based techniques for taint-tracking on binary code have typically slowed down programs by a factor of 3 or more. In contrast, source-code based techniques have achieved better performance using high level optimizations. Unfortunately, these optimizations are difficult to perform on binaries since much of the high level program structure required by such static analyses is lost during the compilation process. In this paper, we address this challenge by developing static techniques that can recover some of the higher level structure from X.86 binaries. Our new static analysis enables effective optimizations, which are applied in the context of taint tracking. As a result, we achieve a substantial reduction in performance overheads as compared to previous works. Copyright 2008 ACM.","Saxena P.; Sekar R.; Puranik V.","66"
"Technique","Clone Detection","Inductive learning in malware detection","10.1109/WiCom.2008.2921","2008","Malicious programs are an ever increasing threat to current computer systems. Traditional anti-virus techniques focus typically on detection of the static signatures of worms. In this paper the method for generalization and specialization of attack pattern using inductive learning is proposed, which can be used updating and expanding knowledge database. The attack pattern is established from an example and after generalization it can be used to detect unknown attacks whose behavior are similar to the example. © 2008 IEEE.","Liu P.; Wang X.","0"
"Technique","Debugging","Malware Forensics: Investigating and Analyzing Malicious Code","10.1016/B978-1-59749-268-3.X0001-1","2008","Malware Forensics: Investigating and Analyzing Malicious Code covers the emerging and evolving field of ""live forensics,"" where investigators examine a computer system to collect and preserve critical live data that may be lost if the system is shut down. Unlike other forensic texts that discuss ""live forensics"" on a particular operating system, or in a generic context, this book emphasizes a live forensics and evidence collection methodology on both Windows and Linux operating systems in the context of identifying and capturing malicious code and evidence of its effect on the compromised system. Malware Forensics: Investigating and Analyzing Malicious Code also devotes extensive coverage of the burgeoning forensic field of physical and process memory analysis on both Windows and Linux platforms. This book provides clear and concise guidance as to how to forensically capture and examine physical and process memory as a key investigative step in malicious code forensics. Prior to this book, competing texts have described malicious code, accounted for its evolutionary history, and in some instances, dedicated a mere chapter or two to analyzing malicious code. Conversely, Malware Forensics: Investigating and Analyzing Malicious Code emphasizes the practical ""how-to"" aspect of malicious code investigation, giving deep coverage on the tools and techniques of conducting runtime behavioral malware analysis (such as file, registry, network and port monitoring) and static code analysis (such as file identification and profiling, strings discovery, armoring/packing detection, disassembling, debugging), and more. © 2008 Elsevier Inc. All rights reserved.","Aquilina J.M.; Casey E.; Malin C.H.","62"
"Technique","Packing Detection","Malware Forensics: Investigating and Analyzing Malicious Code","10.1016/B978-1-59749-268-3.X0001-1","2008","Malware Forensics: Investigating and Analyzing Malicious Code covers the emerging and evolving field of ""live forensics,"" where investigators examine a computer system to collect and preserve critical live data that may be lost if the system is shut down. Unlike other forensic texts that discuss ""live forensics"" on a particular operating system, or in a generic context, this book emphasizes a live forensics and evidence collection methodology on both Windows and Linux operating systems in the context of identifying and capturing malicious code and evidence of its effect on the compromised system. Malware Forensics: Investigating and Analyzing Malicious Code also devotes extensive coverage of the burgeoning forensic field of physical and process memory analysis on both Windows and Linux platforms. This book provides clear and concise guidance as to how to forensically capture and examine physical and process memory as a key investigative step in malicious code forensics. Prior to this book, competing texts have described malicious code, accounted for its evolutionary history, and in some instances, dedicated a mere chapter or two to analyzing malicious code. Conversely, Malware Forensics: Investigating and Analyzing Malicious Code emphasizes the practical ""how-to"" aspect of malicious code investigation, giving deep coverage on the tools and techniques of conducting runtime behavioral malware analysis (such as file, registry, network and port monitoring) and static code analysis (such as file identification and profiling, strings discovery, armoring/packing detection, disassembling, debugging), and more. © 2008 Elsevier Inc. All rights reserved.","Aquilina J.M.; Casey E.; Malin C.H.","62"
"Technique","Progressive Neural Networks","Data mining methods for malware detection using instruction sequences","","2008","Malicious programs pose a serious threat to computer security. Traditional approaches using signatures to detect malicious programs pose little danger to new and unseen programs whose signatures are not available. The focus of the research is shifting fromusing signature patterns to identify a specific malicious program and/or its variants to discover the general malicious behavior in the programs. This paper presents a novel idea of automatically identifying critical instruction sequences that can classify between malicious and clean programs using data mining techniques. Based upon general statistics gathered from these instruction sequences we formulated the problem as a binary classification problem and built logistic regression, neural networks and decision tree models. Our approach showed 98.4% detectionrate on new programs whose data was not used in the model building process.","Siddiqui M.; Wang M.C.; Lee J.","38"
"Technique","Active Learning","Identification of malicious web pages by inductive learning","10.1007/978-3-642-05250-7_47","2009","Malicious web pages are an increasing threat to current computer systems in recent years. Traditional anti-virus techniques focus typically on detection of the static signatures of Malware and are ineffective against these new threats because they cannot deal with zero-day attacks. In this paper, a novel classification method for detecting malicious web pages is presented. This method is generalization and specialization of attack pattern based on inductive learning, which can be used for updating and expanding knowledge database. The attack pattern is established from an example and generalized by inductive learning, which can be used to detect unknown attacks whose behavior is similar to the example. © 2009 Springer-Verlag.","Liu P.; Wang X.","0"
"Technique","Alias Analysis","Automatic static unpacking of malware binaries","10.1109/WCRE.2009.24","2009","Current malware is often transmitted in packed or encrypted form to prevent examination by anti-virus software. To analyze new malware, researchers typically resort to dynamic code analysis techniques to unpack the code for examination. Unfortunately, these dynamic techniques are susceptible to a variety of anti-monitoring defenses, as well as ""time bombs"" or ""logic bombs,"" and can be slow and tedious to identify and disable. This paper discusses an alternative approach that relies on static analysis techniques to automate this process. Alias analysis can be used to identify the existence of unpacking, static slicing can identify the unpacking code, and control flow analysis can be used to identify and neutralize dynamic defenses. The identified unpacking code can be instrumented and transformed, then executed to perform the unpacking. We present a working prototype that can handle a variety of malware binaries, packed with both custom and commercial packers, and containing several examples of dynamic defenses. © 2009 IEEE.","Coogan K.; Debray S.; Kaochar T.; Townsend G.","51"
"Technique","Control Flow Analysis","Automatic static unpacking of malware binaries","10.1109/WCRE.2009.24","2009","Current malware is often transmitted in packed or encrypted form to prevent examination by anti-virus software. To analyze new malware, researchers typically resort to dynamic code analysis techniques to unpack the code for examination. Unfortunately, these dynamic techniques are susceptible to a variety of anti-monitoring defenses, as well as ""time bombs"" or ""logic bombs,"" and can be slow and tedious to identify and disable. This paper discusses an alternative approach that relies on static analysis techniques to automate this process. Alias analysis can be used to identify the existence of unpacking, static slicing can identify the unpacking code, and control flow analysis can be used to identify and neutralize dynamic defenses. The identified unpacking code can be instrumented and transformed, then executed to perform the unpacking. We present a working prototype that can handle a variety of malware binaries, packed with both custom and commercial packers, and containing several examples of dynamic defenses. © 2009 IEEE.","Coogan K.; Debray S.; Kaochar T.; Townsend G.","51"
"Technique","Support Vector Machines","2009 4th International Conference on Malicious and Unwanted Software, MALWARE 2009","","2009","The proceedings contain 13 papers. The topics discussed include: smartphone malware evolution revisited: android next target?; malware propagation in online social networks; detecting symbian OS malware through static function call analysis; an automated classification system based on the strings of trojan and virus families; nebula - generating syntactical network intrusion signatures; classification and detection of metamorphic malware using value set analysis; obfuscated malicious javascript detection using classification techniques; server-side dynamic code analysis; malware analysis with graph kernels and support vector machines; the waledac protocol: the how and why; analyzing DNS activities of bot processes; and optimizing sybil attacks against P2P-based botnets.","","0"
"Technique","Code Injection","Nozzle: A defense against heap-spraying code injection attacks","","2009","Heap spraying is a security attack that increases the ex-ploitability of memory corruption errors in type-unsafe applications. In a heap-spraying attack, an attacker coerces an application to allocate many objects containing malicious code in the heap, increasing the success rate of an exploit that jumps to a location within the heap. Because heap layout randomization necessitates new forms of attack, spraying has been used in many recent security exploits. Spraying is especially effective in web browsers, where the attacker can easily allocate the malicious objects using JavaScript embedded in a web page. In this paper, we describe NOZZLE, a runtime heap-spraying detector. NOZZLE examines individual objects in the heap, interpreting them as code and performing a static analysis on that code to detect malicious intent. To reduce false positives, we aggregate measurements across all heap objects and define a global heap health metric. We measure the effectiveness of NOZZLE by demonstrating that it successfully detects 12 published and 2,000 synthetically generated heap-spraying exploits. We also show that even with a detection threshold set six times lower than is required to detect published malicious attacks, NOZZLE reports no false positives when run over 150 popular Internet sites. Using sampling and concurrent scanning to reduce overhead, we show that the performance overhead of NOZZLE is less than 7% on average. While NOZZLE currently targets heap-based spraying attacks, its techniques can be applied to any attack that attempts to fill the address space with malicious code objects (e.g., stack spraying [42]). © 2009 Proceedings of the 18th USENIX Security Symposium. All rights reserved.","Ratanaworabhan P.; Livshits B.; Zorn B.","160"
"Technique","Stacking Techniques","Generic unpacking techniques","10.1109/IC4.2009.4909168","2009","Traditional signature-based malware detection techniques rely on byte sequences, called signatures, in executable for signature-matching. Modern malware authors can bypass signature-based scanning by employing the recently emerged technology of code obfuscation for information hiding. Obfuscation alters the byte sequence of the code without effectively changing the execution behavior. A commonly used obfuscation technique is packing. Packing compresses and/or encrypts the program code. Actual code stays hidden till runtime (when the executable is unpacked) making it immune to static analysis. Since every packer has its associated unpacker to undo packing, a successful generic unpacker is difficult to come by. A few automated unpacking techniques have been published so far that attempt to unpack packed binaries without any specific knowledge of the packing technique used. In this paper, we aim to provide a comprehensive summary of the currently published prevalent generic unpacking techniques and weigh their effectiveness at dealing with the spreading nuisance of packed malware. Dynamic analysis is a promising solution to the packing problem as every packed binary has to inevitably unpack itself for execution. Emulation (running code in a virtual environment) is an effective and powerful technique for generic unpacking. We will be reviewing various unpacking techniques based on emulation and a few other hybrid and alternative approaches.","Babar K.; Khalid F.","15"
"Technique","Virtualization Obfuscation","Unpacking virtualization obfuscators","","2009","Nearly every malware sample is sheathed in an executable protection which must be removed before static analyses can proceed. Existing research has studied automatically unpacking certain protections, but has not yet caught up with many modern techniques. Contrary to prior assumptions, protected programs do not always have the property that they are reverted to a fully unprotected state at some point during the course of their execution. This work provides a novel technique for circumventing one of the most problematic features of modern software protections, so-called virtualization obfuscation. The technique enables analysis of heretofore impenetrable malware. © 2009 USENIX Association. All rights reserved.","Rolles R.","111"
"Technique","Points-To Analysis","Mapping kernel objects to enable systematic integrity checking","10.1145/1653662.1653729","2009","Dynamic kernel data have become an attractive target for kernel-mode malware. However, previous solutions for checking kernel integrity either limit themselves to code and static data or can only inspect a fraction of dynamic data, resulting in limited protection. Our study shows that previous solutions may reach only 28% of the dynamic kernel data and thus may fail to identify function pointers manipulated by many kernel-mode malware. To enable systematic kernel integrity checking, in this paper we present KOP, a system that can map dynamic kernel data with nearly complete coverage and nearly perfect accuracy. Unlike previous approaches, which ignore generic pointers, unions and dynamic arrays when locating dynamic kernel objects, KOP (1) applies inter-procedural points-to analysis to compute all possible types for generic pointers (e.g., void*), (2) uses a pattern matching algorithm to resolve type ambiguities (e.g., unions), and (3) recognizes dynamic arrays by leveraging knowledge of kernel memory pool boundaries. We implemented a prototype of KOP and evaluated it on a Windows Vista SP1 system loaded with 63 kernel drivers. KOP was able to accurately map 99% of all the dynamic kernel data. To demonstrate KOP's power, we developed two tools based on it to systematically identify malicious function pointers and uncover hidden kernel objects. Our tools correctly identified all malicious function pointers and all hidden objects from nine real-world kernel-mode malware samples as well as one created by ourselves, with no false alarms. Copyright 2009 ACM.","Carbone M.; Cui W.; Lu L.; Lee W.; Peinado M.; Jiang X.","125"
"Technique","Feature Extraction","Towards understanding malware behaviour by the extraction of API calls","10.1109/CTC.2010.8","2010","One of the recent trends adopted by malware authors is to use packers or software tools that instigate code obfuscation in order to evade detection by antivirus scanners. With evasion techniques such as polymorphism and metamorphism malware is able to fool current detection techniques. Thus, security researchers and the anti-virus industry are facing a herculean task in extracting payloads hidden within packed executables. It is a common practice to use manual unpacking or static unpacking using some software tools and analyse the application programming interface (API) calls for malware detection. However, extracting these features from the unpacked executables for reverse obfuscation is labour intensive and requires deep knowledge of low-level programming that includes kernel and assembly language. This paper presents an automated method of extracting API call features and analysing them in order to understand their use for malicious purpose. While some research has been conducted in arriving at file birthmarks using API call features and the like, there is a scarcity of work that relates to features in malcodes. To address this gap, we attempt to automatically analyse and classify the behavior of API function calls based on the malicious intent hidden within any packed program. This paper uses four-step methodology for developing a fully automated system to arrive at six main categories of suspicious behavior of API call features. © 2010 IEEE.","Alazab M.; Venkataraman S.; Watters P.","143"
"Technique","Malware Classification","Classification of malware using structured control flow","","2010","Malware is a pervasive problem in distributed computer and network systems. Identification of malware variants provides great benefit in early detection. Control flow has been proposed as a characteristic that can be identified across variants, resulting in flowgraph based malware classification. Static analysis is widely used for the classification but can be ineffective if malware undergoes a code packing transformation to hide its real content. This paper proposes a novel algorithm for constructing a control flow graph signature using the decompilation technique of structuring. Similarity between structured graphs can be quickly determined using string edit distances. To reverse the code packing transformation, a fast application level emulator is proposed. To demonstrate the effectiveness of the automated unpacking and flowgraph based classification, we implement a complete system and evaluate it using synthetic and real malware. The evaluation shows our system is highly effective in terms of accuracy in revealing all the hidden code, execution time for unpacking, and accuracy in classification. © 2010, Australian Computer Society, Inc.","Cesare S.; Xiang Y.","92"
"Technique","Pattern Recognition","Classification of malware based on string and function feature selection","10.1109/CTC.2010.11","2010","Anti-malware software producers are continually challenged to identify and counter new malware as it is released into the wild. A dramatic increase in malware production in recent years has rendered the conventional method of manually determining a signature for each new malware sample untenable. This paper presents a scalable, automated approach for detecting and classifying malware by using pattern recognition algorithms and statistical methods at various stages of the malware analysis life cycle. Our framework combines the static features of function length and printable string information extracted from malware samples into a single test which gives classification results better than those achieved by using either feature individually. In our testing we input feature information from close to 1400 unpacked malware samples to a number of different classification algorithms. Using k-fold cross validation on the malware, which includes Trojans and viruses, along with 151 clean files, we achieve an overall classification accuracy of over 98%. © 2010 IEEE.","Islam R.; Tian R.; Batten L.; Versteeg S.","72"
"Technique","Edge Detection","AntiBot: Clustering common semantic patterns for bot detection","10.1109/COMPSAC.2010.33","2010","Among malicious software (malware), autonomous malicious programs, called bots, are a serious problem in the Internet. The bot writers have developed a variety of techniques to evade simple signature-based detection. Concise representations of malware behavior, or semantic patterns, are much harder to evade or obfuscate. However, generating a semantic pattern for every program instance is time-consuming, and comparing with a large number of patterns creates a challenge for timely identification of bots. This paper proposes an automated approach to generate semantic patterns for bot detection. Unlike previous approaches, it is intended to find one pattern that accurately represents the important behavior of an entire class of bots, rather than of individual instances. Doing so has advantages for fast malware identification, and for distinguishing new classes of attacks from previously-seen attacks. The work uses static analysis to characterize bot behaviors , and proposes to use hierarchical clustering of the resulting semantic patterns from a set of bot programs. The goal is to identify critical, common semantic behavior that represents the functions of an entire class of the malware. This method has been prototyped and evaluated on real-world malicious bot software. Depending on parameter choices, our approach can achieve more than 95% detection rates and less than 5% false positive rates on a large set of bot programs and non-bot executables. © 2010 IEEE.","Park Y.; Zhang Q.; Reeves D.; Mulukutla V.","18"
"Technique","Heap Analysis","Lessons learned from an investigation into the analysis avoidance techniques of malicious software","","2010","This paper outlines a number of key lessons learned from an investigation into the techniques malicious executable software can employ to hinder digital forensic examination. Malware signature detection has been recognised by researchers to be far less than ideal. Thus, the forensic analyst may be required to manually analyse suspicious files. However, in order to hinder the forensic analyst, hide its true intent and to avoid detection, modern malware can be wrapped with packers or protectors, and layered with a plethora of anti-analysis techniques. This necessitates the forensic analyst to develop static and dynamic analysis skills tailored to navigate a hostile environment. To this end, the analyst must understand the anti-analysis techniques that can be employed and how to mitigate them, the limitations of existing tools and how to extend them, and how to employ an appropriate analysis methodology to uncover the intent of the malware.","Brand M.; Valli C.; Woodward A.","10"
"Technique","Virus Analysis","Malware self protection mechanism issues in conducting malware behaviour analysis in a virtual environment as compared to a real environment","10.1109/ITSIM.2010.5561600","2010","Malware writers are constantly trying to defeat and hinder malware analysis with malware self protection mechanism. There are two main methods of malware analysis which are reverse engineering and behaviour analysis. Reverse engineering consists of static and dynamic code analysis. Behaviour analysis studies the malware's interaction in and out of the infected host. Behaviour analysis will always be a faster method compared to reverse engineering due to its more visual approach. This study will analyse issues related to malware self protection mechanism in conducting malware behaviour analysis in a virtual environment as compared to a real environment and suggestion(s), on how to overcome the problem. © 2010 IEEE.","Alsagoff S.N.","2"
"Technique","Q-Learning","Automatic behaviour-based analysis and classification system for malware detection","","2010","Malware is any kind of program explicitly designed to harm, such as viruses, trojan horses or worms. Since the amount of malware is growing exponentially, it already poses a serious security threat. Therefore, every incoming code must be analysed in order to classify it as malware or benign software. These tests commonly combine static and dynamic analysis techniques in order to extract the major amount of information from distrustful files. Moreover, the increment of the number of attacks hinders manually testing the thousands of suspicious archives that every day reach antivirus laboratories. Against this background, we address here an automatised system for malware behaviour analysis based on emulation and simulation techniques. Hence, creating a secure and reliable sandbox environment allows us to test the suspicious code retrieved without risk. In this way, we can also generate evidences and classify the samples with several machine-learning algorithms. We have developed the proposed solution, testing it with real malware. Finally, we have evaluated it in terms of reliability and time performance, two of the main aspects for such a system to work.","Devesa J.; Santos I.; Cantero X.; Penya Y.K.; Bringas P.G.","41"
"Technique","Behavioral Analysis","Malware self protection mechanism issues in conducting malware behaviour analysis in a virtual environment as compared to a real environment","10.1109/ITSIM.2010.5561600","2010","Malware writers are constantly trying to defeat and hinder malware analysis with malware self protection mechanism. There are two main methods of malware analysis which are reverse engineering and behaviour analysis. Reverse engineering consists of static and dynamic code analysis. Behaviour analysis studies the malware's interaction in and out of the infected host. Behaviour analysis will always be a faster method compared to reverse engineering due to its more visual approach. This study will analyse issues related to malware self protection mechanism in conducting malware behaviour analysis in a virtual environment as compared to a real environment and suggestion(s), on how to overcome the problem. © 2010 IEEE.","Alsagoff S.N.","2"
"Technique","Heuristic Analysis","From the design of a generic metamorphic engine to a black-box classification of antivirus detection techniques","10.1007/s11416-009-0136-2","2010","In this paper, we propose an original black-box approach concerning antivirus products evaluation. Contrary to classical tests focusing on detection rates concerning a specific malware sample, we use a generic metamorphic engine to observe the detection products behaviors. We believe that this point of view presents a double interest: First, it offers an original way of evaluating current antivirus products focusing on the observed detection technique. More precisely, the use of metamorphic malware guarantees the difficulty of static signature based detection techniques to focus only on heuristic and behavioral detection approaches. Second, by pointing out current detection capabilities, we practically evaluate the danger that complex metamorphic malware could represent. To achieve this goal, we start with the description of a generic metamorphic engine acting in two steps: obfuscation and modeling. Then, we apply this engine to a real mass-mailing worm and propose the resulting metamorphic malware samples to current antivirus products. The observed results lead to a classification of detection techniques in two main categories: the first one, relying on static detection techniques, presents low detection rates obtained by heuristic analysis. The second one, composed of behavioral detection programs, mainly focuses on elementary suspicious actions. In all cases, no product was able to detect a global malware behavior. Consequently, we consider that metamorphic malware detection still represents a real challenge for antivirus products. Through this study, we hope to help defenders understand and defend against the threat represented by this class of malware. © 2009 Springer-Verlag France.","Borello J.-M.; Filiol E.; Mé L.","7"
"Technique","Virtual Machine Detection","Measuring virtual machine detection in malware using DSD tracer","10.1007/s11416-008-0096-y","2010","Most methods for detecting that a process is running inside a virtual environment such as VMWare or Microsoft Virtual PC are well known and the paper briefly discusses the most common methods measured during the research. The measurements are conducted over a representative set of malicious files, with special regards to packer code. The results are broken down with respect to malware category, families and various commercial and non-commercial packers and presented in a graphical and tabular format. The extent of virtual machine detection problem is estimated based on the results of the research. The main subject of the paper is measurement of actual usage of Virtual machine detection methods in current malware. The research uses DSD Tracer, a dynamic-static tracing system based on an instrumented Bochs virtual machine. The system employs tracing to produce traces of execution that can be scripted or used as a basis for disassembly/emulation in IDA Pro when combined with a customised version of IDAEmul (emulator). The paper gives an overview of design and usage of DSD Tracer. © 2008 Springer-Verlag France.","Lau B.; Svajcer V.","32"
"Technique","Hierarchical Clustering","AntiBot: Clustering common semantic patterns for bot detection","10.1109/COMPSAC.2010.33","2010","Among malicious software (malware), autonomous malicious programs, called bots, are a serious problem in the Internet. The bot writers have developed a variety of techniques to evade simple signature-based detection. Concise representations of malware behavior, or semantic patterns, are much harder to evade or obfuscate. However, generating a semantic pattern for every program instance is time-consuming, and comparing with a large number of patterns creates a challenge for timely identification of bots. This paper proposes an automated approach to generate semantic patterns for bot detection. Unlike previous approaches, it is intended to find one pattern that accurately represents the important behavior of an entire class of bots, rather than of individual instances. Doing so has advantages for fast malware identification, and for distinguishing new classes of attacks from previously-seen attacks. The work uses static analysis to characterize bot behaviors , and proposes to use hierarchical clustering of the resulting semantic patterns from a set of bot programs. The goal is to identify critical, common semantic behavior that represents the functions of an entire class of the malware. This method has been prototyped and evaluated on real-world malicious bot software. Depending on parameter choices, our approach can achieve more than 95% detection rates and less than 5% false positive rates on a large set of bot programs and non-bot executables. © 2010 IEEE.","Park Y.; Zhang Q.; Reeves D.; Mulukutla V.","18"
"Technique","Interval Analysis","1st International Conference on Runtime Verification, RV 2010","","2010","The proceedings contain 39 papers. The special focus in this conference is on Runtime Verification. The topics include: Statistical model checking: An overview; Runtime verification with the RV system; a meta-aspect protocol for developing dynamic analyses; behavior abstraction in malware analysis; clara: A framework for partially evaluating finite-state runtime monitors ahead of time; Checking the correspondence between UML models and implementation; compensation-aware runtime monitoring; recovery Tasks: An Automated Approach to Failure Recovery; formally efficient program instrumentation; Code Contracts for.NET: Runtime verification and so much more; interval analysis for concurrent trace programs using transaction sequence graphs; causality analysis in contract violation; reducing configurations to monitor in a software product line; runtime instrumentation for precise flow-sensitive type analysis; trace recording for embedded systems: Lessons learned from five industrial projects; Verification of an AFDX infrastructure using simulations and probabilities; copilot: A Hard Real-Time Runtime Monitor; stealthWorks: Emulating memory errors; efficient data race detection for async-finish parallelism; run-time verification of optimistic concurrency; visual debugging for stream processing applications; who guards the guardians? — Toward V&V of health management software: (Short paper); Aspect-Oriented instrumentation with GCC; runtime Verification for Software Transactional Memories; optimized temporal monitors for systemC; runtime verification of stochastic, faulty systems; low-overhead bug fingerprinting for fast debugging; ESAT: A tool for animating logic-based specifications of evolvable component systems; a tool which mines partial execution traces to improve static analysis; larvaStat: Monitoring of statistical properties; WS-PSC monitor: A tool chain for monitoring temporal and timing properties in composite service based on property sequence chart.","","1"
"Technique","Pruning Techniques","FORECAST - Skimming off the malware cream","10.1145/2076732.2076735","2011","To handle the large number of malware samples appearing in the wild each day, security analysts and vendors employ automated tools to detect, classify and analyze malicious code. Because malware is typically resistant to static analysis, automated dynamic analysis is widely used for this purpose. Executing malicious software in a controlled environment while observing its behavior can provide rich information on a malware's capabilities. However, running each malware sample even for a few minutes is expensive. For this reason, malware analysis efforts need to select a subset of samples for analysis. To date, this selection has been performed either randomly or using techniques focused on avoiding re-analysis of polymorphic malware variants [41, 23]. In this paper, we present a novel approach to sample selection that attempts to maximize the total value of the information obtained from analysis, according to an application-dependent scoring function. To this end, we leverage previous work on behavioral malware clustering [14] and introduce a machine-learning-based system that uses all statically-available information to predict into which behavioral class a sample will fall, before the sample is actually executed. We discuss scoring functions tailored at two practical applications of large-scale dynamic analysis: the compilation of network blacklists of command and control servers and the generation of remediation procedures for malware infections. We implement these techniques in a tool called FORECAST. Large-scale evaluation on over 600,000 malware samples shows that our prototype can increase the amount of potential command and control servers detected by up to 137% over a random selection strategy and 54% over a selection strategy based on sample diversity. Copyright 2011 ACM.","Neugschwandtner M.; Comparetti P.M.; Jacob G.; Kruegel C.","25"
"Technique","Similarity Analysis","Malware detection using assembly and API call sequences","10.1007/s11416-010-0141-5","2011","One of the major problems concerning information assurance is malicious code. To evade detection, malware has also been encrypted or obfuscated to produce variants that continue to plague properly defended and patched networks with zero day exploits. With malware and malware authors using obfuscation techniques to generate automated polymorphic and metamorphic versions, anti-virus software must always keep up with their samples and create a signature that can recognize the new variants. Creating a signature for each variant in a timely fashion is a problem that anti-virus companies face all the time. In this paper we present detection algorithms that can help the anti-virus community to ensure a variant of a known malware can still be detected without the need of creating a signature; a similarity analysis (based on specific quantitative measures) is performed to produce a matrix of similarity scores that can be utilized to determine the likelihood that a piece of code under inspection contains a particular malware. Two general malware detection methods presented in this paper are: Static Analyzer for Vicious Executables (SAVE) and Malware Examiner using Disassembled Code (MEDiC). MEDiC uses assembly calls for analysis and SAVE uses API calls (Static API call sequence and Static API call set) for analysis. We show where Assembly can be superior to API calls in that it allows a more detailed comparison of executables. API calls, on the other hand, can be superior to Assembly for its speed and its smaller signature. Our two proposed techniques are implemented in SAVE) and MEDiC. We present experimental results that indicate that both of our proposed techniques can provide a better detection performance against obfuscated malware. We also found a few false positives, such as those programs that use network functions (e. g. PuTTY) and encrypted programs (no API calls or assembly functions are found in the source code) when the thresholds are set 50% similarity measure. However, these false positives can be minimized, for example by changing the threshold value to 70% that determines whether a program falls in the malicious category or not. © 2010 Springer-Verlag France.","Shankarapani M.K.; Ramamoorthy S.; Movva R.S.; Mukkamala S.","90"
"Technique","Email Analysis","Obfuscated malware detection based on boosting multilevel features","10.3724/SP.J.1001.2011.03727","2011","To cope with the problem of the low accuracy in detecting obfuscated malware, an algorithm to detect obfuscated malware based on boosting multi-level features is presented. After a disassembly analysis and static analysis for the obfuscated malware, the algorithm extracts features from three dimensions: opcode distribution, a function call graph, and a system call graph, which combines the statistic and semantic features to reflect the behavior characteristic of the malware, and then gives out the decision result based on weighted voting for a different feature analysis. It has been proven by experiment that the algorithms have a much higher accuracy on the testing dataset. © ISCAS.","Kong D.-G.; Tan X.-B.; Xi H.-S.; Gong T.; Shuai J.-M.","5"
"Technique","Mutex Analysis","Deobfuscation of virtualization-obfuscated software: A semantics-based approach","10.1145/2046707.2046739","2011","When new malware are discovered, it is important for researchers to analyze and understand them as quickly as possible. This task has been made more difficult in recent years as researchers have seen an increasing use of virtualization-obfuscated malware code. These programs are difficult to comprehend and reverse engineer, since they are resistant to both static and dynamic analysis techniques. Current approaches to dealing with such code first reverse-engineer the byte code interpreter, then use this to work out the logic of the byte code program. This outside-in approach produces good results when the structure of the interpreter is known, but cannot be applied to all cases. This paper proposes a different approach to the problem that focuses on identifying instructions that affect the observable behavior of the obfuscated code. This inside-out approach requires fewer assumptions, and aims to complement existing techniques by broadening the domain of obfuscated programs eligible for automated analysis. Results from a prototype tool on real-world malicious code are encouraging. © 2011 ACM.","Coogan K.; Lu G.; Debray S.","110"
"Technique","Information Gain","Efficient, sensitivity resistant binary instrumentation","10.1145/2001420.2001432","2011","Binary instrumentation allows users to inject new code into programs without requiring source code, symbols, or debugging information. Instrumenting a binary requires structural modifications such as moving code, adding new code, and overwriting existing code; these modifications may unintentionally change the program's semantics. Binary instrumenters attempt to preserve the intended semantics of the program by further transforming the code to compensate for these structural modifications. Current instrumenters may fail to correctly preserve program semantics or impose significant unnecessary compensation cost because they lack a formal model of the impact of their structural modifications on program semantics. These weaknesses are particularly acute when instrumenting highly optimized or malicious code, making current instrumenters less useful as tools in the security or high-performance domains. We present a formal specification of how the structural modifications used by instrumentation affect a binary's visible behavior, and have adapted the Dyninst binary instrumenter to use this specification, thereby guaranteeing correct instrumentation while greatly reducing compensation costs. When compared against the fastest widely used instrumenters our technique imposed 46% less overhead; furthermore, we can successfully instrument highly defensive binaries that are specifically looking for code patching and instrumentation. © 2011 ACM.","Bernat A.R.; Roundy K.; Miller B.P.","13"
"Technique","Macro Analysis","DeRop: Removing return-oriented programming from malware","10.1145/2076732.2076784","2011","Over the last few years, malware analysis has been one of the hottest areas in security research. Many techniques and tools have been developed to assist in automatic analysis of malware. This ranges from basic tools like disassemblers and decompilers, to static and dynamic tools that analyze malware behaviors, to automatic malware clustering and classification techniques, to virtualization technologies to assist malware analysis, to signature- and anomaly-based malware detection, and many others. However, most of these techniques and tools would not work on new attacking techniques, e.g., attacks that use return-oriented programming (ROP). In this paper, we look into the possibility of enabling existing defense technologies designed for normal malware to cope with malware using return-oriented programming. We discuss difficulties in removing ROP from malware, and design and implement an automatic converter, called deRop, that converts an ROP exploit into shellcode that is semantically equivalent with the original ROP exploit but does not use ROP, which could then be analyzed by existing malware defense technologies. We apply deRop on four real ROP malwares and demonstrate success in using deRop for the automatic conversion. We further discuss applicability and limitations of deRop. Copyright 2011 ACM.","Lu K.; Zou D.; Wen W.; Gao D.","15"
"Technique","Blending Methods","An empirical evaluation of an unpacking method implemented with dynamic binary instrumentation","10.1587/transinf.E94.D.1778","2011","Many malicious programs we encounter these days are armed with their own custom encoding methods (i.e., they are packed) to deter static binary analysis. Thus, the initial step to deal with unknown (possibly malicious) binary samples obtained from malware collecting systems ordinarily involves the unpacking step. In this paper, we focus on empirical experimental evaluations on a generic unpacking method built on a dynamic binary instrumentation (DBI) framework to figure out the applicability of the DBI-based approach. First, we present yet another method of generic binary unpacking extending a conventional unpacking heuristic. Our architecture includes managing shadow states to measure code exposure according to a simple byte state model. Among available platforms, we built an unpacking implementation on PIN DBI framework. Second, we describe evaluation experiments, conducted on wild malware collections, to discuss workability as well as limitations of our tool. Without the prior knowledge of 6029 samples in the collections, we have identified at around 64% of those were analyzable with our DBI-based generic unpacking tool which is configured to operate in fully automatic batch processing. Purging corrupted and unworkable samples in native systems, it was 72%. Copyright © 2011 The Institute of Electronics, Information and Communication Engineers.","Kim H.C.; Orii T.; Yoshioka K.; Inoue D.; Song J.; Eto M.; Shikata J.; Matsumoto T.; Nakao K.","5"
"Technique","Graph Analysis","Detecting kernel-level rootkits using data structure invariants","10.1109/TDSC.2010.38","2011","Rootkits affect system security by modifying kernel data structures to achieve a variety of malicious goals. While early rootkits modified control data structures, such as the system call table and values of function pointers, recent work has demonstrated rootkits that maliciously modify noncontrol data. Most prior techniques for rootkit detection have focused solely on detecting control data modifications and, therefore, fail to detect such rootkits. This paper presents a novel technique to detect rootkits that modify both control and noncontrol data. The main idea is to externally observe the execution of the kernel during an inference phase and hypothesize invariants on kernel data structures. A rootkit detection phase uses these invariants as specifications of data structure integrity. During this phase, violation of invariants indicates an infection. We have implemented Gibraltar, a prototype tool that infers kernel data structure invariants and uses them to detect rootkits. Experiments show that Gibraltar can effectively detect previously known rootkits, including those that modify noncontrol data structures. © 2011 IEEE.","Baliga A.; Ganapathy V.; Iftode L.","72"
"Technique","Rootkit Detection","Detecting kernel-level rootkits using data structure invariants","10.1109/TDSC.2010.38","2011","Rootkits affect system security by modifying kernel data structures to achieve a variety of malicious goals. While early rootkits modified control data structures, such as the system call table and values of function pointers, recent work has demonstrated rootkits that maliciously modify noncontrol data. Most prior techniques for rootkit detection have focused solely on detecting control data modifications and, therefore, fail to detect such rootkits. This paper presents a novel technique to detect rootkits that modify both control and noncontrol data. The main idea is to externally observe the execution of the kernel during an inference phase and hypothesize invariants on kernel data structures. A rootkit detection phase uses these invariants as specifications of data structure integrity. During this phase, violation of invariants indicates an infection. We have implemented Gibraltar, a prototype tool that infers kernel data structure invariants and uses them to detect rootkits. Experiments show that Gibraltar can effectively detect previously known rootkits, including those that modify noncontrol data structures. © 2011 IEEE.","Baliga A.; Ganapathy V.; Iftode L.","72"
"Technique","SMTP Analysis","Combining static and dynamic analysis for the detection of malicious documents","10.1145/1972551.1972555","2011","The widespread adoption of the PDF format for document exchange has given rise to the use of PDF files as a prime vector for malware propagation. As vulnerabilities in the major PDF viewers keep surfacing, effective detection of malicious PDF documents remains an important issue. In this paper we present MDScan, a standalone malicious document scanner that combines static document analysis and dynamic code execution to detect previously unknown PDF threats. Our evaluation shows that MDScan can detect a broad range of malicious PDF documents, even when they have been extensively obfuscated. Copyright © 2011 ACM.","Tzermias Z.; Sykiotakis G.; Polychronakis M.; Markatos E.P.","94"
"Technique","String Analysis","Exploring network-based malware classification","10.1109/MALWARE.2011.6112321","2011","Over the last years, dynamic and static malware analysis techniques have made significant progress. Majority of the existing analysis systems primarily focus on internal host activity. In spite of the importance of network activity, only a limited set of analysis tools have recently started taking it into account. In this work, we study the value of network activity for malware classification by various antivirus products. Specifically, we ask the following question: How well can we classify malware according to network activity? We monitor the execution of a malware sample in a controlled environment and summarize the obtained high-level network information in a graph. We then analyze graphs similarity to determine whether such high-level behavioral profile is sufficient to provide accurate classification of mal-ware samples. The experimental study on a real-world mal-ware collection demonstrates that our approach is able to group malware samples that behave similarly. © 2011 IEEE.","Stakhanova N.; Couture M.; Ghorbani A.A.","14"
"Technique","Timing Analysis","Exploring network-based malware classification","10.1109/MALWARE.2011.6112321","2011","Over the last years, dynamic and static malware analysis techniques have made significant progress. Majority of the existing analysis systems primarily focus on internal host activity. In spite of the importance of network activity, only a limited set of analysis tools have recently started taking it into account. In this work, we study the value of network activity for malware classification by various antivirus products. Specifically, we ask the following question: How well can we classify malware according to network activity? We monitor the execution of a malware sample in a controlled environment and summarize the obtained high-level network information in a graph. We then analyze graphs similarity to determine whether such high-level behavioral profile is sufficient to provide accurate classification of mal-ware samples. The experimental study on a real-world mal-ware collection demonstrates that our approach is able to group malware samples that behave similarly. © 2011 IEEE.","Stakhanova N.; Couture M.; Ghorbani A.A.","14"
"Technique","Automated Analysis","Deobfuscation of virtualization-obfuscated software: A semantics-based approach","10.1145/2046707.2046739","2011","When new malware are discovered, it is important for researchers to analyze and understand them as quickly as possible. This task has been made more difficult in recent years as researchers have seen an increasing use of virtualization-obfuscated malware code. These programs are difficult to comprehend and reverse engineer, since they are resistant to both static and dynamic analysis techniques. Current approaches to dealing with such code first reverse-engineer the byte code interpreter, then use this to work out the logic of the byte code program. This outside-in approach produces good results when the structure of the interpreter is known, but cannot be applied to all cases. This paper proposes a different approach to the problem that focuses on identifying instructions that affect the observable behavior of the obfuscated code. This inside-out approach requires fewer assumptions, and aims to complement existing techniques by broadening the domain of obfuscated programs eligible for automated analysis. Results from a prototype tool on real-world malicious code are encouraging. © 2011 ACM.","Coogan K.; Lu G.; Debray S.","110"
"Technique","Simulated Annealing","Improved call graph comparison using simulated annealing","10.1145/1982185.1982509","2011","The amount of suspicious binary executables submitted to Anti-Virus (AV) companies are in the order of tens of thousands per day. Current hash-based signature methods are easy to deceive and are inefficient for identifying known malware that have undergone minor changes. Examining malware executables using their call graphs view is a suitable approach for overcoming the weaknesses of hash-based signatures. Unfortunately, many operations on graphs are of high computational complexity. One of these is the Graph Edit Distance (GED) between pairs of graphs, which seems a natural choice for static comparison of malware. We demonstrate how Simulated Annealing can be used to approximate the graph edit distance of call graphs, while outperforming previous approaches both in execution time and solution quality. Additionally, we experiment with opcode mnemonic vectors to reduce the problem size and examine how Simulated Annealing is affected. © 2011 ACM.","Kostakis O.; Kinable J.; Mahmoudi H.; Mustonen K.","37"
"Technique","Random Erasing","Proceedings - 35th Annual IEEE International Computer Software and Applications Conference Workshops, COMPSACW 2011","","2011","The proceedings contain 88 papers. The topics discussed include: fuzzy control-based software self-adaptation: a case study in mission critical systems; a sufficient condition for parameters estimation in dynamic random testing; distributed monitoring and adaptation of multiple QoS in service-based systems; policies to enable serving untrusted services on alternative (non-3GPP) and untrusted access networks in EPS; a framework for the management of operator policies and user preferences for service compositions in the IP multimedia subsystem; IMS threat and attack surface analysis using common vulnerability scoring system; IMS/NGN service lab: testbed for creating innovative IMS/NGN service applications; test-driving static analysis tools in search of C code vulnerabilities; adaptive rule-based malware detection employing learning classifier systems: a proof of concept; and secure communication via shared knowledge and a salted hash in ad-hoc environments.","","0"
"Technique","WMI Analysis","Toward extracting malware features for classification using static and dynamic analysis","","2012","Because of a great many malware, they must be classified into malware family before being analyzed manually. Otherwise, we cannot analyze and handle them in real time. By classifying them, we can analyze only some unknown malwares intensively. In this paper, we propose a framework for malware classification using static and dynamic analysis. We focus on techniques that extract malware features. We name the framework GATTACA(Genome-based ATTACk geneAlogy) from the movie that covers genome of human. We define features of Malware as Mal-DNA(Malware DNA). Mal-DNA includes static, hybrid and dynamic characteristics. In short, GATTACA is the framework for extracting Mal-DNA from malwares and classifying them. GATTACA consists of three components: (1) START(STatic Analyzer using vaRious Techniques) extracts static Mal-DNA of malware. (2) DeBON(Debugging-based Behavior mOnitor and aNalyzer) extracts hybrid and dynamic Mal-DNA of them. (3) CLAM(CLassifier using Mal-DNA) classifies malwares based on Mal-DNA using machine learning. START and DeBON extract Mal-DNA, and CLAM classifies malwares based on Mal-DNA. In this paper, we target on START and DeBON extracting Mal-DAN from malwares. © 2012 AICIT.","Choi Y.H.; Han B.J.; Bae B.C.; Oh H.G.; Sohn K.W.","24"
"Technique","Self-Supervised Learning","AISec'12 - Proceedings of the ACM Workshop on Security and Artificial Intelligence","","2012","The proceedings contain 10 papers. The topics discussed include: improving malware classification: bridging the static/dynamic gap; early detection of malicious behavior in JavaScript code; an information theoretic framework for web inference detection; learning stateful models for network honeypots; nonparametric semi-supervised learning for network intrusion detection: combining performance improvements with realistic in-situ training; robust detection of comment spam using entropy rate; understanding the time-series behavioral characteristics of evolutionally advanced email spammers; tracking concept drift in malware families; autonomous learning for detection of JavaScript attacks: vision or reality?; and on the effectiveness of using state-of-the-art machine learning techniques to launch cryptographic distinguishing attacks.","","0"
"Technique","Semi-Supervised Learning","AISec'12 - Proceedings of the ACM Workshop on Security and Artificial Intelligence","","2012","The proceedings contain 10 papers. The topics discussed include: improving malware classification: bridging the static/dynamic gap; early detection of malicious behavior in JavaScript code; an information theoretic framework for web inference detection; learning stateful models for network honeypots; nonparametric semi-supervised learning for network intrusion detection: combining performance improvements with realistic in-situ training; robust detection of comment spam using entropy rate; understanding the time-series behavioral characteristics of evolutionally advanced email spammers; tracking concept drift in malware families; autonomous learning for detection of JavaScript attacks: vision or reality?; and on the effectiveness of using state-of-the-art machine learning techniques to launch cryptographic distinguishing attacks.","","0"
"Technique","Hash Function Identification","Aligot: Cryptographic function identification in obfuscated binary programs","10.1145/2382196.2382217","2012","Analyzing cryptographic implementations has important applications, especially for malware analysis where they are an integral part both of the malware payload and the unpacking code that decrypts this payload. These implementations are often based on well-known cryptographic functions, whose description is publicly available. While potentially very useful for malware analysis, the identification of such cryptographic primitives is made difficult by the fact that they are usually obfuscated. Current state-of-the-art identification tools are ineffective due to the absence of easily identifiable static features in obfuscated code. However, these implementations still maintain the input-output (I/O) relationship of the original function. In this paper, we present a tool that leverages this fact to identify cryptographic functions in obfuscated programs, by retrieving their I/O parameters in an implementation-independent fashion, and comparing them with those of known cryptographic functions. In experimental evaluation, we successfully identi fied the cryptographic functions TEA, RC4, AES and MD5 both in synthetic examples protected by a commercial-grade packer (AsProtect), and in several obfuscated malware samples (Sality, Waledac, Storm Worm and SilentBanker). In addition, our tool was able to recognize basic operations done in asymmetric ciphers such as RSA. Copyright © 2012 ACM.","Calvet J.; Fernandez J.M.; Marion J.-Y.","72"
"Technique","Angr Symbolic Execution","An optimized program analysis based on constraint logic programming","10.4156/jcit.vol7.issue8.20","2012","Dynamic symbolic execution is the key technique in program security analysis. It has been widely used in the domain of test case generation, malware analysis, and vulnerability exploration. However, there are several problems in the process of dynamic symbolic execution, such as symbolic address, system call, and path selection. In this paper, an improved pointer analysis based on constraint logic programming is proposed, which can explore the aliasing problem due to the symbol address analysis, and point-to analysis and specific constraints are used to improve the precise of pointer analysis. The experimental results indicate the effectiveness of the designed method, which can reduce the size of point-to set and generate optimized test cases.","Guo X.; Zhang H.; Zhao B.; Li J.","2"
"Technique","Symbolic Execution","Malicious hidden-code extracting based on environment-sensitive analysis","10.3724/SP.J.1016.2012.00693","2012","Code packing is an obfuscation technique to protect against reverse engineering, but it is commonly used to hide malicious code from virus detection as well. Environment-sensitive packing techniques are able to check whether the run-time environment is suspicious, then malware can dynamically change the unpacking behaviors according to the environment. While many unpacking tools were proposed, such as static unpackers and dynamic unpackers, the existing solutions are either unable to handle unknown packing techniques, or vulnerable to various environment-sensitive techniques. In this paper, we propose a new unpacking approach based on environment-sensitive analysis. Our approach precisely tracks the flow of environment-sensitive data, then symbolically evaluates the recorded trace and gathers path constraints on environment-sensitive data. Using the collected path constraints, we can deduce the dependence of the packed malware's control flow on run-time environment then remove the environmental sensitivity of the malware. To demonstrate its effectiveness, we present a prototype system, called MalUnpack, and apply it to 321 in the wild packed malware samples. The experimental results show that MalUnpack can effectively identify and unpack 89.1% of the malware samples, while the number of using dynamic unpackers without environment-sensitive analysis is 35.5%, and the number of using signature-based unpacker is only 28.0%.","Wang Z.; Jia C.-F.; Lu K.","5"
"Technique","Data Flow Analysis","Malware detection in smart phones using static detection and evaluation model based on analytic hierarchy process","","2012","Mobile malware is rapidly increasing and its detection has become a critical issue. In this study, we summarize the common characteristics of this malicious software on Android platform. We design a detection engine consisting of six parts: decompile, grammar parsing, control flow and data flow analysis, safety analysis, and comprehensive evaluation. In the comprehensive evaluation, we obtain a weight vector of 29 evaluation indexes using the analytic hierarchy process. During this process, the detection engine exports a list of suspicious API. On the basis of this list, the evaluation part of the engine performs a comprehensive evaluation of the hazard assessment of software sample. Finally, hazard classification is given for the software. The false positive rate of our approach for detecting malware samples is 4.7% and normal samples is 7.6%. The experimental results show that the accuracy rate of our approach is almost similar to the method based on virus signatures. Compared with the method based on virus signatures, our approach performs well in detecting unknown malware. This approach is promising for the application of malware detection.","Zhang M.; Yang Y.; Cheng G.; Dong H.; Li C.","4"
"Technique","Domain Generation Algorithm","From throw-away traffic to bots: Detecting the rise of DGA-based malware","","2012","Many botnet detection systems employ a blacklist of known command and control (C&C) domains to detect bots and block their traffic. Similar to signature-based virus detection, such a botnet detection approach is static because the blacklist is updated only after running an external (and often manual) process of domain discovery. As a response, botmasters have begun employing domain generation algorithms (DGAs) to dynamically produce a large number of random domain names and select a small subset for actual C&C use. That is, a C&C domain is randomly generated and used for a very short period of time, thus rendering detection approaches that rely on static domain lists ineffective. Naturally, if we know how a domain generation algorithm works, we can generate the domains ahead of time and still identify and block botnet C&C traffic. The existing solutions are largely based on reverse engineering of the bot malware executables, which is not always feasible. In this paper we present a new technique to detect randomly generated domains without reversing. Our insight is that most of the DGA-generated (random) domains that a bot queries would result in Non-Existent Domain (NXDomain) responses, and that bots from the same botnet (with the same DGA algorithm) would generate similar NXDomain traffic. Our approach uses a combination of clustering and classification algorithms. The clustering algorithm clusters domains based on the similarity in the make-ups of domain names as well as the groups of machines that queried these domains. The classification algorithm is used to assign the generated clusters to models of known DGAs. If a cluster cannot be assigned to a known model, then a new model is produced, indicating a new DGA variant or family. We implemented a prototype system and evaluated it on real-world DNS traffic obtained from large ISPs in North America. We report the discovery of twelve DGAs. Half of them are variants of known (botnet) DGAs, and the other half are brand new DGAs that have never been reported before. Copyright © 2019 21st USENIX Security Symposium. All rights reserved.","Antonakakis M.; Perdisci R.; Nadji Y.; Vasiloglou N.; Abu-Nimeh S.; Lee W.; Dagon D.","454"
"Technique","Canny Edge Detection","Toward a general defense against kernel queue hooking attacks","10.1016/j.cose.2011.12.007","2012","Kernel queue hooking (KQH) attacks achieve stealthy malicious function execution by embedding malicious hooks in dynamic kernel schedulable queues (K-Queues). Because they keep kernel code and persistent hooks intact, they can evade detection of state-of-the-art kernel integrity monitors. Moreover, they have been used by advanced malware such as the Rustock spam bot to achieve malicious goals. In this paper, we present a systematic defense against such novel attacks. We propose the Precise Lookahead Checking of function Pointers approach that checks the legitimacy of pending K-Queue callback requests by proactively checking function pointers that may be invoked by the callback function. To facilitate the derivation of specifications for any K-Queue, we build a unified static analysis framework and a toolset that can derive from kernel source code properties of legitimate K-Queue requests and turn them into source code for the runtime checker. We implement proof-of-concept runtime checkers for four K-Queues in Linux and perform a comprehensive experimental evaluation of these checkers, which shows that our defense is effective against KQH attacks. © 2011 Elsevier Ltd. All rights reserved.","Wei J.; Pu C.","5"
"Technique","Debugger Detection","Malware analysis with multiple features","10.1109/UKSim.2012.40","2012","Malware analysis process is being categorized into static analysis and dynamic analysis. Both static and dynamic analysis have their own strengths and weaknesses. In this paper, we present a tool written in Python programming language called as pingaji, which could assist the work of malware analyst to get the static features of malware. pingaji contains several modules - Application Programming Interface (API) calls extractor, binary entropy information, anti virtual machine and anti debugger detector and XOR encrypted strings decrypt or. pingaji was developed in order to assist our work in getting malware features. pingaji is focusing on ripping Microsoft Windows executable binaries' malicious features. © 2012 IEEE.","Zabidi M.N.A.; Maarof M.A.; Zainal A.","19"
"Technique","Context-Sensitive Analysis","Malicious hidden-code extracting based on environment-sensitive analysis","10.3724/SP.J.1016.2012.00693","2012","Code packing is an obfuscation technique to protect against reverse engineering, but it is commonly used to hide malicious code from virus detection as well. Environment-sensitive packing techniques are able to check whether the run-time environment is suspicious, then malware can dynamically change the unpacking behaviors according to the environment. While many unpacking tools were proposed, such as static unpackers and dynamic unpackers, the existing solutions are either unable to handle unknown packing techniques, or vulnerable to various environment-sensitive techniques. In this paper, we propose a new unpacking approach based on environment-sensitive analysis. Our approach precisely tracks the flow of environment-sensitive data, then symbolically evaluates the recorded trace and gathers path constraints on environment-sensitive data. Using the collected path constraints, we can deduce the dependence of the packed malware's control flow on run-time environment then remove the environmental sensitivity of the malware. To demonstrate its effectiveness, we present a prototype system, called MalUnpack, and apply it to 321 in the wild packed malware samples. The experimental results show that MalUnpack can effectively identify and unpack 89.1% of the malware samples, while the number of using dynamic unpackers without environment-sensitive analysis is 35.5%, and the number of using signature-based unpacker is only 28.0%.","Wang Z.; Jia C.-F.; Lu K.","5"
"Technique","Template Matching","Binary function clustering using semantic hashes","10.1109/ICMLA.2012.70","2012","The ability to identify semantically-related functions, in large collections of binary executables, is important for malware detection. Intuitively, two pieces of code are similar if they have the same effect on a machine's state. Current state-of-the-art tools employ a variety of pair wise comparisons (e.g., template matching using SMT solvers, Value-Set analysis at critical program points, API call matching, etc.) However, these methods are unshakable for clustering large datasets, of size N, since they require O(No2) comparisons. In this paper, we present an alternative approach based upon 'hashing'. We propose a scheme that captures the semantics of functions as semantic hashes. Our approach treats a function as a set of features, each of which represent the input-output behavior of a basic block. Using a form of locality-sensitive hashing known as Min Hashing, functions with many common features can be quickly identified, and the complexity of clustering is reduced to O(N). Experiments on functions extracted from the CERT malware catalog indicate that we are able to cluster closely related code with a low false positive rate. © 2012 IEEE.","Jin W.; Chaki S.; Cohen C.; Gurfinkel A.; Havrilla J.; Hines C.; Narasimhan P.","46"
"Technique","Mutual Information","Malware detection by text and data mining","10.1109/ICCIC.2013.6724229","2013","Cyber frauds are a major security threat to the banking industry worldwide. Malware is one of the manifestations of cyber frauds. Malware authors use Application Programming Interface (API) calls to perpetrate these crimes. In this paper, we propose a static analysis method to detect Malware based on API call sequences using text and data mining in tandem. We analyzed the dataset available at CSMINING group. First, we employed text mining to extract features from the dataset consisting a series of API calls. Further, mutual information is invoked for feature selection. Then, we resorted to over-sampling to balance the data set. Finally, we employed various data mining techniques such as Decision Tree (DT), Multi Layer Perceptron (MLP), Support Vector Machine (SVM), Probabilistic Neural Network (PNN) and Group Method for Data Handling (GMDH). We also applied One Class SVM (OCSVM). Throughout the paper, we used 10-fold cross validation technique for testing the techniques. We observed that SVM and OCSVM achieved 100% sensitivity after balancing the dataset. © 2013 IEEE.","Sundarkumar G.G.; Ravi V.","13"
"Technique","Image Classification Models","FENOC: An ensemble one-class learning framework for malware detection","10.1109/CIS.2013.116","2013","Nowadays, machine learning based methods are among the most popular ones for malware detection. However, most of the previous works use a single type of features, dynamic or static, and take them to build a binary classification model. These methods have limited ability to depict characteristic malware behaviors and suffer from insufficiently sampled benign samples and extremely imbalanced training dataset. In this paper, we present FENOC, an ensemble one-class learning framework for malware detection. FENOC uses hybrid features from multiple semantic layers to ensure comprehensive insights of analyzed programs, and constructs detection model via CosTOC (Cost-sensitive Twin One-class Classifier), a novel one-class learning algorithm, which uses a pair of one-class classifiers to describe malware class and benign program class respectively. CosTOC is more flexible and robust when handling malware detection problems, which is imbalanced and need low false positive rate. Meanwhile, a random subspace ensemble method is used to enhance the generalization ability of CosTOC. Experimental results show that to detect unknown malware, FENOC has a higher detection rate and a lower false positive rate, especially in the situations that training datasets are imbalanced. © 2013 IEEE.","Liu J.; Song J.; Miao Q.; Cao Y.","10"
"Technique","Header Analysis","A heuristics-based static analysis approach for detecting packed PE binaries","10.14257/ijsia.2013.7.5.24","2013","Malware authors evade the signature based detection by packing the original malware using custom packers. In this paper, we present a static heuristics based approach for the detection of packed executables. We present 1) the PE heuristics considered for analysis and taxonomy of heuristics; 2) a method for computing the score using power distance based on weights and risks assigned to the defined heuristics; and 3) classification of packed executable based on the threshold obtained with the training data set, and the results achieved with the test data set. The experimental results show that our approach has a high detection rate of 99.82% with a low false positive rate of 2.22%. We also bring out difficulties in detecting packed DLL, CLR and Debug mode executables via header analysis. © 2013 SERSC.","Arora R.; Singh A.; Pareek H.; Edara U.R.","12"
"Technique","Memory Forensics","Research in Attacks, Intrusions, and Defenses - 16th International Symposium, RAID 2013, Proceedings","","2013","The proceedings contain 22 papers. The topics discussed include: a primitive for revealing stealthy peripheral-based attacks on the computing platform's main memory; hypervisor memory forensics; server-side code injection attacks: a historical perspective; check my profile: leveraging static analysis for fast and accurate detection of ROP gadgets; systematic analysis of defenses against return-oriented programming; deobfuscating embedded malware using probable-plaintext attacks; detecting traditional packers, decisively; side-channel attacks on the yubikey 2 one-time password generator; active credential leakage for observing web-based attack cycle; behavior decomposition: aspect-level browser extension clustering and its security implications; tamper-resistant likejacking protection; deconstructing the assessment of anomaly-based intrusion detectors; practical context-aware permission control for hybrid mobile applications; mobile malware detection based on energy fingerprints - a dead end?; and holiday pictures or blockbuster movies? insights into copyright infringement in user uploads to one-click file hosters.","","0"
"Technique","Attention Mechanisms","Rapid permissions-based detection and analysis of mobile malware using random decision forests","10.1109/MILCOM.2013.170","2013","The explosion in mobile malware has led to the need for early, rapid detection mechanisms that can detect malware and identify risky applications prior to their deployment on end-user devices without the high cost of manual static and dynamic analysis. Previous work has shown that specific combinations of Android permissions, intents, broadcast receivers, native code and embedded applications can be effectively used to identify potentially malicious applications. We extend this work by using frequent combinations of such attributes as training features for random decision forest classification of malicious and benign applications. We demonstrate that using combinations of frequently-occuring permissions in this manner significantly improves previous results, and provides true positive rates in excess of 90% while maintaining tractable false positive rates. This is true even with novel malware that is not reliably detected at the time of release by conventional anti-malware tools. In addition, the auxiliary information generated by the random decision forest algorithm provides useful insights into the key indicators of malicious activity and the functionality of the associated malware. © 2013 IEEE.","Glodek W.; Harang R.","37"
"Technique","Fuzzing","Proceedings of the 2013 IEEE Symposium on Computational Intelligence in Cyber Security, CICS 2013 - 2013 IEEE Symposium Series on Computational Intelligence, SSCI 2013","","2013","The proceedings contain 10 papers. The topics discussed include: quantifying encircling behaviour in complex networks; evolving OWA operators for cyber security decision making problems; indoor geo-fencing and access control for wireless networks; higher dimensional chaos for audio encryption; what defines an intruder? an intelligent approach; applications of computational intelligence for static software checking against memory corruption vulnerabilities; image visualization based malware detection; a novel hybrid-network intrusion detection system (H-NIDS) in cloud computing; resilient hybrid overlay model for smart grid: RHM for smart grid; and evolving indigestible codes: fuzzing interpreters with genetic programming.","","0"
"Technique","Bagging Techniques","Rule-based anti-anti-debugging system","10.1145/2513228.2513301","2013","Anti-debugging technology refers to various ways of preventing binary files from being analyzed in debuggers or other virtual machine environments. If binary files conceal or modify themself using anti-debugging techniques, analyzing these binary files becomes harder. There are some anti-anti-debugging techniques proposed so far, but malware developers make dynamic analysis difficult using various ways, such as execution time delay, debugger detection techniques and so on. In this paper, we propose a rule-based system that can avoid anti-debugging techniques in binary files, and showed several samples of anti-debugging applications and how to detect and patch anti-debugging techniques in common utilities or malicious code effectively. © 2013 Authors.","Lee J.; Kang B.; Im E.G.","5"
"Technique","Genetic Programming","Proceedings of the 2013 IEEE Symposium on Computational Intelligence in Cyber Security, CICS 2013 - 2013 IEEE Symposium Series on Computational Intelligence, SSCI 2013","","2013","The proceedings contain 10 papers. The topics discussed include: quantifying encircling behaviour in complex networks; evolving OWA operators for cyber security decision making problems; indoor geo-fencing and access control for wireless networks; higher dimensional chaos for audio encryption; what defines an intruder? an intelligent approach; applications of computational intelligence for static software checking against memory corruption vulnerabilities; image visualization based malware detection; a novel hybrid-network intrusion detection system (H-NIDS) in cloud computing; resilient hybrid overlay model for smart grid: RHM for smart grid; and evolving indigestible codes: fuzzing interpreters with genetic programming.","","0"
"Technique","Behavioral Clustering","A scalable implementation of malware detection based on network connection behaviors","10.1109/CyberC.2013.19","2013","When hundreds of thousands of applications need to be analyzed within a short period of time, existing static and dynamic malware detection methods may become less desirable because they could quickly exhaust system and human resources. Additionally, many behavioral malware detection methods may not be practical because they require the collection of applications' system-level and network-level activities, which may not always be available. In this paper, we propose a malware behavioral clustering approach to detect malware variants based on applications' simple network connection data, which can be easily collected from antivirus (AV) products. This approach is highly scalable and has been used on huge volumes of real-world data. Our experiments demonstrate that, at a false positive rate lower than 0.001%, the proposed method achieved a detection rate of 80%+ in identifying spambots and achieved a 50%+ detection rate on average when detecting 3 popular malware families. In addition, the proposed method was deployed in a real environment and it detected malware instances more than one week earlier on average than two other leading AV products. © 2013 IEEE.","Shi L.; Que J.; Zhong Z.; Meyer B.; Crenshaw P.; He Y.","4"
"Technique","Naive Bayes Classification","New Android malware detection approach using Bayesian classification","10.1109/AINA.2013.88","2013","Mobile malware has been growing in scale and complexity as smartphone usage continues to rise. Android has surpassed other mobile platforms as the most popular whilst also witnessing a dramatic increase in malware targeting the platform. A worrying trend that is emerging is the increasing sophistication of Android malware to evade detection by traditional signature-based scanners. As such, Android app marketplaces remain at risk of hosting malicious apps that could evade detection before being downloaded by unsuspecting users. Hence, in this paper we present an effective approach to alleviate this problem based on Bayesian classification models obtained from static code analysis. The models are built from a collection of code and app characteristics that provide indicators of potential malicious activities. The models are evaluated with real malware samples in the wild and results of experiments are presented to demonstrate the effectiveness of the proposed approach. © 2013 IEEE.","Suleiman Y.; Sezer S.; McWilliams G.; Muttik I.","222"
"Technique","Shape Analysis","Detection of Intrusions and Malware, and Vulnerability Assessment - 9th International Conference, DIMVA 2012, Revised Selected Papers","","2013","The proceedings contain 14 papers. The topics discussed include: using file relationships in malware classification; understanding DMA malware; large-scale analysis of malware downloaders; Juxtapp: a scalable system for detecting code reuse among Android applications; ADAM: an automatic and extensible platform to stress test android anti-virus systems; a static, packer-agnostic filter to detect similar malware samples; experiments with malware visualization; tracking memory writes for malware classification and code reuse identification; system-level support for intrusion recovery; NetGator: malware detection using program interactive challenges; SmartProxy: secure smartphone-assisted login on compromised machines; BISSAM: automatic vulnerability identification of office documents; self-organized collaboration of distributed IDS sensors; and shedding light on log correlation in network forensics analysis.","","0"
"Technique","Cross-Validation Techniques","Malware detection by text and data mining","10.1109/ICCIC.2013.6724229","2013","Cyber frauds are a major security threat to the banking industry worldwide. Malware is one of the manifestations of cyber frauds. Malware authors use Application Programming Interface (API) calls to perpetrate these crimes. In this paper, we propose a static analysis method to detect Malware based on API call sequences using text and data mining in tandem. We analyzed the dataset available at CSMINING group. First, we employed text mining to extract features from the dataset consisting a series of API calls. Further, mutual information is invoked for feature selection. Then, we resorted to over-sampling to balance the data set. Finally, we employed various data mining techniques such as Decision Tree (DT), Multi Layer Perceptron (MLP), Support Vector Machine (SVM), Probabilistic Neural Network (PNN) and Group Method for Data Handling (GMDH). We also applied One Class SVM (OCSVM). Throughout the paper, we used 10-fold cross validation technique for testing the techniques. We observed that SVM and OCSVM achieved 100% sensitivity after balancing the dataset. © 2013 IEEE.","Sundarkumar G.G.; Ravi V.","13"
"Technique","Instruction Overlapping","A new instruction overlapping technique for anti-disassembly and obfuscation of x86 binaries","10.1109/WATeR.2013.6707878","2013","The problem of correctly recovering assembly instructions from a binary has received much attention and both malware and license validation code often relies on various anti-disassembly techniques in order to complicate analysis. One well-known anti-disassembly technique is to use overlapping code such that the disassembler starts decoding from an incorrect byte, but still recovers valid code. The actual code which is supposed to be executed is instead hidden inside a decoy instruction, and is overlapped with the disassembled code. We propose and investigate a new novel anti-disassembly method that allows for exceptional flexibility in the hidden instructions, while at the same time providing a disassembled main path that is executable. This allows the approach to be very efficient against static linear sweep disassembly, but also to be more difficult to detect using dynamic analysis methods. The idea is to utilize highly redundant instructions, e.g., multibyte no-operation instructions, and embed the hidden code in the configurable portions of those instructions. By carefully selecting wrapping instructions, providing overlaps, the hidden execution path can be crafted with great flexibility. We also provide a detection-algorithm, together with testing results, for testing software such that the hidden execution path can be identified. © 2013 IEEE.","Jamthagen C.; Lantz P.; Hell M.","13"
"Technique","K-Nearest Neighbors","Mining api calls and permissions for android malware detection","10.1007/978-3-319-12280-9_13","2014","The popularity of Android platform is increasing very sharply due to the large market share of Android and openness in nature. The increased popularity is making Android an enticing target for malwares. A worrying trend that is alarming is the increasing sophistication of Android malware to evade detection by traditional signature based scanners. Several approaches have been proposed in literature for Android malware detection. However, most of them are less effective in terms of true positive rate and involves computational overheads. In this paper, we propose an effective approach to attenuate the problem of Android malware detection using static code analysis based models. The proposed models, in this paper, are built to capture features relevant to malware behaviour based on API calls as well as permissions present in various Android applications. Thereafter, models are evaluated using Naive Bayesian as well as K-Nearest Neighbour classifiers. Proposed models are able to detect real malwares in the wild and achieve an accuracy of 95.1% and true positive rate with highest value one. © Springer International Publishing Switzerland 2014.","Sharma A.; Dash S.K.","43"
"Technique","Particle Swarm Optimization","Android malware classification using static code analysis and Apriori algorithm improved with particle swarm optimization","10.1109/WICT.2014.7077314","2014","Several machine learning techniques based on supervised learning have been adopted in the classification of malware. However, only supervised learning techniques have proofed insufficient for malware classification task. This paper presents a classification of android malware using candidate detectors generated from an unsupervised association rule of Apriori algorithm improved with particle swarm optimization to train three different supervised classifiers. In this method, features were extracted from Android applications byte-code through static code analysis, selected and were used to train supervised classifiers. Using a number of candidate detectors, the true positive rate of detecting malicious code is maximized, while the false positive rate of wrongful detection is minimized. The results of the experiments show that the proposed combined technique has remarkable benefits over the detection using only supervised or unsupervised learners. © 2014 IEEE.","Adebayo O.S.; Abdulaziz N.","14"
"Technique","Multi-View Learning","Malware phylogenetics based on the multiview graphical lasso","10.1007/978-3-319-12571-8","2014","Malware phylogenetics has gained a lot of traction over the past several years. More recently, researchers have begun looking at directed acyclic graphs (DAG) to model the evolutionary relationships between samples of malware. Phylogenetic graphs offer analysts a better understanding of how malware has evolved by clearly illustrating the lineage of a given family. In this paper, we present a novel algorithm based on graphical lasso. We extend graphical lasso to incorporate multiple views, both static and dynamic, of malware. For each program family, a convex combination of the views is found such that the objective function of graphical lasso is maximized. Learning the weights of each view on a per-family basis, as opposed to treating all views as an extended feature vector, is essential in the malware domain because different families employ different obfuscation strategies which limits the information of different views. We demonstrate results on three malicious families and two benign families where the ground truth is known. © 2014 Springer International Publishing Switzerland.","Anderson B.; Lane T.; Hash C.","15"
"Technique","Mann-Whitney U Test","X-ANOVA and X-Utest features for Android malware analysis","10.1109/ICACCI.2014.6968608","2014","In this paper we proposed a static analysis framework to classify the android malware. The three different feature likely (a) opcode (b) method and (c) permissions are extracted from the each android.apk file. The dominant attributes are aggregated by modifying two different ranked feature methods such as ANOVA to Extended ANOVA (X-ANOVA) and Wann-Whiteney U-test to Extended U-Test (X-U-Test). These two statistical feature ranking methods retrieve the significant features by removing the irrelevant attributes based on their score. Accuracy of the proposed system is computed by using three different classifiers (J48, ADAboost and Random forest) as well as voted classification technique. The X-U-Test exhibits better accuracy results compared with X-ANOVA. The highest accuracy 89.36% is obtained with opcode while applying X-U-Test and X-ANOVA shows high accuracy of 87.81% in the case of method as a feature. The permission based model acquired highest accuracy in independent (90.47%) and voted (90.63%) classification model. © 2014 IEEE.","Raphael R.; Vinod P.; Omman B.","4"
"Technique","Privilege Analysis","Mobile app security analysis with the MAVeriC static analysis","","2014","The success of the mobile application model is mostly due to the ease with which new applications are uploaded by developers, distributed through the application markets (e.g. Google Play), and installed by users. Yet, the very same model is cause of serious security concerns, since users have no or little means to ascertain the trustworthiness of the applications they install on their devices. Such concerns grow up when dealing with professional scenarios like the use of mobile devices within organisations. To protect their customers, Poste Italiane has defined the Mobile Application Verification Cluster (MAVeriC), a process for the systematic security analysis of third-party mobile apps leveraging their online services (e.g. home banking, parcel tracking). MAVeriC is an ongoing project that will be completed in the next few years. At the core of the MAVeriC project lies the Static Analysis Module (SAM), a toolkit that supports automatic static analysis of mobile applications by automating a number of operations including reverse engineering, privilege analysis and automatic verification of security properties. In this paper we present the SAM that has been fully developed and tested. We introduce the functionalities of SAM through a demonstration of the platform applied to real Android applications. © 2014 Innovative Information Science and Technology Research Group. All rights reserved.","Armando A.; Bocci G.; Chiarelli G.; Costa G.; De Maglie G.; Mammoliti R.; Merlo A.","7"
"Technique","Rule-Based Scanning","Analysis of Bayesian classification-based approaches for Android malware detection","10.1049/iet-ifs.2013.0095","2014","Mobile malware has been growing in scale and complexity spurred by the unabated uptake of smartphones worldwide. Android is fast becoming the most popular mobile platform resulting in sharp increase in malware targeting the platform. Additionally, Android malware is evolving rapidly to evade detection by traditional signature-based scanning. Despite current detection measures in place, timely discovery of new malware is still a critical issue. This calls for novel approaches to mitigate the growing threat of zero-day Android malware. Hence, the authors develop and analyse proactive machine-learning approaches based on Bayesian classification aimed at uncovering unknown Android malware via static analysis. The study, which is based on a large malware sample set of majority of the existing families, demonstrates detection capabilities with high accuracy. Empirical results and comparative analysis are presented offering useful insight towards development of effective static-analytic Bayesian classification-based solutions for detecting unknown Android malware. © 2013 The Institution of Engineering and Technology.","Yerima S.Y.; Sezer S.; McWilliams G.","136"
"Technique","Data Dependency Analysis","Control dependency analyses for detecting remote control Android malware","","2014","A method is given to detect remote control Android malware using a control dependency analysis based on real-world malware characteristics. The malware is detected using dynamic taint analysis. An extended dynamic taint analysis method is used to detect remote control malware. A static analysis is used first to identify the control range of the conditional instructions, and the static instrumentation technique insered into the target application to track the control dependence. The instrumented application can then check whether the current sensitive operation depends on the tainted data at runtime. Then users can then effectively analyze and detect remote control malware. A prototype system based on the method shows that this method effectively detects real remote control malware.","Li J.; Liang B.; You W.; Wang P.; Shi W.","0"
"Technique","P2P Analysis","Droidanalyst: Synergic app framework for static and dynamic app analysis","10.1007/978-3-319-26450-9_20","2015","Evolution of mobile devices, availability of additional resources coupled with enhanced functionality has leveraged smartphone to substitute the conventional computing devices. Mobile device users have adopted smartphones for online payments, sending emails, social networking, and stores the user sensitive information. The ever increasing mobile devices has attracted malware authors and cybercriminals to target mobile platforms. Android, the most popular open source mobile OS is being targeted by the malware writers. In particular, less monitored third party markets are being used as infection and propagation sources. Given the threats posed by the increasing number of malicious apps, security researchersmust be able to analyze the malware quickly and efficiently; this may not be feasible with the manual analysis. Hence, automated analysis techniques for app vetting and malware detection are necessary. In this chapter, we present DroidAnalyst, a novel automated app vetting and malware analysis framework that integrates the synergy of static and dynamic analysis to improve accuracy and efficiency of analysis. DroidAnalyst generates a unified analysis model that combines the strengths of the complementary approaches with multiple detection methods, to increase the app code analysis. We have evaluated our proposed solution DroidAnalyst against a reasonable dataset consisting real-world benign and malware apps. © Springer International Publishing Switzerland 2016.","Faruki P.; Bhandari S.; Laxmi V.; Gaur M.; Conti M.","19"
"Technique","Network Traffic Analysis","A real-time android malware detection system based on network traffic analysis","10.1007/978-3-319-27137-8_37","2015","Mobile devices are everywhere nowadays, such as mobile phone, mobile tablets. Meanwhile, various malwares on mobile terminals are emerging one after another, especially on the open-source Android system. Traditional detection schemes are based on static method or dynamic method. In recent years, industry and academia have paid close attention to the detection mechanisms using network behaviors to identify the malware. In this paper, we design a real-time Android mal- ware detection system based on network traffic analysis, which includes a training model and a real-time detection model. By training over the mal- ware traffic using the training model, we find that 76.33% DNS queries and 45.39% HTTP requests are all malicious. We set up a real-time scanning service based on the malicious URLs that are captured in the training model, which is the core of the real-time detection model. By performing malware detection using the established real-time detection model, we show that the detection rate using the real-time scanning ser- vice is much higher than the integrated service. Meanwhile, the detection rate will further improve by integrating more third-party scanning ser- vices into our system. © Springer International Publishing Switzerland 2015.","Han H.; Chen Z.; Yan Q.; Peng L.; Zhang L.","9"
"Technique","Principal Component Analysis","Singular value decomposition and metamorphic detection","10.1007/s11416-014-0220-0","2015","Metamorphic malware changes its internal structure with each infection, while maintaining its original functionality. Such malware can be difficult to detect, particularly using static analysis, since there may be no common signature across infections. In this paper, we apply a score based on Singular Value Decomposition (SVD) to the challenging problem of metamorphic detection. SVD, which can be viewed as a specific implementation of Principal Component Analysis, is a linear algebraic technique that is applicable to the wide range of problems where eigenvector analysis is useful. Previous research has shown that an eigenvector-based score derived from the facial recognition problem yields good results when applied to metamorphic malware detection. In this paper, we reconsider these previous results in the context of SVD, and we outline a strategy to defeat such a detection scheme. © 2014, Springer-Verlag France.","Jidigam R.K.; Austin T.H.; Stamp M.","27"
"Technique","Machine Learning Classification","Smart malware detection on Android","10.1002/sec.1340","2015","Nowadays, because of its increased popularity, Android is target to a growing number of attacks and malicious applications, with the purpose of stealing private information and consuming credit by subscribing to premium services. Most of the current commercial antivirus solutions use static signatures for malware detection, which may fail to detect different variants of the same malware and zero-day attacks. In this paper, we present a behavior-based, dynamic analysis security solution, called Android Malware Detection System, for detecting both well-known and zero-day malware. The proposed solution uses a machine learning classifier in order to differentiate between the behaviors of legitimate and malicious applications. In addition, it uses the application statistics for determining its reputation. The final decision is based on a combination of the classifier's result and the application reputation. The solution includes a unique and extensive set of data collectors, which gather application-specific data that describe the behavior of the monitored application. We evaluated our solution on a set of legitimate and malicious applications and obtained a high accuracy of 0.985. Our system is able to detect zero-day malware samples that are not detected by current commercial solutions. Our solution outperforms other similar solutions running on mobile devices. © 2015 John Wiley & Sons, Ltd.","Gheorghe L.; Marin B.; Gibson G.; Mogosanu L.; Deaconescu R.; Voiculescu V.-G.; Carabas M.","19"
"Technique","Input Transformation","Stealth attacks: An extended insight into the obfuscation effects on Android malware","10.1016/j.cose.2015.02.007","2015","In order to effectively evade anti-malware solutions, Android malware authors are progressively resorting to automatic obfuscation strategies. Recent works have shown, on small-scale experiments, the possibility of evading anti-malware engines by applying simple obfuscation transformations on previously detected malware samples. In this paper, we provide a large-scale experiment in which the detection performances of a high number of anti-malware solutions are tested against two different sets of malware samples that have been obfuscated according to different strategies. Moreover, we show that anti-malware engines search for possible malicious content inside assets and entry-point classes. We also provide a temporal analysis of the detection performances of anti-malware engines to verify if their resilience has improved since 2013. Finally, we show how, by manipulating the area of the Android executable that contains the strings used by the application, it is possible to deceive anti-malware engines so that they will identify legitimate samples as malware. On one hand, the attained results show that anti-malware systems have improved their resilience against trivial obfuscation techniques. On the other hand, more complex changes to the application executable have proved to be still effective against detection. Thus, we claim that a deeper static (or dynamic) analysis of the application is needed to improve the robustness of such systems. © 2015 Elsevier Ltd. All rights reserved.","Maiorca D.; Ariu D.; Corona I.; Aresu M.; Giacinto G.","142"
"Technique","Chi-Square Test","Detecting mobile malware with TMSVM","10.1007/978-3-319-23829-6_35","2015","With the rapid development of Android devices, mobile malware in Android becomes more prevalent. Therefore, it is rather important to develop an effective model for malware detection. Permissions, system calls, and control flow graphs have been proved to be important features in detection. In this paper, we utilize both static and dynamic strategies with a text classification method, TMSVM, to identify the mobile malware in these three aspects. At first, features have to be selected. Since the sum of control flow graphs is very large, Chi-Square method is used to get the key graphs. Then features are transformed into vectors and TMSVM is subsequently applied to get the classification result. In the static method, we firstly analyze permissions and control flow graphs respectively and then think of the combination of them. In the dynamic method, the system calls are considered. At last, based on the results of the static method and dynamic method, a hybrid classification model of three layers classification is proposed. Compared with the other methods, our method increases the TPR and decreases the FPR. © Institute for Computer Sciences, Social Informatics and Telecommunications Engineering 2015.","Xiao X.; Xiao X.; Jiang Y.; Li Q.","2"
"Technique","Rogue Security Software","An automated virtual security testing platform for android mobile apps","10.1109/MOBISECSERV.2015.7072877","2015","This paper proposes an automated virtual security testing platform for Android mobile apps. The testing platform includes three key components: customizing Android OS to include mobile app trace information, creating a virtual testing platform using the customized OS, and developing static and dynamic analyzing techniques for mobile malware detection. The proposed testing platform is a server-side malware detection solution. It can utilize both static and dynamic analysis and is a good compensation to the client-side mobile security software. © 2015 IEEE.","Wang Y.","4"
"Technique","Independent Component Analysis","Exploring feature extraction and ELM in malware detection for android devices","10.1007/978-3-319-25393-0_54","2015","A huge increase in the number of mobile malware brings a serious threat to Internet security, as the adoption rate of mobile device is soaring, especially Android device. A variety of researches have been developed to defense malware, but the mobile device users continuously suffer private information leak or economic losses from malware. Recently, a large number of methods have been proposed based on static or dynamic features analysis combining with machine learning methods, which are considered effective to detect malware on mobile device. In this paper, we propose an effective framework to detect malware on Android device based on feature extraction and neural network calssifier. In this framework, we take use of static features to represent malware and utilize extreme learning machine (ELM) algorithm to learn the neural network. We first extract features from the malware, and then utilize three different feature extraction methods including principal component analysis (PCA), Karhunen-Lo`eve transform (KLT) and independent component analysis (ICA) to transform the feature matrix into new feature spaces and generate three new feature matrixes. For each feature matrix, we construct En base classifiers by using ELM. Finally, we utilize Stacking method to combine the results. Experimental results suggest that the proposed framework is effective in detecting malware on Android device. © Springer International Publishing Switzerland 2015.","Zhang W.; Ren H.; Jiang Q.; Zhang K.","22"
"Technique","Sparse Analysis","Android malware detection: An eigenspace analysis approach","10.1109/SAI.2015.7237302","2015","The battle to mitigate Android malware has become more critical with the emergence of new strains incorporating increasingly sophisticated evasion techniques, in turn necessitating more advanced detection capabilities. Hence, in this paper we propose and evaluate a machine learning based approach based on eigenspace analysis for Android malware detection using features derived from static analysis characterization of Android applications. Empirical evaluation with a dataset of real malware and benign samples show that detection rate of over 96% with a very low false positive rate is achievable using the proposed method. © 2015 IEEE.","Yerima S.Y.; Sezer S.; Muttik I.","29"
"Technique","Feature Engineering","Detecting Android malware with intensive feature engineering","10.1109/ICSESS.2016.7883038","2016","Nowadays, the amount of the application in Android App Market has grown fast, and the android malwares have been introduced fast into that market, too. In this paper, we use static analysis of a given android application with intensive feature engineering which we focus on different sources and different levels. It means that we not only extract features from the executable file classes.dex but also from the other android resource files such as manifest of the application, more over we expand features at different levels of abstraction of the APK application, rather than using more features at the single level. Finally, we combine these different feature sets into one feature set which is used by the classifiers for training/testing. Our method is compared against other Android malware code detection and found to be more efficient in terms of detection accuracy and false alarm rate. © 2016 IEEE.","Yang M.; Wen Q.","11"
"Technique","Statistical Analysis","System call analysis of Android Malware families","10.17485/ijst/2016/v9i21/90273","2016","Background/Objectives: Now a days, Android Malware is coded so wisely that it has become very difficult to detect them. The static analysis of malicious code is not enough for detection of malware as this malware hides its method call in encrypted form or it can install the method at runtime. The system call tracing is an effective dynamic analysis technique for detecting malware as it can analyze the malware at the run time. Moreover, this technique does not require the application code for malware detection. Thus, this can detect that android malware also which are difficult to detect with static analysis of code. As Android was launched in 2008, so there were fewer studies available regarding the behavior of Android Malware Families and their characteristics. The aim of this work is to explore the behavior of 10 popular Android Malware Families focused on System Call Pattern of these families. Methods/Statistical Analysis: For this purpose, the authors have extracted the system call trace of 345 malicious applications from 10 Android Malware Families named FakeInstaller, Opfake, Plankton, DroidKungFu, BaseBridge, Iconosys, Kmin, Adrd and Gappusin using strace android tool and compared it with the system calls pattern of 300 Benign Applications to justify the behavior of malicious application. Findings: During the experiment, it is observed that the malicious applications invoke some system calls more frequently than benign applications. Different Android malware invokes the different set of system calls with different frequency. Applications/Improvements: This analysis can prove helpful in designing intrusion-detection systems for an android mobile device with more accuracy.","Malik S.; Khatter K.","33"
"Technique","Differential Privacy","IWSPA 2016 - Proceedings of the 2016 ACM International Workshop on Security and Privacy Analytics, co-located with CODASPY 2016","","2016","The proceedings contain 9 papers. The topics discussed include: evaluation of android malware detection based on system calls; differential privacy for collaborative filtering recommender algorithm; countering phishing from brands' vantage point; clone or relative? understanding the origins of similar android apps; towards automatic identification of JavaScript-oriented machine-based tracking; malware detection using dynamic birthmarks; how can we enable privacy in an age of big data analytics?; acquiring and analyzing app metrics for effective mobile malware detection; static analysis of malicious java applets; and detecting advanced persistent threats using fractal dimension-based machine learning classification.","","0"
"Technique","Thread Analysis","Static Mining and Dynamic Taint for Mobile Security Threats Analysis","10.1109/SmartCloud.2016.43","2016","In the last decade, the computing landscape has been rapidly shifting to mobile platform. More and more individuals and businesses are using smartphones and tablet pcs as their main general purpose computing devices. As such, mobile platform becomes prominent targets of cybercriminals. It's imperative to develop techniques that can detect mobile malware and protect the mobile devices from cyber-attacks. In this paper, we propose a hybrid approach combing a static mining algorithm and a dynamic taint analysis for effective mobile malware analysis. A preliminary prototype was built and tested on real-world mobile apps. © 2016 IEEE.","Yang T.; Qian K.; Li L.; Lo D.; Tao L.","3"
"Technique","Homomorphic Encryption","Studying the influence of static API calls for hiding malware","10.1007/978-3-319-44636-3_34","2016","Malware detection has become a challenging task over the last few years. Different concealment strategies such as packing compression, polymorphic encryption and metamorphic obfuscation have produced that malware Analysts need to find more original techniques to discriminate whether a file is malware or not. One of the current benchmark techniques is static analysis of API Calls. This technique aims to detect malware using the API Calls information extracted from the malware files. In this work, we aim to show a complete study of this technique using a behavioural model, built through an evolutionary process, in order to define possible limitations. For this analysis we will use a benchmark dataset to study the discrimination between malware and benignware and evaluate how malware writers are trying to imitate benign behaviour in order to defeat this technique. © Springer International Publishing Switzerland 2016.","Martín A.; Menéndez H.D.; Camacho D.","3"
"Technique","Analysis Tool Detection","I find your behavior disturbing: Static and dynamic app behavioral analysis for detection of Android malware","10.1109/PST.2016.7906947","2016","Malicious Android applications are currently the biggest threat in the scope of mobile security. To cope with their exponential growth and with their deceptive and hideous behaviors, static analysis signature based approaches are not enough to timely detect and tackle brand new threats such as polymorphic and composition malware. This work presents BRIDEMAID, a novel framework for analysis of Android apps' behavior, which exploits both a static and dynamic approach to detect malicious apps directly on mobile devices. The static analysis is based on n-grams matching to statically recognize malicious app execution patterns. The dynamic analysis is instead based on multi-level monitoring of device, app and user behavior to detect and prevent at runtime malicious behaviors. The framework has been tested against 2794 malicious apps reporting a detection accuracy of 99,7% and a negligible false positive rate, tested on a set of 10k genuine apps. © 2016 IEEE.","Martinelli F.; Mercaldo F.; Saracino A.; Visaggio C.A.","24"
"Technique","K-means Clustering","Genetic boosting classification for malware detection","10.1109/CEC.2016.7743902","2016","In the last few years virus writers have made use of new obfuscation techniques with the aim of hindering malware in order to difficult their detection by Anti-Virus engines. Strategies to reverse this trend involve executing potentially malicious programs and monitor the actions they perform in runtime, what is known as dynamic analysis. In this paper we present a method able to reach a high accuracy rate without using this kind of analysis. Instead we use a static analysis approach, which discards those samples that cannot be classified with enough certainty and need, certainly, a dynamic analysis. The K-means clustering algorithm has been used to group samples into regions according to their features. Then a boosting process, guided by a genetic algorithm, is executed in each region that are evaluated using a test dataset discarding those regions which do not reach a minimum accuracy threshold. © 2016 IEEE.","Martín A.; Menéndez H.D.; Camacho D.","15"
"Technique","API Call Sequencing","EFE: Efficient feature extraction algorithm for dynamic malware analysis in windows executables using API call sequence","","2016","In the history of technological advancements in networks and communicating devices, it is mandatory to have efficient mechanisms to detect the malwares before it corrupts the entire network or the device. Researchers have been adapting to various methodologies to detect malwares using static, dynamic and hybrid approaches. The proposed EFE(Efficient Feature Extraction)algorithm provides an efficient way to detect malwares in dynamic environment using API call sequences. It is clear from the findings that the proposed EFE (Efficient Feature Extraction) algorithm outperforms the other methods by providing a high detection rate when it is classified using SVM algorithm. It is also capable of detecting both known and unknown malwares effectively. © 2016, International Journal of Pharmacy and Technology. All rights reserved.","Jerlin M.A.; Jayakumar C.; Prabhu J.","2"
"Technique","Recurrent Neural Networks","Extracting the representative API call patterns of malware families using recurrent neural network","10.1145/3129676.3129712","2017","With thousands of malware samples pouring out every day, how can we reduce malware analysis time and detect them effectively? Malware family classification provides one of good measures to predict characteristics of unknown malware since malware belonging to the same family can have similar features. Static analysis and dynamic analysis are techniques to obtain features to be used for classifying malware samples to their families. Static analysis performs analysis based on specific signatures included in the malware. Static analysis has the advantages that the scope of the analysis covers the entire code, and the analysis can be performed without executing the malware. However, it is very difficult to detect or classify malware variants with only the results of the static analysis, because malware developers use polymorphic or encryption techniques to avoid static analysisbased detection of anti-virus software. Dynamic analysis analyzes malware behaviors, so the results of dynamic analysis can be used to detect or classify malware variants. One of dynamic features that can be used to detect or classify malware variants is API call sequences. In this paper, we propose a novel method to extract representative API call patterns of malware families using Recurrent Neural Network (RNN). We conducted experiments with 787 malware samples belonging to 9 families. In our experiments, we extracted representative API call patterns of 9 malware families on 551 samples as a training set and performed classification on the 236 samples as a test set. Classification accuracy results using API call patterns extracted from RNN were measured as 71% on average. The results show the feasibility of our approach using RNN to extract representative API call pattern of malware families for malware family classification. © 2017 Association for Computing Machinery.","Kwon I.; Im E.G.","32"
"Technique","Convolutional Neural Networks","Malware detection using machine learning based on word2vec embeddings of machine code instructions","10.1109/SSDSE.2017.8071952","2017","Applying machine learning for automatic malware detection is a perspective field of scientific research. One of popular methods in static analysis of executable files is observing machine code instructions that they contain. This paper proposes applying word2vec technique for extracting vector embeddings of machine code instructions and evaluates convolutional neural network-based classifier that uses extracted vectors for malware detection. © 2017 IEEE.","Popov I.","30"
"Technique","Adversarial Examples","22nd European Symposium on Research in Computer Security, ESORICS 2017","","2017","The proceedings contain 57 papers. The special focus in this conference is on Research in Computer Security. The topics include: Automated analysis of equivalence properties for security protocols using else branches; quantifying web adblocker privacy; adversarial examples for malware detection; how to violate web privacy with hardware performance events; client-side protection against XSS and markup injection; preventing DNS amplification attacks using the history of DNS queries with SDN; a traceability analysis of monero's blockchain; multi-rate threshold flipthem; practical keystroke timing attacks in sandboxed javascript; on-demand time blurring to support side-channel defense; automatic vulnerability detection and repair by learning from examples; link-layer device type classification on encrypted wireless traffic with COTS radios; learning-based proactive security auditing for clouds; identifying multiple authors in a binary program; secure IDS offloading with nested virtualization and deep VM introspection; privacy implications of room climate data; network intrusion detection based on semi-supervised variational auto-encoder; inference-proof updating of a weakened view under the modification of input parameters; preventing advanced persistent threats in complex control networks; shortfall-based optimal placement of security resources for mobile IoT scenarios; secure remote reporting with off-the-shelf IoT sensors; a secure and privacy-enhancing protocol for car access provision; privacy-preserving decision trees evaluation via linear functions; measuring the importance of static data comparisons to detect backdoors and undocumented functionality; generic constructions for fully secure revocable attribute-based encryption and enforcing input correctness via certification in garbled circuit evaluation.","","0"
"Technique","Reinforcement Learning","Cloud-based malware detection game for mobile devices with offloading","10.1109/TMC.2017.2687918","2017","As accurate malware detection on mobile devices requires fast process of a large number of application traces, cloud-based malware detection can utilize the data sharing and powerful computational resources of security servers to improve the detection performance. In this paper, we investigate the cloud-based malware detection game, in which mobile devices offload their application traces to security servers via base stations or access points in dynamic networks. We derive the Nash equilibrium (NE) of the static malware detection game and present the existence condition of the NE, showing how mobile devices share their application traces at the security server to improve the detection accuracy, and compete for the limited radio bandwidth, the computational and communication resources of the server. We design a malware detection scheme with Q-learning for a mobile device to derive the optimal offloading rate without knowing the trace generation and the radio bandwidth model of other mobile devices. The detection performance is further improved with the Dyna architecture, in which a mobile device learns from the hypothetical experience to increase its convergence rate. We also design a post-decision state learning-based scheme that utilizes the known radio channel model to accelerate the reinforcement learning process in the malware detection. Simulation results show that the proposed schemes improve the detection accuracy, reduce the detection delay, and increase the utility of a mobile device in the dynamic malware detection game, compared with the benchmark strategy. © 2002-2012 IEEE.","Xiao L.; Li Y.; Huang X.; Du X.","174"
"Technique","Linear Discriminant Analysis","Poster: Semi-supervised classification for dynamic android malware detection","10.1145/3133956.3138838","2017","Manually labeling the large number of samples of Android APKs into benign or different malicious families requires tremendous human effort, while it is comparably easy and cheap to obtain a large amount of unlabeled APKs from various sources. Moreover, the fast-paced evolution of Android malware continuously generates derivative and new malware families. These families often contain new signatures, which can escape detection that uses static analysis. These practical challenges can also cause classical supervised machine learning algorithms to degrade in performance. We propose a framework that uses model-based semi-supervised (MBSS) classification scheme built using dynamic Android API call logs. The semi-supervised approach efficiently uses the labeled and unlabeled APKs to estimate a finite mixture model of Gaussian distributions via conditional expectation-maximization and efficiently detects malware during out-of-sample testing. We compare MBSS with the popular malware detection classifiers such as support vector machine (SVM), k-nearest neighbor (kNN) and linear discriminant analysis (LDA). Under the ideal classification setting, MBSS has competitive performance with 98% accuracy and very low false positive rate for in-sample classification. For out-of-sample testing, the out-of-sample test data exhibit similar behavior of retrieving phone information and sending to the network, compared with in-sample training set. When this similarity is strong, MBSS and SVM with linear kernel maintain 90% detection rate while kNN and LDA suffer great performance degradation. When this similarity is slightly weaker, all classifiers degrade in performance, but MBSS still performs significantly better than other classifiers. © 2017 author(s).","Chen L.; Zhang M.; Yang C.-Y.; Sahita R.","23"
"Technique","Ensemble Methods","Based on multi-features and clustering ensemble method for automatic malware categorization","10.1109/Trustcom/BigDataSE/ICESS.2017.222","2017","Automatic malware categorization plays an important role in combating the current large volume of malware and aiding the corresponding forensics. Generally, there are lot of sample information could be extracted with the static tools and dynamic sandbox for malware analysis. Combine these obtained features effectively for further analysis would provides us a better understanding. On the other hand, most current works on malware analysis are based on single category of machine learning algorithm to categorize samples. However, different clustering algorithms have their own strengths and weaknesses. And then, how to combine the merits of the multiple categories of features and algorithms to further improve the analysis result is very critical. In this paper, we propose a novel scalable malware analysis framework to exploit the complementary nature of different features and algorithms to optimally integrate their results. By using the concept of clustering ensemble, our system combines partitions from individual category of feature and algorithm to obtain better quality and robustness. Our system composed of the following three parts: (1) extract multiple categories of static and dynamic features; (2) use the k-means and hierarchical clustering algorithms to construct the base clustering; (3) proposed an efficient method based on mixture model clustering ensemble to conduct an effective clustering analysis. We have evaluated our method on two malware datasets, namely the Microsoft malware dataset and our own malware dataset which contained 10868 and 53760 samples respectively. Our experiment results show that our method could categorize malware with better quality and robustness. Also, our method has certain advantages in the system run time and memory consumption compared with the state-of-The art malware analysis works. © 2017 IEEE.","Zhang Y.; Rong C.; Huang Q.; Wu Y.; Yang Z.; Jiang J.","21"
"Technique","Meta-Learning","Cloud-based malware detection game for mobile devices with offloading","10.1109/TMC.2017.2687918","2017","As accurate malware detection on mobile devices requires fast process of a large number of application traces, cloud-based malware detection can utilize the data sharing and powerful computational resources of security servers to improve the detection performance. In this paper, we investigate the cloud-based malware detection game, in which mobile devices offload their application traces to security servers via base stations or access points in dynamic networks. We derive the Nash equilibrium (NE) of the static malware detection game and present the existence condition of the NE, showing how mobile devices share their application traces at the security server to improve the detection accuracy, and compete for the limited radio bandwidth, the computational and communication resources of the server. We design a malware detection scheme with Q-learning for a mobile device to derive the optimal offloading rate without knowing the trace generation and the radio bandwidth model of other mobile devices. The detection performance is further improved with the Dyna architecture, in which a mobile device learns from the hypothetical experience to increase its convergence rate. We also design a post-decision state learning-based scheme that utilizes the known radio channel model to accelerate the reinforcement learning process in the malware detection. Simulation results show that the proposed schemes improve the detection accuracy, reduce the detection delay, and increase the utility of a mobile device in the dynamic malware detection game, compared with the benchmark strategy. © 2002-2012 IEEE.","Xiao L.; Li Y.; Huang X.; Du X.","174"
"Technique","Incremental Learning","Cloud-based malware detection game for mobile devices with offloading","10.1109/TMC.2017.2687918","2017","As accurate malware detection on mobile devices requires fast process of a large number of application traces, cloud-based malware detection can utilize the data sharing and powerful computational resources of security servers to improve the detection performance. In this paper, we investigate the cloud-based malware detection game, in which mobile devices offload their application traces to security servers via base stations or access points in dynamic networks. We derive the Nash equilibrium (NE) of the static malware detection game and present the existence condition of the NE, showing how mobile devices share their application traces at the security server to improve the detection accuracy, and compete for the limited radio bandwidth, the computational and communication resources of the server. We design a malware detection scheme with Q-learning for a mobile device to derive the optimal offloading rate without knowing the trace generation and the radio bandwidth model of other mobile devices. The detection performance is further improved with the Dyna architecture, in which a mobile device learns from the hypothetical experience to increase its convergence rate. We also design a post-decision state learning-based scheme that utilizes the known radio channel model to accelerate the reinforcement learning process in the malware detection. Simulation results show that the proposed schemes improve the detection accuracy, reduce the detection delay, and increase the utility of a mobile device in the dynamic malware detection game, compared with the benchmark strategy. © 2002-2012 IEEE.","Xiao L.; Li Y.; Huang X.; Du X.","174"
"Technique","Tokenization","Android mobile malware classification using tokenization approach based on system call sequence","","2017","The increasing number of smartphone over the last few years reflects an impressive growth in the number of advanced malicious applications targeting the smartphone users. Recently, Android has become the most popular operating system opted by users and the most targeted platform for smartphone malware attack. Besides, current mobile malware classification and detection approaches are relatively immature as the new advanced malware exploitation and threats are difficult to be detected. Therefore, an efficient approach is proposed to improve the performance of the mobile malware classification and detection. In this research, a new system call classification with call logs exploitation for mobile attacks has been developed using tokenization approach. The experiment was conducted using static and dynamic-based analysis approach in a controlled lab. System calls with call logs exploitation from 5560 Drebin samples were extracted and further examined. This research paper aims to find the best n value and classifier in classifying the dataset based on the new patterns produced. Naïve Bayes classifier has successfully achieved accuracy of 99.86% which gives the best result among other classifiers. This new system call classification can be used as a guidance and reference for other researchers in the same field for security against mobile malware attacks targeted to call logs exploitation. © Copyright International Association of Engineers.","Ahmad I.N.; Ridzuan F.; Saudi M.M.; Pitchay S.A.; Basir N.; Nabila N.F.","5"
"Technique","Section Analysis","Anatomy of ransomware malware: Detection, analysis and reporting","10.1504/IJSN.2017.084399","2017","Rapidly increasing malware samples pose serious threat to cyber security especially when they are not getting detected by security tools and techniques. Malware writers obfuscate the malware samples to conceal malicious code inside a legitimate executable to evade antivirus solutions and tamper it without changing its genuine structure to exploit target machines and remain fully undetected (FUD). Thus, it is a major challenge before Cyber Clean operations run by various government agencies to monitor malicious activities in their official network. Ransomware is a malware that encrypts documents to breach information on victim machine and asks for ransom to provide the decryption key. This paper presents the results of static and dynamic analysis of nine prominent variants of ransomware samples obtained from renowned malware repositories. A test bed is prepared to analyse these samples in Cuckoo's sandbox environment to monitor altered files/directories, tampered registry keys, Command and Control (C&C) and accessed application programming interfaces (APIs). At the end of this paper, we present the observations from our experimental analysis and provide remedial measures to deal with these samples, which would more likely impact the future analysis of ransomware. © 2017 Inderscience Enterprises Ltd.","Kaur G.; Dhir R.; Singh M.","5"
"Technique","Ransomware Analysis","Ransomware analysis based on the surface, runtime and static code method","","2017","Ransomware is one of the latest malware in recent years that can infect computers and smartphones. The malware is able to encrypt the files inside the computer or smartphone, thus prevents the users (victims) from accessing their system. In addition, the victims will be asked to pay the ransom through certain online payment methods to get a decrypt key. Due to the latest development of ransomware variants, a solution is required to prevent the malware attack. This study analyzes the cryptolockers ransomware which utilize three method such as surface, runtime and static code method. The result provided the detail characteristics of ransomware through three aforementioned methods as well as the solution to prevent the attack. © 2005 – ongoing JATIT & LLS.","Usman L.; Prayudi Y.; Riadi I.","5"
"Technique","Spyware Analysis","Ransomware analysis based on the surface, runtime and static code method","","2017","Ransomware is one of the latest malware in recent years that can infect computers and smartphones. The malware is able to encrypt the files inside the computer or smartphone, thus prevents the users (victims) from accessing their system. In addition, the victims will be asked to pay the ransom through certain online payment methods to get a decrypt key. Due to the latest development of ransomware variants, a solution is required to prevent the malware attack. This study analyzes the cryptolockers ransomware which utilize three method such as surface, runtime and static code method. The result provided the detail characteristics of ransomware through three aforementioned methods as well as the solution to prevent the attack. © 2005 – ongoing JATIT & LLS.","Usman L.; Prayudi Y.; Riadi I.","5"
"Technique","Evolutionary Algorithms","Characterization of android malware families by a reduced set of static features","10.1007/978-3-319-47364-2_59","2017","Due to the ever increasing amount and severity of attacks aimed at compromising smartphones in general, and Android devices in particular, much effort have been devoted in recent years to deal with such incidents. However, accurate detection of bad-intentioned Android apps still is an open challenge. As a follow-up step in an ongoing research, preset paper explores the selection of features for the characterization of Android-malware families. The idea is to select those features that are most relevant for characterizing malware families. In order to do that, an evolutionary algorithm is proposed to perform feature selection on the Drebin dataset, attaining interesting results on the most informative features for the characterization of representative families of existing Android malware. © Springer International Publishing AG 2017.","Sedano J.; Chira C.; González S.; Herrero Á.; Corchado E.; Villar J.R.","3"
"Technique","Local Binary Patterns","Binary malware image classification using machine learning with local binary pattern","10.1109/BigData.2017.8258512","2017","Malware classification is a critical part in the cyber-security. Traditional methodologies for the malware classification typically use static analysis and dynamic analysis to identify malware. In this paper, a malware classification methodology based on its binary image and extracting local binary pattern (LBP) features is proposed. First, malware images are reorganized into 3 by 3 grids which is mainly used to extract LBP feature. Second, the LBP is implemented on the malware images to extract features in that it is useful in pattern or texture classification. Finally, Tensorflow, a library for machine learning, is applied to classify malware images with the LBP feature. Performance comparison results among different classifiers with different image descriptors such as GIST, a spatial envelop, and the LBP demonstrate that our proposed approach outperforms others. © 2017 IEEE.","Luo J.-S.; Lo D.C.-T.","75"
"Technique","Dropper Analysis","CSCdroid: Accurately Detect Android Malware via Contribution-Level-Based System Call Categorization","10.1109/Trustcom/BigDataSE/ICESS.2017.237","2017","The detection of the malicious application or malware on Android platform is a very concerned issue. Many studies have demonstrated their effect from static property analysis and dynamic analysis. However, their accuracy and efficacy still cannot satisfy the demand. In this paper, we propose CSCdroid, an accurate malware detection approach for Android via contribution-level-based system call (SC) categorization. Different from existing works, which use all SCs to construct feature vectors so as to determine the security of applications, CSCdroid first introduces a concept named contribution to quantitatively evaluate SCs relevance for malware identification. Based on the contribution level, CSCdroid can categorize SCs into two types, determinate SCs and normal SCs. Eventually, CSCdroid builds a Markov chain by replacing all normal SCs with one specific SC in the SC sequence. Then it constructs the target feature vector from the probability matrix and use the Support Vector Machine (SVM) to detect Android malware. Such way can effectively reduce the state number of Markov chains, and cut down the dimension of the feature vectors into the SVM classifier. Our evaluation confirms our approach possesses the malware detection ability with a high accuracy rate. © 2017 IEEE.","Zhang S.; Xiao X.","12"
"Technique","Optical Character Recognition","An app based on static analysis for android ransomware","10.1109/ICCCNT.2017.8204124","2017","Ransomware is the most threatening malware which expects payment at the stake of your personal files/folders. Ransomware has been found in Windows, IOS, Android and even in Linux too. And none of them was able to protect its users from its threat. Many detection techniques and analysis tools have been developed to detect ransomware virus. According to the Verizon named American company's report, ransomware hit financial services, healthcare and public sector the most. Verizon also found that small and medium-sized businesses are now the main target of cyber criminals. So, in this paper, we have provided an extension to static text analysis so as to make it powerful. Ransomware attack its users by either by either blocking the screen or by encrypting user data. We try and provide leverage to the user by providing hardware interaction that allows the users to uninstall harmful applications by pressing the power button multiple times. To overcome data encryption, we allow the user to select the directories that contain important data, and as soon as new file is added to any of these directories, we upload the file on an online server, thus enabling the user to maintain a safe copy of all important data. © 2017 IEEE.","Kanwal M.; Thakur S.; Lashkari R.","14"
"Technique","Emulator Detection Analysis","ESAA: Efficient sequence alignment algorithm for dynamic malware analysis in windows executable using api call sequence","10.22266/ijies2017.0630.33","2017","Detection of malware has become more challenging today because of the advancements and technologies adapted to corrupt the network or the devices. Static, dynamic and hybrid malware detection analysis methods have failed to provide complete malware detection. Hence in this work, a bio inspired sequence alignment method used in bioinformatics to compare the similarity between amino acid sequences in protein structures has been adapted to give the best similarity score to detect malwares. The state of art sequence alignment methods like Smith Water Man Algorithm (SWMA) used in bio informatics suffers from the problem of more memory utilization and computation time which is in the order of n2 ie., (O(n2)) and hence in this work an efficient sequence alignment algorithm (ESSA) has been proposed to address the problem of memory utilization thereby making the memory utilization and computation time to the order of n ie., (O(n)) there by making the detection rate higher. It is also clear from the results that the similarity score is high when the sequence length is small. The accuracy of the prediction rate of malware and benign increases.","Jerlin A.; Chinnappan J.","1"
"Technique","Gradient Boosting","Static PE malware detection using gradient boosting decision trees algorithm","10.1007/978-3-030-03192-3_17","2018","Static malware detection is an essential layer in a security suite, which attempts to classify samples as malicious or benign before execution. However, most of the related works incur the scalability issues, for examples, methods using neural networks usually take a lot of training time [13], or use imbalanced datasets [17, 20], which makes validation metrics misleading in reality. In this study, we apply a static malware detection method by Portable Executable analysis and Gradient Boosting Decision Tree algorithm. We manage to reduce the training time by appropriately reducing the feature dimension. The experiment results show that our proposed method can achieve up to 99.394% detection rate at 1% false alarm rate, and score results in less than 0.1% false alarm rate at a detection rate 97.572%, based on more than 600,000 training and 200,000 testing samples from Endgame Malware BEnchmark for Research (EMBER) dataset [1]. © Springer Nature Switzerland AG 2018.","Pham H.-D.; Le T.D.; Vu T.N.","30"
"Technique","Long Short-Term Memory","Detecting Android malware using Long Short-term Memory (LSTM)","10.3233/JIFS-169424","2018","Long Short-term Memory (LSTM) is a sub set of recurrent neural network (RNN) which is specifically used to train to learn long-term temporal dynamics with sequences of arbitrary length. In this paper, long short-term memory (LSTM) architecture is followed for Android malware detection. The data set for evaluation contains real known benign and malware applications from static and dynamic analysis. To achieve acceptable malware detection rates with low computational cost, various LSTM network topologies with several network parameters are used on all extracted features. A stacked LSTM with 32 memory blocks containing one cell each has performed well on detection of all individual behaviors of malicious applications in comparison to other traditional static machine learning classifier. The architecture quantifies experimental results up to 1000 epochs with learning rate 0.1. This is primarily due to the reason that LSTM has the potential to store long-range dependencies across time-steps and to correlate with successive connection sequences information. The experiment achieved the Android malware detection of 0.939 on dynamic analysis and 0.975 on static analysis on well-known datasets. © 2018 - IOS Press and the authors. All rights reserved.","Vinayakumar R.; Soman K.P.; Poornachandran P.; Sachin Kumar S.","128"
"Technique","Deep Belief Networks","Deep Belief Networks-based framework for malware detection in Android systems","10.1016/j.aej.2018.10.008","2018","Malware is the umbrella term that denotes attacking any system by malicious software. During the last few years, the popularity of Android smartphones led to the sneak of several malware applications into different Android markets without any difficulty. As a consequence of this, malware applications have been grown exponentially in the Android markets. Unfortunately, most of these markets suffer from an inability to detect malware, which results in increasing the probability of infecting users’ phones with these malware applications. The present paper focuses on developing an efficient computational framework based on Deep Belief Networks for malware detection. The proposed framework merges high level static analysis, dynamic analysis and system calls in feature extraction in order to achieve the highest accuracy. The evaluation compares the most familiar machine learning approaches that were applied in malware detection with the proposed framework. The obtained results demonstrate that Deep Belief Networks technique can realize 99.1% accuracy with the presented dataset. Over and above that, we develop our complete static analysis jar which adopts different efficient methods in an attempt to facilitate and speed up the static analysis by handling all the Android applications in only one step rather than considering one application at a time. © 2018 Faculty of Engineering, Alexandria University","Saif D.; El-Gokhy S.M.; Sallam E.","39"
"Technique","Autoencoders","CEUR Workshop Proceedings","","2018","The proceedings contain 15 papers. The topics discussed include: Dr Cookie and Mr Token web session implementations and how to live with them; performance of Botnet detection by neural networks in software-defined networks; extending domain name monitoring. identifying potentially malicious domains using hash signatures of DOM elements; data leakage in Java applets with exception mechanism; PBFT vs proof-of-authority: applying the CAP theorem to permissioned blockchain; malware detection through low-level features and stacked denoising autoencoders; preventing ransomware attacks through file system filter drivers; understanding the Twitter user networks of viruses and ransomware attacks; static analysis for GDPR compliance; a distributed cybersecurity framework for heterogeneous environments; cross-cloud management of sensitive data via blockchain: a payslip calculation use case; visualizing Bitcoin flows of ransomware: WannaCry one week later; MAD-IOS: dynamic app vulnerability analysis in non-jail-broken devices; enforcing security in IoT and home networks; and firewall management with firewall synthesizer.","","0"
"Technique","Generative Adversarial Networks","Defending IT systems against intelligent malware","10.1109/DESSERT.2018.8409169","2018","The increasing amount of malware variants seen in the wild is causing problems for Antivirus Software vendors, unable to keep up by creating signatures for each. The methods used to develop a signature, static and dynamic analysis, have various limitations. Machine learning has been used by Antivirus vendors to detect malware based on the information gathered from the analysis process. However, adversarial examples can cause machine learning algorithms to miss-classify new data. In this paper we describe a method for malware analysis by converting malware binaries to images and then preparing those images for training within a Generative Adversarial Network. These unsupervised deep neural networks are not susceptible to adversarial examples. The conversion to images from malware binaries should be faster than using dynamic analysis and it would still be possible to link malware families together. Using the Generative Adversarial Network, malware detection could be much more effective and reliable. © 2018 IEEE.","Kargaard J.; Drange T.; Kor A.-L.; Twafik H.; Butterfield E.","17"
"Technique","HTTP Analysis","Advancing Malware Classification With an Evolving Clustering Method","10.4018/IJAMC.2018070101","2018","This article describes how honeypots and intrusion detection systems serve as major mechanisms for security administrators to collect a variety of sample viruses and malware for further analysis, classification, and system protection. However, increased variety and complexity of malware makes the analysis and classification challenging, especially when efficiency and timely response are two contradictory yet equally significant criteria in malware classification. Besides, similarity-based classifications exhibit insufficiency because the mutation and fuzzification of malware exacerbate classification difficulties. In order to improve malware classification speed and attend to mutation, this research proposes the ameliorated progressive classification that integrates static analysis and improved k-means algorithm. This proposed classification aims at assisting network administrators to have a malware classification preprocess and make efficient malware classifications upon the capture of new malware, thus enhancing the defense against malware. Copyright © 2018, IGI Global.","Chen C.-M.; Wang S.-H.","0"
"Technique","Transfer Learning","DeepOrigin: End-To-End Deep Learning for Detection of New Malware Families","10.1109/IJCNN.2018.8489667","2018","In this paper, we present a novel method of differentiating known from previously unseen malware families. We utilize transfer learning by learning compact file representations that are used for a new classification task between previously seen malware families and novel ones. The learned file representations are composed of static and dynamic features of malware files and are invariant to small modifications that do not change the malware functionality. Using an extensive dataset that consists of thousands of variants of malicious files, we were able to achieve 97.7% accuracy when classifying between seen and unseen malware families. Our method provides an important focalizing tool for cybersecurity researchers and greatly improves the overall ability to adapt to the fast-moving pace of the current threat landscape. © 2018 IEEE.","Cordonsky I.; Rosenberg I.; Sicard G.; David E.O.","19"
"Technique","Entropy Analysis","Evaluating disassembly-code based similarity between IoT malware samples","10.1109/AsiaJCIS.2018.00023","2018","Malware samples infecting IoT (Internet of Things) devices such as web cameras and home routers have spread over the Internet, which are called IoT malware. When an IoT malware sample is captured, analyzing it can be a time-consuming task. Classification is a good solution leading to efficient malware analysis. That is, if a captured sample can be automatically classified into a malware family of already-analyzed samples, their analysis results will be a useful hint for analysis. In this research, we focus on (static) disassembly to extract features from samples used for calculating their similarities for classification. This is because disassembling malware binaries can be faster than, for example, dynamic analysis under which each sample should be run for a few minutes. However, if samples are packed (encrypted and/or compressed), disassembly does not work well. As a first step towards classification, the goal of this paper is to answer two questions: Are most IoT malware samples not packed? and Can disassembly-code based similarity work well for classification? To this end, with experiments using 8,713 in-the-wild IoT malware samples, we conducted entropy analysis and confirmed that most samples were not packed. We then generated similarity matrices based on disassembly code. After that, we visualized the samples with t-SNE (t-Distributed Stochastic Neighbor Embedding) based on the similarity matrices, and we also confirmed that similar samples were closely mapped on a two-dimensional plane and that distinct samples were comparatively, separately mapped. This means that disassembly can work well against IoT malware for classification. © 2018 IEEE.","Isawa R.; Ban T.; Tie Y.; Yoshioka K.; Inoue D.","9"
"Technique","AutoML for Malware","HAAMD: Hybrid Analysis for Android Malware Detection","10.1109/ICCCI.2018.8441295","2018","With the growth in popularity of smartphone and the number of its users, the dispersion of mobile malware on Android platform has also increased. Currently Android is the hot target of attackers because it has occupied most of the market share. The growing popularity and demand of the smartphone, the large portion of market share covered by Android and the open nature of the android make an android more eye-catching platform for malwares. Scientifically, it is very crucial for an examiner to observe the malicious app's behavior to understand the danger to privacy and security. It may not be possible for an approach to detect the malware at alone, sufficiently, as many advanced techniques are there. So, we can use multiple approaches for effective detection of malware. In this paper, comparison among various kind of analysis techniques (static, dynamic) for Android malware is emphasized. This paper also accommodates different sub-techniques of these analysis techniques, with their functionality used for detection of malware and the comparative facts between these two type of analysis is discussed. In this research, the new technique has been evolved by combining static and dynamic analysis which is named as hybrid analysis and then the effectiveness of this new technique(hybrid analysis) is compared with pre-existed techniques. © 2018 IEEE.","Choudhary M.; Kishore B.","31"
"Technique","Gray-Level Co-occurrence Matrix","Malware Visualization for Fine-Grained Classification","10.1109/ACCESS.2018.2805301","2018","Due to the rapid rise of automated tools, the number of malware variants has increased dramatically, which poses a tremendous threat to the security of the Internet. Recently, some methods for quick analysis of malware have been proposed, but these methods usually require a large computational overhead and cannot classify samples accurately for large-scale and complex malware data set. Therefore, in this paper, we propose a new visualization method for characterizing malware globally and locally to achieve fast and effective fine-grained classification. We take a new approach to visualize malware as RGB-colored images and extract global features from the images. Gray-level co-occurrence matrix and color moments are selected to describe the global texture features and color features, respectively, which produces low-dimensional feature data to reduce the complexity of training model. Moreover, a series of special byte sequences are extracted from code sections and data sections of malware and are processed into feature vectors by Simhash as the local features. Finally, we merge the global features and local features to perform malware classification using random forest, K-nearest neighbor, and support vector machine. Experimental results show that our approach obtains the highest accuracy of 97.47% and the highest F-measure of 96.85% of 7087 samples from 15 families. Color features and the local features effectively assist in the classification based on texture features and enhance the F-measure by 3.4% and 1%, respectively. Overall, the combination of global features and local features can realize fine-grained malware classification with low computational cost. © 2013 IEEE.","Fu J.; Xue J.; Wang Y.; Liu Z.; Shan C.","118"
"Technique","System Call Monitoring","HM3alD: Polymorphic malware detection using program behavior-aware hidden Markov model","10.3390/app8071044","2018","Malware have been tremendously growing in recent years. Most malware use obfuscation techniques for evasion and hiding purposes, but they preserve the functionality and malicious behavior of original code. Although most research work has been mainly focused on program static analysis, some recent contributions have used program behavior analysis to detect malware at run-time. Extracting the behavior of polymorphic malware is one of the major issues that affects the detection result. In this paper, we propose HM3alD, a novel program behavior-aware hidden Markov model for polymorphic malware detection. The main idea is to use an effective clustering scheme to partition the program behavior of malware instances and then apply a novel hidden Markov model (called program behavior-aware HMM) on each cluster to train the corresponding behavior. Low-level program behavior, OS-level system call sequence, is mapped to high-level action sequence and used as transition triggers across states in program behavior-aware HMM topology. Experimental results show that HM3alD outperforms all current dynamic and static malware detection methods, especially in term of FAR, while using a large dataset of 6349 malware. © 2018 by the authors.","Tajoddin A.; Jalili S.","15"
"Technique","Gabor Filtering","Adaptive Mitigation of Multi-Virus Propagation: A Passivity-Based Approach","10.1109/TCNS.2016.2633791","2018","Malware propagation poses a growing threat to networked systems, such as computer networks and cyberphysical systems. Current approaches to defend against malware propagation are based on patching or filtering susceptible nodes at a fixed rate. When the propagation dynamics are unknown or uncertain, however, the static rate that is chosen may be either insufficient to remove all viruses or too high, incurring additional performance cost. In this paper, we formulate adaptive strategies for mitigating multiple malware epidemics when the propagation rate is unknown, using patching and filtering-based defense mechanisms. In order to identify conditions for ensuring that all viruses are asymptotically removed, we show that the malware propagation, patching, and filtering processes can be modeled as coupled passive dynamical systems. We prove that the patching rate required to remove all viruses is bounded above by the passivity index of the coupled system, and formulate the problem of selecting the minimum-cost mitigation strategy. Our results are evaluated through a numerical study. © 2014 IEEE.","Lee P.; Clark A.; Alomair B.; Bushnell L.; Poovendran R.","10"
"Technique","Graph Neural Networks","Call Graph Based Android Malware Detection with CNN","10.1007/978-981-15-0310-8_5","2019","With the increasing shipment of Android malware, malicious APK detection becomes more important. Based on static analysis, we propose a new perspective to detect malicious behaviors. In particular, we extract the patterns of suspicious APIs which are invoked together. We call these patterns local features. We propose a convolutional neural network(CNN) model based on APK’s call graph to extract local features. With the comparison of detection experiments, we demonstrate that the local features indeed help to detect malicious APKs and our model is effective in extracting local features. © 2019, Springer Nature Singapore Pte Ltd.","Liu Y.; Li G.; Jin Z.","1"
"Technique","Adversarial Training","AIMED: Evolving malware with genetic programming to evade detection","10.1109/TrustCom/BigDataSE.2019.00040","2019","Genetic Programming (GP) has previously proved to achieve valuable results on the fields of image processing and arcade learning. Similarly, it can be used as an adversarial learning approach to evolve malware samples until static learning classifiers are no longer able to detect it. While the implementation is relatively simple compared with other Machine Learning approaches, results proved that GP can be a competitive solution to find adversarial malware examples comparing with similar methods. Thus, AIMED - Automatic Intelligent Malware Modifications to Evade Detection - was designed and imple-mented using genetic algorithms to evade malware classifiers. Our experiments suggest that the time to achieve adversarial malware samples can be reduced up to 50% compared to classic random approaches. Moreover, we implemented AIMED to generate adversarial examples using individual malware scanners as target and tested the evasive files against further classifiers from both research and industry. The generated examples achieved up to 82% of cross-evasion rates among the classifiers. © 2019 IEEE.","Castro R.L.; Schmitt C.; Dreo G.","41"
"Technique","Opcode Frequency Analysis","An OpCODE sequences analysis method for unknown malware detection","10.1145/3318236.3318255","2019","One of the main challenges in security today is defending against unknown malware attacks which have the potential to harm a computer or network. Hence, detecting malware has become one of the most important challenges for the security of computer systems. The known malware detection methods based on the appearance of opcode sequences has to construct a matrix from programs of different architectures to extract high-level features. In order to resolve high dimensional inputs vector and differences assembly instruction, this paper proposes a novel method for detecting static characteristics of 32-bit and 64-bit malicious Portable Executable (PE) Windows files by opcode sequences analysis. By compute the frequency of occurrence of each opcode sequence and distinguishing different types of 32-bit and 64-bit PE files, the proposed method shows promising results with less complexity in comparison with previous studies, which is beneficial to train machine learning model such as k-nearest neighbor (KNN) and back-propagation neural network (BP). Our method is evaluated on more than 20,000 samples, and experimental results show that our system can effectively detect and classify unknown malware. © 2019 Association for Computing Machinery.","Sun Z.; Rao Z.; Chen J.; Xu R.; He D.; Yang H.; Liu J.","27"
"Technique","Model Compression","26th International Conference on Neural Information Processing, ICONIP 2019","","2019","The proceedings contain 111 papers. The special focus in this conference is on Neural Information Processing. The topics include: A Robustness and Low Bit-Rate Image Compression Network for Underwater Acoustic Communication; gated Contiguous Memory U-Net for Single Image Dehazing; combined Correlation Filters with Siamese Region Proposal Network for Visual Tracking; RAUNet: Residual Attention U-Net for Semantic Segmentation of Cataract Surgical Instruments; a Novel Image-Based Malware Classification Model Using Deep Learning; visual Saliency Detection via Convolutional Gated Recurrent Units; RBPNET: An Asymptotic Residual Back-Projection Network for Super Resolution of Very Low Resolution Face Image; accurate Single Image Super-Resolution Using Deep Aggregation Network; Reinforcing LiDAR-Based 3D Object Detection with RGB and 3D Information; cross-View Image Retrieval - Ground to Aerial Image Retrieval Through Deep Learning; multi-person 3D Pose Estimation from Monocular Image Sequences; Direct Image to Point Cloud Descriptors Matching for 6-DOF Camera Localization in Dense 3D Point Clouds; improving Object Detection with Consistent Negative Sample Mining; A Model Selection Criterion for LASSO Estimate with Scaling; geometric Mean Metric Learning for Label Distribution Learning; Explicit Center Selection and Training for Fault Tolerant RBF Networks; Learning with Incomplete Labels for Multi-label Image Annotation Using CNN and Restricted Boltzmann Machines; learning-Based Confidence Estimation for Multi-modal Classifier Fusion; Siamese Network for Classification with Optimization of AUC; attention-Based Audio-Visual Fusion for Video Summarization; RLDR-Pruning: Restricted Linear Dimensionality Reduction Approach for Model Compression; super-Resolution Network for General Static Degradation Model; adaptive Neuro-Surrogate-Based Optimisation Method for Wave Energy Converters Placement Optimisation; sparse Least Squares Low Rank Kernel Machines.","","0"
"Technique","Neural Network Classification","Detection of Malware using Artificial Neural Networks","10.1109/IMITEC45504.2019.9015848","2019","Artificial Neural Network techniques have found numerous applications in our world today, one of such is in malware detection. Classification is one of the most popular approach used in neural network. In this paper we present an artificial neural network classification approach to detecting a file hash as malware. A static approach is presented and used in this analysis. Performance analysis of obtained model is measured against other popular techniques. Evaluation results shows comparable accuracy and computation time. © 2019 IEEE.","Olowoyo O.; Owolawi P.A.","1"
"Technique","DNS Analysis","Android Applications Analysis Using PerUpSecure","10.1007/978-3-030-11878-5_1","2019","Since its introduction in 2008, Google’s Android has been a blazing success, far outstripping the market share of all other mobile operating systems. Android ships more than one billion new devices each year, and more than 1.5 million new devices are activated every day. This growth was not without pain, however. Recent measures estimate that 96–97% of today’s mobile malware targets the Android operating system, and 73% of them are specifically designed to satisfy profit motives. In addition, as the system becomes more popular and scrutinized, the number of vulnerabilities identified has exploded. The security of Android is a key issue for Google, the mobile OS is - by far - the most popular in the world. The Android security mechanism is founded on an instrument that gives users all the information about the permissions requested by the application before installing it. The main benefit of this Android permission system is to provide users an overview of the application by showing them the requested permissions list, which can help raise awareness of its risks on their private data. However, we still do not have enough information to allow us to say that standard users are able to clearly understand the permissions requested and their implications for their security. In this article, we present a tool called “PerUpSecure” multiphases that combines dynamic and static analysis and contrary to what we know about the installation process of Android applications that puts in front of the user only two options, either he accepts all requested permissions or he cancels the installation, our proposed tool allows the user to install any application with only the necessary permissions. At the end of this article, we present the analysis results of a set of normal applications and malicious programs collected from different markets. © 2019, Springer Nature Switzerland AG.","Er-Rajy L.; El Kiram M.A.; El Ghazouani M.","0"
"Technique","Multi-Modal Learning","Towards Multimodal Learning for Android Malware Detection","10.1109/ICCNC.2019.8685502","2019","As the worldwide adoption of smartphones nears complete saturation, the complexity and volume of mobile malware continue to progress, subverting what has become the largest set of targets with the most valuable rewards. At the same time, deep learning has become a powerful tool for data analysis and prediction, demonstrating significant efficacy in the detection of new and unforeseen malicious software through supervised learning. Despite these advances, the proper application of deep learning to malware detection could be further improved through additional data and model construction. In this work, we consider the detection of Android malware using static analysis techniques on multiple extractable data classes. Particularly, both Permission and Hardware Feature data are applied in various multimodal input scenarios and deep network shapes. Through experimental analysis, we demonstrate that the combination of both sets of data could improve overall performance, achieving as high as 94.5% classification accuracy. In addition, using only a limited grid search, we observe that the largest multimodal network requires the lowest time to train while achieving equivalent or greater accuracy compared with our other models. © 2019 IEEE.","Mcgiff J.; Hatcher W.G.; Nguyen J.; Yu W.; Blasch E.; Lu C.","32"
"Technique","Online Learning","Deep networks in online malware detection","","2019","Deep learning is usually applied to static datasets. If used for classification based on data streams, it is not easy to take into account a non-stationarity. This paper presents work in progress on a new method for online deep classification learning in data streams with slow or moderate drift, highly relevant for the application domain of malware detection. The method uses a combination of multilayer perceptron and variational autoencoder to achieve constant memory consumption by encoding past data to a generative model. This can make online learning of neural networks more accessible for independent adaptive systems with limited memory. First results for real-world malware stream data are presented. Copyright © 2019 for this paper by its authors.","Tumpach J.; Krčál M.; Holeňa M.","1"
"Technique","Metric Learning","26th International Conference on Neural Information Processing, ICONIP 2019","","2019","The proceedings contain 111 papers. The special focus in this conference is on Neural Information Processing. The topics include: A Robustness and Low Bit-Rate Image Compression Network for Underwater Acoustic Communication; gated Contiguous Memory U-Net for Single Image Dehazing; combined Correlation Filters with Siamese Region Proposal Network for Visual Tracking; RAUNet: Residual Attention U-Net for Semantic Segmentation of Cataract Surgical Instruments; a Novel Image-Based Malware Classification Model Using Deep Learning; visual Saliency Detection via Convolutional Gated Recurrent Units; RBPNET: An Asymptotic Residual Back-Projection Network for Super Resolution of Very Low Resolution Face Image; accurate Single Image Super-Resolution Using Deep Aggregation Network; Reinforcing LiDAR-Based 3D Object Detection with RGB and 3D Information; cross-View Image Retrieval - Ground to Aerial Image Retrieval Through Deep Learning; multi-person 3D Pose Estimation from Monocular Image Sequences; Direct Image to Point Cloud Descriptors Matching for 6-DOF Camera Localization in Dense 3D Point Clouds; improving Object Detection with Consistent Negative Sample Mining; A Model Selection Criterion for LASSO Estimate with Scaling; geometric Mean Metric Learning for Label Distribution Learning; Explicit Center Selection and Training for Fault Tolerant RBF Networks; Learning with Incomplete Labels for Multi-label Image Annotation Using CNN and Restricted Boltzmann Machines; learning-Based Confidence Estimation for Multi-modal Classifier Fusion; Siamese Network for Classification with Optimization of AUC; attention-Based Audio-Visual Fusion for Video Summarization; RLDR-Pruning: Restricted Linear Dimensionality Reduction Approach for Model Compression; super-Resolution Network for General Static Degradation Model; adaptive Neuro-Surrogate-Based Optimisation Method for Wave Energy Converters Placement Optimisation; sparse Least Squares Low Rank Kernel Machines.","","0"
"Technique","Sandbox Evasion Code","Malware Sandbox Evasion Detection Based on Code Evolution; [基于代码进化的恶意代码沙箱规避检测技术研究]","10.11999/JEIT180257","2019","In order to resist the malware sandbox evasion behavior, improve the efficiency of malware analysis, a code-evolution-based sandbox evasion technique for detecting the malware behavior is proposed. The approach can effectively accomplish the detection and identification of malware by first extracting the static and dynamic features of malware software and then differentiating the variations of such features during code evolution using sandbox evasion techniques. With the proposed algorithm, 240 malware samples with sandbox-bypassing behaviors can be uncovered successfully from 7 malware families. Compared with the JOE analysis system, the proposed algorithm improves the accuracy by 12.5% and reduces the false positive to 1%, which validates the proposed correctness and effectiveness. © 2019, Science Press. All right reserved.","Liang G.; Pang J.; Shan Z.","5"
"Technique","Bayesian Model Averaging","Android malware detection mechanism based on bayesian model averaging","10.1007/978-981-10-8639-7_9","2019","Since Android is the most widely used operating system for mobile devices, it has been a target for widespread malware attacks. During the past years, many new malware detection mechanisms have been introduced for the Android platform. These methods are generally classified as static analysis and dynamic analysis methods. However, none of the existing mechanisms are able to detect the malware applications with reasonable false positive and negative rates. This is a major concern in the field of Android malware detection. In this paper, we propose a novel malware detection mechanism by combining the estimated malicious probability values of three distinct naive Bayes classifiers based on API calls, permissions, and system calls using Bayesian model averaging approach. The majority of the existing Android malwares have signatures in at least one of API calls, permissions, or system call sequences. Hence, the proposed mechanism can overcome the limitations of the existing static and dynamic malware detection mechanism to a good extent. Our experiments have shown that the proposed mechanism is more accurate than the existing static and dynamic malware detection mechanisms. © Springer Nature Singapore Pte Ltd. 2019","Roopak S.; Thomas T.; Emmanuel S.","3"
"Technique","Semantic Segmentation","26th International Conference on Neural Information Processing, ICONIP 2019","","2019","The proceedings contain 111 papers. The special focus in this conference is on Neural Information Processing. The topics include: A Robustness and Low Bit-Rate Image Compression Network for Underwater Acoustic Communication; gated Contiguous Memory U-Net for Single Image Dehazing; combined Correlation Filters with Siamese Region Proposal Network for Visual Tracking; RAUNet: Residual Attention U-Net for Semantic Segmentation of Cataract Surgical Instruments; a Novel Image-Based Malware Classification Model Using Deep Learning; visual Saliency Detection via Convolutional Gated Recurrent Units; RBPNET: An Asymptotic Residual Back-Projection Network for Super Resolution of Very Low Resolution Face Image; accurate Single Image Super-Resolution Using Deep Aggregation Network; Reinforcing LiDAR-Based 3D Object Detection with RGB and 3D Information; cross-View Image Retrieval - Ground to Aerial Image Retrieval Through Deep Learning; multi-person 3D Pose Estimation from Monocular Image Sequences; Direct Image to Point Cloud Descriptors Matching for 6-DOF Camera Localization in Dense 3D Point Clouds; improving Object Detection with Consistent Negative Sample Mining; A Model Selection Criterion for LASSO Estimate with Scaling; geometric Mean Metric Learning for Label Distribution Learning; Explicit Center Selection and Training for Fault Tolerant RBF Networks; Learning with Incomplete Labels for Multi-label Image Annotation Using CNN and Restricted Boltzmann Machines; learning-Based Confidence Estimation for Multi-modal Classifier Fusion; Siamese Network for Classification with Optimization of AUC; attention-Based Audio-Visual Fusion for Video Summarization; RLDR-Pruning: Restricted Linear Dimensionality Reduction Approach for Model Compression; super-Resolution Network for General Static Degradation Model; adaptive Neuro-Surrogate-Based Optimisation Method for Wave Energy Converters Placement Optimisation; sparse Least Squares Low Rank Kernel Machines.","","0"
"Technique","Contrast Enhancement","2nd International conference of the series Soft Computing: Theories and Applications, SoCTA 2017","","2019","The proceedings contain 68 papers. The special focus in this conference is on Soft Computing: Theories and Applications. The topics include: Modified integral type weak contraction and common fixed point theorem with an auxiliary function; crop monitoring using IoT: A neural network approach; secure image steganography through pre-processing; understandable huffman coding: A case study; performance investigations of multi-resonance microstrip patch antenna for wearable applications; fuzzy counter propagation network for freehand sketches-based image retrieval; an efficient contrast enhancement technique based on firefly optimization; a review of computational swarm intelligence techniques for solving crypto problems; defense-in-depth approach for early detection of high-potential advanced persistent attacks; complexity metrics for component-based software system; An efficient algorithm to minimize EVM over ZigBee; performance measure of the proposed cost estimation model: Advance use case point method; fractal image compression and its techniques: A review; web services classification across cloud-based applications; performance evaluation and analysis of advanced symmetric key cryptographic algorithms for cloud computing security; A survey of CAD methods for tuberculosis detection in chest radiographs; static image shadow detection texture analysis by entropy-based method; A PSO algorithm-based task scheduling in cloud computing; a novel approach for target coverage in wireless sensor networks based on network coding; natural vibration of square plate with circular variation in thickness; Identification of relevant stochastic input variables for prediction of daily PM10 using artificial neural networks; majority-based classification in distributed environment; detection of advanced malware by machine learning techniques; Inter- and intra-scale dependencies-based CT image denoising in curvelet domain.","","0"
"Technique","Memory Networks","A Robust Approach for Android Malware Detection Based on Deep Learning; [一种基于深度学习的强对抗性Android恶意代码检测方法]","10.3969/j.issn.0372-2112.2020.08.007","2020","Conventional Android malware detection method can easily be evaded.In this study, we propose a detection method of Android malicious code based on short-term memory network(LSTM), which makes malware more difficult to evade from detection.In this method, a program analysis framework that combines static and dynamic analysis is proposed at first to get the permission information, protection information and behavior information.Secondly, entrenched features such as ability features and behavior features are extracted from the information that provided by the program analysis framework.With the entrenched features, we design a malware detection method based on LSTM model to distinguish benign applications from the malicious ones.Experimental results demonstrate that our approach is more effective and robust in Android malware detection than the state-of-the-art methods. © 2020, Chinese Institute of Electronics. All right reserved.","Li P.-W.; Jiang Y.-Q.; Xue F.-Y.; Huang J.-J.; Xu C.","9"
"Technique","Image Texture Analysis","Detection of Malign and Benign PE Files Using Texture Analysis","10.1007/978-3-030-65610-2_16","2020","With the unlimited growth of malware and the abundant and often reckless downloading of files from the internet, it is crucial to have an efficient method that can also be scalable and fast for detecting malware on a popular operating system, Microsoft Windows. Unlike static or dynamic detection that involves disassembling the code or time-intensive execution, statistical analysis that operates directly on binary content has a distinct advantage in speed and scalability. However, high feature dimensionality and high feature extraction cost increase the complexity of the algorithm and training model as well. Higher false negatives is another major limitation in detection. To address these challenges, this paper presents binary texture analysis extended from our work [22] by deriving new statistical texture features to detect over 10,000 Windows Portable Executable (PE) files into malign and benign ones. The same features [22] extracted over PE files (both DLLs and EXEs) have yielded good accuracy but the False Negative Rate (FNR) was still high. However, new features have enhanced the analysis and thus distinguishability between benign and malign files. Relative to state-of-the-art texture-based methods, the proposed method has used smaller feature dimensionality extracted at a lower cost, and with that, it has significantly reduced FNR to 0.4% while achieving an accuracy of 99.61%. The result is also compared with other malicious file detectors. The method thus has improved the other parameters than accuracy which are vital to the overall efficiency of the detection method. © 2020, Springer Nature Switzerland AG.","Verma V.; Muttoo S.K.; Singh V.B.","1"
"Technique","Adaptive Learning","A Real-Time and Adaptive-Learning Malware Detection Method Based on API-Pair Graph","10.1109/ACCESS.2020.3038453","2020","The detection of malware have developed for many years, and the appearance of new machine learning and deep learning techniques have improved the effect of detectors. However, most of current researches have focused on the general features of malware and ignored the development of the malware themselves, so that the features could be useless with the time passed as well as the advance of malware techniques. Besides, the detection methods based on machine learning are mainly static detection and analysis, while the study of real-time detection of malware is relatively rare. In this article, we proposed a new model that could detect malware real-time in principle and learn new features adaptively. Firstly, a new data structure of API-Pair was adopted, and the constructed data was trained with Maximum Entropy model, which could satisfy the goal of weighting and adaptive learning. Then a clustering was practised to filter relatively unrelated and confusing features. Moreover, a detector based on Lont Short Term Memory Network (LSTM) was devised to achieve the goal of real-time detection. Finally, a series of experiments were designed to verify our method. The experimental results showed that our model could obtain the highest accuracy of 99.07% in general tests and keep the accuracies above 97% with the development of malware; the results also proved the feasibility of our model in real-time detection through the simulation experiment, and robustness against a typical adversarial attack.  © 2013 IEEE.","Yang S.; Li S.; Chen W.; Liu Y.","16"
"Technique","Botnet Analysis","ICAASE 2020 - Proceedings, 4th International Conference on Advanced Aspects of Software Engineering","","2020","The proceedings contain 21 papers. The topics discussed include: android malware detection using convolutional deep neural networks; towards architectural view-driven modernization; EEPSCZ: an energy-efficient protocol with static clustering zones; binary Gabor pattern (BGP) descriptor and principal component analysis (PCA) for steel surface defects classification; an auto scaling energy efficient approach in apache hadoop; a blockchain data balance using a generative adversarial network approach: application to smart house IDS; personalized menu: a new contextual collaborative recommender system; towards an UML-based SoS analysis and design process; classification of android APIs posts : an analysis of developer’s discussions on stack overflow; and a review of IoT systems engineering: application to the smart traffic lights system.","","0"
"Technique","Random Forest Classification","An empirical study to estimate the stability of random forest classifier on the hybrid features recommended by filter based feature selection technique","10.1007/s13042-019-00978-7","2020","The emergence of advanced malware is a serious threat to information security. A prominent technique that identifies sophisticated malware should consider the runtime behaviour of the source file to detect malicious intent. Although the behaviour-based malware detection technique is a substantial improvement over the traditional signature-based detection technique, current malware employs code obfuscation techniques to elude detection. This paper presents the Hybrid Features-based malware detection system (HFMDS) that integrates static and dynamic features of the portable executable (PE) files to discern malware. The HFMDS is trained with prominent features advised by the filter-based feature selection technique (FST). The detection ability of the proposed HFMDS has evaluated with the random forest (RF) classifier by considering two different datasets that consist of real-world Windows malware samples. In-depth analysis is carried out to determine the optimal number of decision trees (DTs) required by the RF classifier to achieve consistent accuracy. Besides, four popular FSTs performance is also analyzed to determine which FST recommends the best features. From the experimental analysis, we can infer that increasing the number of DTs after 160 within the RF classifier does not make a significant difference in attaining better detection accuracy. © 2019, Springer-Verlag GmbH Germany, part of Springer Nature.","Darshan S.L.S.; Jaidhar C.D.","9"
"Technique","Ant Colony Optimization","Feature reduction and optimization of malware detection system using ant colony optimization and rough sets","10.4018/IJISP.2020070106","2020","Malware is a malicious program that can cause a security breach of a system. Malware detection and classification is one of the burning topics of research in information security. Executable files are the major source of input for static malware detection. Machine learning techniques are very efficient in behavioral-based malware detection and need a dataset of malware with different features. In windows, malware can be detected by analyzing the portable executable (PE) files. This work contributes to identifying the minimum feature set for malware detection employing a rough set dependent feature significance combined with Ant Colony Optimization (ACO) as the heuristic-search technique. A malware dataset named claMP with both integrated features and raw features was considered as the benchmark dataset for this work. The analytical results prove that 97.15% and 92.8% data size optimization has been achieved with a minimum loss of accuracy for claMP integrated and raw datasets, respectively. Copyright © 2020, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.","Penmatsa R.K.V.; Kalidindi A.; Kumar Reddy Mallidi S.","18"
"Technique","Capsule Networks","A Malware Classification Method Based on the Capsule Network","10.1007/978-3-030-62223-7_4","2020","Malware has become a serious threat to network security. Traditional static analysis methods usually cannot effectively detect packers, obfuscations, and variants. Dynamic analysis is not efficient when dealing with large amounts of malware. Aiming at the shortcomings of the existing methods, this paper proposes a method for analyzing malware based on the capsule network. It uses a supervised learning method to train the capsule network with a large number of malware samples with existing category labels. In the process of constructing features, this paper adopts a method of combining static features and dynamic features to extract the operation code information based on static analysis, and extract the API call sequence information based on general analysis. Both characteristics can well represent the structure and behavior of malware. Then use N-Gram to construct sequence features, visualize the N-Gram sequence, generate malware images, and finally use the capsule network for classification detection. In addition, this paper improves the original capsule network and verifies the effect of the improved model. © 2020, Springer Nature Switzerland AG.","Wang Z.; Han W.; Lu Y.; Xue J.","4"
"Technique","Boosting Algorithms","Detection of ransomware in static analysis by using Gradient Tree Boosting Algorithm","10.1109/ICSCAN49426.2020.9262315","2020","Ransomware is the type of malware that encrypts the user data which cannot be accessed then the ransom demands to pay for decrypting key. Many organizations lose their data and money; lose their reputation as small organizations. So, detect the ransomware which affected the system before execution. Later, detection of ransomware was done by the decision tree algorithm method. In this work, we use a static detection of ransomware which extracts the features to classify whether it is ransomware, malware or benign before execution on the system by using gradient tree boosting algorithm. In the previous method, the detection of ransomware by using a decision tree method which achieved 98.98% with a detection rate of 0.2%, which ends with False Positive Rate (FPR) and the result is efficient for small dataset. Our proposed method the detection of the ransomware achieves 99.997% with a detection rate of 0.1% false positive rate again it results with less than 0.01% false positive rates with 98.3% of detection rate based on the 700,000 training and 400,000 testing samples from the dataset. Our method achieves more accuracy than the later algorithm while increasing the dataset for detecting the ransomware and also to identify the type of malware. © 2020 IEEE.","Martina Jose Mary M.; Usharani S.; Manju Bala P.; Sandhya S.G.","13"
"Technique","Process Hollowing","Malware Analysis and Detection Engineering: A Comprehensive Approach to Detect and Analyze Modern Malware","10.1007/978-1-4842-6193-4","2020","Discover how the internals of malware work and how you can analyze and detect it. You will learn not only how to analyze and reverse malware, but also how to classify and categorize it, giving you insight into the intent of the malware. Malware Analysis and Detection Engineering is a one-stop guide to malware analysis that simplifies the topic by teaching you undocumented tricks used by analysts in the industry. You will be able to extend your expertise to analyze and reverse the challenges that malicious software throws at you. The book starts with an introduction to malware analysis and reverse engineering to provide insight on the different types of malware and also the terminology used in the anti-malware industry. You will know how to set up an isolated lab environment to safely execute and analyze malware. You will learn about malware packing, code injection, and process hollowing plus how to analyze, reverse, classify, and categorize malware using static and dynamic tools. You will be able to automate your malware analysis process by exploring detection tools to modify and trace malware programs, including sandboxes, IDS/IPS, anti-virus, and Windows binary instrumentation. The book provides comprehensive content in combination with hands-on exercises to help you dig into the details of malware dissection, giving you the confidence to tackle malware that enters your environment. What You Will Learn Analyze, dissect, reverse engineer, and classify malware Effectively handle malware with custom packers and compilers Unpack complex malware to locate vital malware components and decipher their intent Use various static and dynamic malware analysis tools Leverage the internals of various detection engineering tools to improve your workflow Write Snort rules and learn to use them with Suricata IDS Who This Book Is For Security professionals, malware analysts, SOC analysts, incident responders, detection engineers, reverse engineers, and network security engineers ""This book is a beast! If you're looking to master the ever-widening field of malware analysis, look no further. This is the definitive guide for you."" Pedram Amini, CTO Inquest; Founder Open RCE.org and Zero Day Initiative. © 2020 by Abhijit Mohanta, Anoop Saldanha.","Mohanta A.; Saldanha A.","33"
"Technique","Memory Allocation Analysis","Imaging and evaluating the memory access for malware","10.1016/j.fsidi.2019.200903","2020","Malware analysis is a forensic process. After infection and the damage represented itself with the full scale, then the analysis of the attack, the structure of the executable and the aim of the malware can be discovered. These discoveries are converted into analysis reports and malware signatures and shared among antivirus databases and threat intelligence exchange platforms. This highly valuable information is then utilized in the detection mechanisms to prevent further dissemination and infections of malware. The types of analysis of the malware sample in this process can be grouped into two categories: static analysis and dynamic analysis. In static analysis, the executable file is reverted to the source code through disassemblers and reverse engineering software and analyzed whereas dynamic analysis includes running the sample in an isolated environment and analyzing its behavior. Both static and dynamic analysis have limitations such as packing, obfuscation, dead code insertion, sandbox detection, and anti-debugging techniques. Memory operations, on the other hand, are not possible to hide by these limitations and inevitable for any software since the inventions of the computational models. Therefore, in this research, memory operations and access patterns for the malicious acts are examined, and a contribution of a novel approach for extracting of memory access images is presented. In addition to extraction, methods of how these images can be used for detection and comparison is introduced through an image comparison technique. © 2020 Elsevier Ltd","Yücel Ç.; Koltuksuz A.","27"
"Technique","Registry Key Extraction","Multilayer ransomware detection using grouped registry key operations, file entropy and file signature monitoring","10.3233/JCS-191346","2020","The last few years have come with a sudden rise in ransomware attack incidents, causing significant financial losses to individuals, institutions and businesses. In reaction to these attacks, ransomware detection has become an important topic for research in recent years. Currently, there are two broad categories of ransomware detection techniques: signature-based and behaviour-based analyses. On the one hand, signature-based detection, which mainly relies on a static analysis, can easily be evaded by code-obfuscation and encryption techniques. On the other hand, current behaviour-based models, which rely mainly on a dynamic analysis, face difficulties in accurately differentiating between user-triggered encryption from ransomware-triggered encryption. In the current paper, we present an upgraded behavioural ransomware detection model that reinforces the existing feature space with a new set of features based on grouped registry key operations, introducing a monitoring model based on combined file entropy and file signature. We analyze the new feature model by exploring and comparing three different linear machine learning techniques: SVM, logistic regression and random forest. The proposed approach helps achieve improved detection accuracy and provides the ability to detect novel ransomware. Furthermore, the proposed approach helps differentiate user-triggered encryption from ransomware-triggered encryption, allowing saving as many files as possible during an attack. To conduct our study, we use a new public ransomware detection dataset collected in our lab, which consists of 666 ransomware and 103 benign binaries. Our experimental results show that our proposed approach achieves relatively high accuracy in detecting both previously seen and novel ransomware samples. © 2020 - IOS Press and the authors. All rights reserved.","Jethva B.; Traoré I.; Ghaleb A.; Ganame K.; Ahmed S.","40"
"Technique","Federated Learning","3rd International Conference on Science of Cyber Security, SciSec 2021","","2021","The proceedings contain 18 papers. The special focus in this conference is on Science of Cyber Security. The topics include: An Event-Based Parameter Switching Method for Controlling Cybersecurity Dynamics; dismantling Interdependent Networks Based on Supra-Laplacian Energy; simulations of Event-Based Cyber Dynamics via Adversarial Machine Learning; stochastic Simulation Techniques for Inference and Sensitivity Analysis of Bayesian Attack Graphs; multi-granularity Mobile Encrypted Traffic Classification Based on Fusion Features; Caps-LSTM: A Novel Hierarchical Encrypted VPN Network Traffic Identification Using CapsNet and LSTM; SARR: A Cybersecurity Metrics and Quantification Framework (Keynote); a Data-Free Approach for Targeted Universal Adversarial Perturbation; a Multi-level Elastic Encryption Protection Model; preface; DWT-DQFT-Based Color Image Blind Watermark with QR Decomposition; using Chinese Natural Language to Configure Authorization Policies in Attribute-Based Access Control System; protecting Data Privacy in Federated Learning Combining Differential Privacy and Weak Encryption; a New Method for Inferring Ground-Truth Labels and Malware Detector Effectiveness Metrics; botnet Detection Based on Multilateral Attribute Graph; mining Trojan Detection Based on Multi-dimensional Static Features.","","0"
"Technique","Data Augmentation","AICS 2021 - 29th Irish Conference on Artificial Intelligence and Cognitive Science 2021","","2021","The proceedings contain 24 papers. The topics discussed include: modelling the COVID-19 virus evolution with incremental machine learning; virtual tutor personality in computer assisted language learning; domain randomization for object counting; malware classification using static disassembly and machine learning; nearest neighbor-based data augmentation for time series forecasting; machine learning in space: a review of machine learning algorithms and hardware for space applications; sign language fingerspelling recognition using synthetic data; sentiment analysis: using detrended fluctuation analysis of EEG signals in natural reading; linguistic and gender variation in speech emotion recognition using spectral features; and bias bubbles: using semi-supervised learning to measure how many biased news articles are around us.","","0"
"Technique","Hyperparameter Optimization","Bayesian Hyper-Parameter optimisation for Malware Detection","","2021","Malware detection is a major security concern and a great deal of academic and commercial research and development is directed at it. Machine Learning is a natural technology to address malware detection and many researchers have investigated its use. However, drawing comparisons between different techniques is a fraught affair. For example, the performance of ML algorithms often depends significantly on parametric choices, so the question arises as to what parameter choices are optimal. In this paper, we investigate the use of a variety of ML algorithms for building malware classifiers and also how best to tune the parameters of those algorithms - generally known as hyper-parameter optimisation. We examine the effects of some simple (model-free) ways of parameter tuning together with a state-of-the-art Bayesian model-building approach. Our work is carried out using EMBER, a major published malware benchmark dataset on Windows Portable Execution (PE) metadata samples. © 2021 Copyright for this paper by its authors","ALGorain F.T.; Clark J.A.","0"
"Technique","Concept Drift Detection","An Adaptive Behavioral-Based Incremental Batch Learning Malware Variants Detection Model Using Concept Drift Detection and Sequential Deep Learning","10.1109/ACCESS.2021.3093366","2021","Malware variants are the major emerging threats that face cybersecurity due to the potential damage to computer systems. Many solutions have been proposed for detecting malware variants. However, accurate detection is challenging due to the constantly evolving nature of the malware variants that cause concept drift. Existing malware detection solutions assume that the mapping learned from historical malware features will be valid for new and future malware. The relationship between input features and the class label has been considered stationary, which doesn't hold for the ever-evolving nature of malware variants. Malware features change dynamically due to code obfuscations, mutations, and the modification made by malware authors to change the features' distribution and thus evade the detection rendering the detection model obsolete and ineffective. This study presents an Adaptive behavioral-based Incremental Batch Learning Malware Variants Detection model using concept drift detection and sequential deep learning (AIBL-MVD) to accommodate the new malware variants. Malware behaviors were extracted using dynamic analysis by running the malware files in a sandbox environment and collecting their Application Programming Interface (API) traces. According to the malware first-time appearance, the malware samples were sorted to capture the malware variants' change characteristics. The base classifier was then trained based on a subset of historical malware samples using a sequential deep learning model. The new malware samples were mixed with a subset of old data and gradually introduced to the learning model in an adaptive batch size incremental learning manner to address the catastrophic forgetting dilemma of incremental learning. The statistical process control technique has been used to detect the concept drift as an indication for incrementally updating the model as well as reducing the frequency of model updates. Results from extensive experiments show that the proposed model is superior in terms of detection rate and efficiency compared with the static model, periodic retraining approaches, and the fixed batch size incremental learning approach. The model maintains an average of 99.41% detection accuracy of new and variants malware with a low updating frequency of 1.35 times per month. © 2013 IEEE.","Darem A.A.; Ghaleb F.A.; Al-Hashmi A.A.; Abawajy J.H.; Alanazi S.M.; Al-Rezami A.Y.","66"
"Technique","Batch File Analysis","Static file analysis to detect rootkits in the system","10.1088/1742-6596/2032/1/012137","2021","Rootkits allow attackers to steal data from your computer, exploit its processing power, and monitor user activities. There are two main ways to detect a rootkit in the system: the first implies detecting a rootkit on a running computer, the other - detecting a rootkit in a data image (or on a non-functioning computer). The paper provides practical examples, thus allowing readers to repeat the experiments without too much difficulty. © 2021 Institute of Physics Publishing. All rights reserved.","Svirbutovich O.A.; Zhigalov K.Yu.; Patrusova A.M.","1"
"Technique","Randomized Smoothing","Certified Robustness of Static Deep Learning-based Malware Detectors against Patch and Append Attacks","10.1145/3605764.3623914","2021","Machine learning-based (ML) malware detectors have been shown to be susceptible to adversarial malware examples. Given the vulnerability of deep learning detectors to small changes on the input file, we propose a practical and certifiable defense against patch and append attacks on malware detection. Our defense is inspired by the concept of (de)randomized smoothing, a certifiable defense against patch attacks on image classifiers, which we adapt by: (1) presenting a novel chunk-based smoothing scheme that operates on subsequences of bytes within an executable; (2) deriving a certificate that measures the robustness against patch attacks and append attacks. Our approach works as follows: (i) during the training phase, a base classifier is trained to make classifications on a subset of continguous bytes or chunk of bytes from an executable; (ii) at test time, an executable is divided into non-overlapping chunks of fixed size and our detection system classifies the original executable as the majority vote over the predicted classes of the chunks. Leveraging the fact that patch and append attacks can only influence a certain number of chunks, we derive meaningful large robustness certificates against both attacks. To demonstrate the suitability of our approach we have trained a classifier with our chunk-based scheme on the BODMAS dataset. We show that the proposed chunk-based smoothed classifier is more robust against the benign injection attack and state-of-The-Art evasion attacks in comparison to a non-smoothed classifier.  © 2023 Owner/Author.","Gibert D.; Zizzo G.; Le Q.","4"
"Technique","Matthews Correlation Coefficient","A new machine learning-based method for android malware detection on imbalanced dataset","10.1007/s11042-021-10647-z","2021","Nowadays, malware applications are dangerous threats to Android devices, users, developers, and application stores. Researchers are trying to discover new methods for malware detection because the complexity of malwares, their continuous changes, and damages caused by their attacks have increased. One of the most important challenges in detecting malware is to have a balanced dataset. In this paper, a detection method is proposed to identify malware to improve accuracy and reduce error rates by preprocessing the used dataset and balancing it. To attain these purposes, the static analysis is used to extract features of the applications. The ranking methods of features are used to preprocess the feature set and the low-effective features are removed. The proposed method also balances the dataset by using the techniques of undersampling, the Synthetic Minority Oversampling Technique (SMOTE), and a combination of both methods, which have not yet been studied among detection methods. Then, the classifiers of K-Nearest Neighbor (KNN), Support Vector Machine, and Iterative Dichotomiser 3 are used to create the detection model. The performance of KNN with SMOTE is better than the performance of the other classifiers. The obtained results indicate that the criteria of precision, recall, accuracy, F-measure, and Matthews Correlation Coefficient are over 97%. The proposed method is effective in detecting 99.49% of the malware’s existing in the used dataset and new malware. © 2021, The Author(s), under exclusive licence to Springer Science+Business Media, LLC part of Springer Nature.","Dehkordy D.T.; Rasoolzadegan A.","31"
"Technique","Homogeneous Ensemble","An extrinsic random-based ensemble approach for android malware detection","10.1080/09540091.2020.1853056","2021","Malware detection is a fundamental task and associated with significant applications in humanities, cybersecurity, and social media analytics. In some of the relevant studies, there is substantial evidence that heterogeneous ensembles can provide very reliable solutions, better than any individual verification model. However, so far, there is no systematic study of examining the application of ensemble methods in this task. This paper introduces a sophisticated Extrinsic Random-based Ensemble (ERBE) method where in a predetermined set of repetitions, a subset of external instances (either malware or benign) as well as classification features are randomly selected, and an aggregation function is adopted to combine the output of all base models for each test case separately. By utilising static analysis only, we demonstrate that the proposed method is capable of taking advantage of the availability of multiple external instances of different size and genre. The experimental results in AndroZoo benchmark corpora verify the suitability of a random-based heterogeneous ensemble for this task and exhibit the effectiveness of our method, in some cases improving the hitherto best reported results by more than 5%. © European Union 2020. Published by Informa UK Limited, trading as Taylor & Francis Group.","Potha N.; Kouliaridis V.; Kambourakis G.","16"
"Technique","Heterogeneous Ensemble","An extrinsic random-based ensemble approach for android malware detection","10.1080/09540091.2020.1853056","2021","Malware detection is a fundamental task and associated with significant applications in humanities, cybersecurity, and social media analytics. In some of the relevant studies, there is substantial evidence that heterogeneous ensembles can provide very reliable solutions, better than any individual verification model. However, so far, there is no systematic study of examining the application of ensemble methods in this task. This paper introduces a sophisticated Extrinsic Random-based Ensemble (ERBE) method where in a predetermined set of repetitions, a subset of external instances (either malware or benign) as well as classification features are randomly selected, and an aggregation function is adopted to combine the output of all base models for each test case separately. By utilising static analysis only, we demonstrate that the proposed method is capable of taking advantage of the availability of multiple external instances of different size and genre. The experimental results in AndroZoo benchmark corpora verify the suitability of a random-based heterogeneous ensemble for this task and exhibit the effectiveness of our method, in some cases improving the hitherto best reported results by more than 5%. © European Union 2020. Published by Informa UK Limited, trading as Taylor & Francis Group.","Potha N.; Kouliaridis V.; Kambourakis G.","16"
"Technique","Area Under Curve","Android Malware Classification Based on Static Features of an Application","10.1007/978-981-33-6987-0_45","2021","Android is the most sought-after mobile platform that has changed what mobiles can do. Due to this, a continuous increase in android malware applications has been seen that poses a significant hazard to users. Thus, the detection of malware applications in the Android environment has become a trending research field for cybersecurity researchers. Android malware detection depends on characterizing the Android application’s functionalities. Over the years, malware has evolved and has become more sophisticated. Hence, it cannot be detected only using a single static feature as it might result in a high number of false negatives. We propose a detection model in this paper that accurately classifies the samples as malware or benign with fewer false positives and false negatives. We have used string features that include suspicious API calls, used permissions, requested permissions, filtered intents, hardware components, and restricted API calls. We have then employed four machine learning algorithms, namely, Ridge Classifier, XGBoost Classifier, Random Forest, and Support Vector Classifier to evaluate the effectiveness of the binary feature vector formed by the combination of these string features. It was noted that Random Forest achieved the highest score for accuracy, precision, recall, area under curve, and F1 score. © 2021, The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd.","Ashwini S.D.; Pai M.; Sangeetha J.","2"
"Technique","Domain Adaptation","Unsupervised Domain Adaptation for Static Malware Detection based on Gradient Boosting Trees","10.1145/3459637.3482400","2021","Static malware detection is important for protection against malware by allowing for malicious files to be detected prior to execution. It is also especially suitable for machine learning-based approaches. Recently, gradient boosting decision trees (GBDT) models, e.g., LightGBM (a popular implementation of GBDT), have shown outstanding performance for malware detection. However, as malware programs are known to evolve rapidly, malware classification models trained on the (source) training data often fail to generalize to the target domain, i.e., the deployed environment. To handle the underlying data distribution drifts, unsupervised domain adaptation techniques have been proposed for machine learning models including deep learning models. However, unsupervised domain adaptation for GBDT has remained challenging. In this paper, we adapt the adversarial learning framework for unsupervised domain adaptation to enable GBDT learn domain-invariant features and alleviate performance degradation in the target domain. In addition, to fully exploit the unlabelled target data, we merge them into the training dataset after pseudo-labelling. We propose a new weighting scheme integrated into GBDT for sampling instances in each boosting round to reduce the negative impact of wrongly labelled target instances. Experiments on two large malware datasets demonstrate the superiority of our proposed method. © 2021 Owner/Author.","Qi P.; Wang W.; Zhu L.; Ng S.K.","6"
"Technique","Image Translation","A Practical Approach For Malware Identification Based On Anti-Emulation Techniques And Feature To Image Translation","10.1109/ICCTA54562.2021.9916624","2021","Cyber-Security environment has always been characterized by a continuous process, in which every technique used to detect threats was shortly followed by a malware adjustment meant to evade that detection approach. While machine learning and emulators have been an important part of this process for several years now, translating features extracted from malware samples into images and feeding them as input to convolutional neural networks is a more recent endeavor in this area. This paper presents our research on several methods that can be used in order to translate features extracted from malware emulation during static analysis (with a special focus on features that reflect anti-emulation techniques) for threat detection.  © 2021 IEEE.","Stoleru G.I.; Gavrilut D.T.","0"
"Technique","Payload Extraction","Obfuscation-resilient executable payload extraction from packed malware","","2021","Over the past two decades, packed malware is always a veritable challenge to security analysts. Not only is determining the end of the unpacking increasingly difficult, but also advanced packers embed a variety of anti-analysis tricks to impede reverse engineering. As malware's APIs provide rich information about malicious behavior, one common anti-analysis strategy is API obfuscation, which removes the metadata of imported APIs from malware's PE header and complicates API name resolution from API callsites. In this way, even when security analysts obtain the unpacked code, a disassembler still fails to recognize imported API names, and the unpacked code cannot be successfully executed. Recently, generic binary unpacking has made breakthrough progress with noticeable performance improvement. However, reconstructing unpacked code's import tables, which is vital for further malware static/dynamic analyses, has largely been overlooked. Existing approaches are far from mature: they either can be easily evaded by various API obfuscation schemes (e.g., stolen code), or suffer from incomplete API coverage. In this paper, we aim to achieve the ultimate goal of Windows malware unpacking: recovering an executable malware program from the packed and obfuscated binary code. Based on the process memory when the original entry point (OEP) is reached, we develop a hardware-assisted tool, API-Xray, to reconstruct import tables. Import table reconstruction is challenging enough in its own right. Our core technique, API Micro Execution, explores all possible API callsites and executes them without knowing API argument values. At the same time, we take advantage of hardware tracing via Intel Branch Trace Store and NX bit to resolve API names and finally rebuild import tables. Compared with the previous work, API-Xray has a better resistance against various API obfuscation schemes and more coverage on resolved Windows API names. Since July 2019, we have tested API-Xray in practice to assist security professionals in malware analysis: We have successfully rebuilt 155,811 executable malware programs and substantially improved the detection rate for 7,514 unknown or new malware variants. © 2021 by The USENIX Association. All rights reserved.","Cheng B.; Ming J.; Leal E.A.; Zhang H.; Fu J.; Peng G.; Marion J.-Y.","23"
"Technique","Discrete Cosine Transform","Malware detection using frequency domain-based image visualization and deep learning","","2021","We propose a novel method to detect and visualize malware through image classification. The executable binaries are represented as grayscale images obtained from the count of N-grams (N=2) of bytes in the Discrete Cosine Transform (DCT) domain and a neural network is trained for malware detection. A shallow neural network is trained for classification, and its accuracy is compared with deep-network architectures such as ResNet that are trained using transfer learning. Neither dis-assembly nor behavioral analysis of malware is required for these methods. Motivated by the visual similarity of these images for different malware families, we compare our deep neural network models with standard image features like GIST descriptors to evaluate the performance. A joint feature measure is proposed to combine different features using error analysis to get an accurate ensemble model for improved classification performance. A new dataset called MaleX1 which contains around 1 million malware and benign Windows executable samples is created for large-scale malware detection and classification experiments. Experimental results are quite promising with 96% binary classification accuracy on MaleX. The proposed model is also able to generalize well on larger unseen malware samples and the results compare favorably with state-of-the-art static analysis-based malware detection algorithms. © 2021 IEEE Computer Society. All rights reserved.","Mohammed T.M.; Nataraj L.; Chikkagoudar S.; Chandrasekaran S.; Manjunath B.S.","14"
"Technique","SMS Analysis","PIdARCI: Using Assembly Instruction Patterns to Identify, Annotate, and Revert Compiler Idioms","10.1109/PST52912.2021.9647781","2021","Analysis of binary code is a building block of computer security. Especially in malware or firmware analysis where source code oftentimes is not available, techniques like decompilation are utilized to Figure out the functionality of binaries. During the optimization phase in modern compilers, human-readable expressions are often transformed into instruction sequences (compiler idioms or idioms) that may be more efficient in terms of speed or size than the direct translation. However, these transformations are often considerably worse in terms of readability for the analyst. Such compiler specific sequences are not only significantly longer than the apparent translation of the original high-level language operation but also have no trivial correlation to the original expression's semantics. Modern decompilers address this issue by reverting idioms using static, manually crafted rules. In this paper, we introduce a novel approach to find and annotate arithmetic idioms with their corresponding high-level language expressions to significantly simplify manual analysis. In contrast to previous approaches, our method does not require manual work to create the patterns for matching idioms and significantly less manual labour to derive the transformation rules to calculate the original constants. In our evaluation, we compared the results of PIdARCI against the current academic and commercial state-of-the-art Ghidra, RetDec, and Hex Rays / IDA Pro. We show that PIdARCI matches more than 99% of all considered idioms, exceeding the matching rate of the other approaches.  © 2021 IEEE.","Enders S.; Rybalka M.; Padilla E.","3"
"Technique","Compression Analysis","Faster classification using compression analytics","10.1109/ICDMW53433.2021.00105","2021","Compression analytics have gained recent interest for application in malware classification and digital forensics. This interest is due to the fact that compression analytics rely on measured similarity between byte sequences in datasets without requiring prior feature extraction; in other words, these methods are featureless. Being featureless makes compression analytics particularly appealing for computer security applications, where good static features are either unknown or easy to circumvent by adversaries. However, previous classification methods based on compression analytics relied on algorithms that scaled with the size of each labeled class and the number of classes. In this work, we introduce an approach that, in addition to being featureless, can perform fast and accurate inference that is independent of the size of each labeled class. Our method is based on calculating a representative sample, the Fréchet mean, for each labeled class and using it at inference time. We introduce a greedy algorithm for calculating the Fréchet mean and evaluate its utility for classification across a variety of computer security applications, including authorship attribution of source code, file fragment type detection, and malware classification. © 2021 IEEE.","Ting C.; Johnson N.; Onunkwo U.; Derek Tucker J.","4"
"Technique","Bayesian Optimization","Bayesian Hyper-Parameter Optimisation for Malware Detection","10.3390/electronics11101640","2022","Malware detection is a major security concern and has been the subject of a great deal of research and development. Machine learning is a natural technology for addressing malware detection, and many researchers have investigated its use. However, the performance of machine learning algorithms often depends significantly on parametric choices, so the question arises as to what parameter choices are optimal. In this paper, we investigate how best to tune the parameters of machine learning algorithms—a process generally known as hyper-parameter optimisation—in the context of malware detection. We examine the effects of some simple (model-free) ways of parameter tuning together with a state-of-the-art Bayesian model-building approach. Our work is carried out using Ember, a major published malware benchmark dataset of Windows Portable Execution metadata samples, and a smaller dataset from kaggle.com (also comprising Windows Portable Execution metadata). We demonstrate that optimal parameter choices may differ significantly from default choices and argue that hyper-parameter optimisation should be adopted as a ‘formal outer loop’ in the research and development of malware detection systems. We also argue that doing so is essential for the development of the discipline since it facilitates a fair comparison of competing machine learning algorithms applied to the malware detection problem. © 2022 by the authors. Licensee MDPI, Basel, Switzerland.","Algorain F.T.; Clark J.A.","6"
"Technique","Vision Transformer","35th Australasian Joint Conference on Artificial Intelligence, AI 2022","","2022","The proceedings contain 56 papers. The special focus in this conference is on Artificial Intelligence. The topics include: The Feasibility of Deep Counterfactual Regret Minimisation for Trading Card Games; are Graph Neural Network Explainers Robust to Graph Noises?; Towards Explainable AutoML Using Error Decomposition; Does a Compromise on Fairness Exist in Using AI Models?; fairness Aware Swarm-based Machine Learning for Data Streams; explainable Network Intrusion Detection Using External Memory Models; handling Different Preferences Between Objectives for Multi-objective Feature Selection in Classification; genetic Algorithm with a Novel Leiden-based Mutation Operator for Community Detection; evolution Strategies for Sparse Reward Gridworld Environments; vision Transformer Based Model for Describing a Set of Images as a Story; niching-Assisted Genetic Programming for Finding Multiple High-Quality Classifiers; evolving Effective Ensembles for Image Classification Using Multi-objective Multi-tree Genetic Programming; QUARRY: A Graph Model for Queryable Association Rules; using Context-Free Grammar to Generate Synthetic Technical Short Texts; predicting Marimba Stickings Using Long Short-Term Memory Neural Networks; systematic Monotonicity and Consistency for Adversarial Natural Language Inference; understanding Document Data Sources Using Ontologies with Referring Expressions; tyche: A Library for Probabilistic Reasoning and Belief Modelling in Python; belief Revision with Dishonest Reports; Active Learning for kNN Using Instance Impact; Diverse Audio-to-Video GAN using Multiscale Image Fusion; Multiclass Malware Classification Using Either Static Opcodes or Dynamic API Calls; a Novel Approach to Time Series Complexity via Reservoir Computing; boosted Self–evolving Neural Networks for Pattern Recognition; machine Learning Inspired Fault Detection of Dynamical Networks; Multiclass Classification for GvHD Prognosis Prior to Allogeneic Stem Cell Transplantation; What Leads to Arrhythmia: Active Causal Representation Learning of ECG Classification; automated Fish Classification Using Unprocessed Fatty Acid Chromatographic Data: A Machine Learning Approach.","","0"
"Technique","Binary Visualization","Malware Visualization and Similarity via Tracking Binary Execution Path","10.17559/TV-20210820065715","2022","Today, computer systems are widely and importantly used throughout society, and malicious codes to take over the system and perform malicious actions are continuously being created and developed. These malicious codes are sometimes found in new forms, but in many cases they are modified from existing malicious codes. Since there are too many threatening malicious codes that are being continuously generated for human analysis, various studies to efficiently detect, classify, and analyze are essential. There are two main ways to analyze malicious code. First, static analysis is a technique to identify malicious behaviors by analyzing the structure of malicious codes or specific binary patterns at the code level. The second is a dynamic analysis technique that uses virtualization tools to build an environment in a virtual machine and executes malicious code to analyze malicious behavior. The method used to analyze malicious codes in this paper is a static analysis technique. Although there is a lot of information that can be obtained from dynamic analysis, there is a disadvantage that it can be analyzed normally only when the environment in which each malicious code is executed is matched. However, since the method proposed in this paper tracks and analyzes the execution stream of the code, static analysis is performed, but the effect of dynamic analysis can be expected.The core idea of this paper is to express the malicious code as a 25 ☓ 25 pixel image using 25 API categories selected. The interaction and frequency of the API is made into a 25 ☓ 25 pixel image based on a matrix using RGB values. When analyzing the malicious code, the Euclidean distance algorithm is applied to the generated image to measure the color similarity, and the similarity of the mutual malicious behavior is calculated based on the final Euclidean distance value. As a result, as a result of comparing the similarity calculated by the proposed method with the similarity calculated by the existing similarity calculation method, the similarity was calculated to be 5-10% higher on average. The method proposed in this study spends a lot of time deriving results because it analyzes, visualizes, and calculates the similarity of the visualized sample. Therefore, it takes a lot of time to analyze a huge number of malicious codes. A large amount of malware can be analyzed through follow-up studies, and improvements are needed to study the accuracy according to the size of the data set. © 2022, Strojarski Facultet. All rights reserved.","Kim J.; Lee S.; Cho D.; Youn J.","5"
"Technique","Voting Classifiers","Ensemble Model Ransomware Classification: A Static Analysis-based Approach","10.1007/978-981-16-6723-7_12","2022","The growth of malware attacks has been phenomenal in the recent past. The COVID-19 pandemic has contributed to an increase in the dependence of a larger than usual workforce on digital technology. This has forced the anti-malware communities to build better software to mitigate malware attacks by detecting it before they wreak havoc. The key part of protecting a system from a malware attack is to identify whether a given file/software is malicious or not. Ransomware attacks are time-sensitive as they must be stopped before the attack manifests as the damage will be irreversible once the attack reaches a certain stage. Dynamic analysis employs a great many methods to decipher the way ransomware files behave when given a free rein. But, there still exists a risk of exposing the system to malicious code while doing that. Ransomware that can sense the analysis environment will most certainly elude the methods used in dynamic analysis. We propose a static analysis method along with machine learning for classifying the ransomware using opcodes extracted by disassemblers. By selecting the most appropriate feature vectors through the tf-idf feature selection method and tuning the parameters that better represent each class, we can increase the efficiency of the ransomware classification model. The ensemble learning-based model implemented on top of N-gram sequence of static opcode data was found to improve the performance significantly in comparison to RF, SVN, LR, and GBDT models when tested against a dataset consisting of live encrypting ransomware samples that had evasive technique to dodge dynamic malware analysis. © 2022, The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd.","Johnson S.; Gowtham R.; Nair A.R.","4"
"Technique","Exponential Moving Average","HARD-Lite: A Lightweight Hardware Anomaly Realtime Detection Framework Targeting Ransomware","10.1109/AsianHOST56390.2022.10022111","2022","Recent years have witnessed a surge in ransomware attacks. Especially, many a new variant of ransomware has continued to emerge, employing more advanced techniques distributing the payload while avoiding detection. This renders the traditional static ransomware detection mechanism ineffective. In this paper, we present our Hardware Anomaly Realtime Detection - Lightweight (HARD-Lite) framework that employs semi-supervised machine learning method to detect ransomware using low-level hardware information. By using an LSTM network with a weighted majority voting ensemble and exponential moving average, we are able to take into consideration the temporal aspect of hardware-level information formed as time series in order to detect deviation in system behavior, thereby increasing the detection accuracy whilst reducing the number of false positives. Testing against various ransomware across multiple families, HARD-Lite has demonstrated remarkable effectiveness, detecting all cases tested successfully. What's more, with a hierarchical design that distributing the classifier from the user machine that is under monitoring to a server machine, Hard-Lite enables good scalability as well. © 2022 IEEE.","Woralert C.; Liu C.; Blasingame Z.","2"
"Technique","Rowhammer Mitigation","Proceedings of the 11th International Workshop on Hardware and Architectural Support for Security and Privacy, HASP 2022","","2022","The proceedings contain 7 papers. The topics discussed include: ALARM: active learning of Rowhammer mitigations; side-channel analysis and countermeasure design for implementation of Curve448 on Cortex-M4; SFP: providing system call flow protection against software and fault attacks; clueless: a tool characterizing values leaking as addresses; SoK: how not to architect your next-generation TEE malware?; robust and secure hybrid quantum-classical computation on untrusted cloud-based quantum hardware; and short paper: static and microarchitectural ML-based approaches for detecting spectre vulnerabilities and attacks.","","0"
"Technique","Knowledge Distillation","Lightweight Identification of Android Malware with Knowledge Distillation and Deep Learning Approach","10.22042/isecure.2022.14.3.9","2022","Today, with the advancement of science and technology, the use of smartphones has become very common, and the Android operating system has been able to gain lots of popularity in the meantime. However, these devices face many security challenges, including malware. Malware may cause many problems in both the security and privacy of users. So far, the state-of-the-art method in malware detection is based on deep learning, however, this approach requires a lot of computing resources and leads to high battery usage, which is unacceptable in smartphone devices. This paper proposes the knowledge distillation approach for lightening android malware detection. To this end, first, a heavy model is taught and then with the knowledge distillation approach, its knowledge is transferred to a light model called student. To simplify the learning process, soft labels are used here. The resulting model, although slightly less accurate in identification, has a much smaller size than the heavier model. Moreover, ensemble learning was proposed to recover the dropped accuracy. We have tested the proposed approach on CISC datasets including dynamic and static features, and the results show that the proposed method is not only able to lighten the model up to 99%, but also maintain the accuracy of the lightened model to the extent of the heavy model. © 2022 ISC. All rights reserved.","Mozafari S.; Bidgoly A.J.","0"
"Technique","Structural Similarity Index","Mitigating adversarial evasion attacks of ransomware using ensemble learning","10.1016/j.compeleceng.2022.107903","2022","Ransomware continues to pose a significant threat to cybersecurity by extorting money from users by locking their devices and personal data. The attackers force the payment of a ransom in order to restore access to personal files. Because of the structural similarity, detection of ransomware and benign applications becomes vulnerable to evasion attacks. Ensemble learning can provide countermeasures, while attackers can use the same technique to improve the effectiveness of their respective attacks. This motivates us to investigate whether the distinct ensemble method can achieve better performance when combined with the voting-based method. This research proposes a hybrid approach that examines permissions, text, and network-based features both statically and dynamically by monitoring memory usage, system call logs, and CPU usage. Ensemble machine learning analyzers on static and dynamic features extracted from Android malware applications (ransomware and non-ransomware) are then trained in the designed model. Our experimental results show that the proposed ensemble classification and detection technique can classify unknown static and dynamic ransomware behavior to mitigate adversarial evasion attacks. © 2022 The Author(s)","Ahmed U.; Lin J.C.-W.; Srivastava G.","56"
"Technique","Corner Detection","Malicious code clone detection technology based on deep learning; [一种基于深度学习的恶意代码克隆检测技术]","10.13700/j.bh.1001-5965.2020.0400","2022","Malicious code clone detection has become an effective way to analyze malicious code homology and advanced persistent threat (APT) attacks. In this paper, we collect samples of different APT organizations from public threat intelligence, and propose a deep learning based malicious code clone detection framework to detect the similarity between the functions in newly discovered malicious code and the malicious code in known APT organizational resources in order to efficiently analyze malware and quickly identify the source of APT attacks. We perform static analysis of malicious code through disassembly technology, use its key function call graph and disassembly code as the features of the malicious code, and then classify the malicious code in the APT organization library according to the neural network model. Through extensive evaluation and comparison with our previous models (MCrab), the improved model is better than the previous model, which can effectively detect and classify malicious code clones and obtain higher detection rate. © 2022, Editorial Board of JBUAA. All right reserved.","Shen Y.; Yan H.; Xia C.; Han Z.","4"
"Technique","Deep Ensembles","Deep-Ensemble and Multifaceted Behavioral Malware Variant Detection Model","10.1109/ACCESS.2022.3168794","2022","Every day, hundreds of thousands of new malware programs are developed and spread worldwide in cyberspace. Most of these malware programs are malware variants such as polymorphic and metamorphic malware, which are created from older versions of malware and able to change their structures and function flows to circumvent security solutions. The accuracy of malware variant detection is a crucial challenge. Many existing malware variant detections use static features extracted from the physical structure of malware file, such as opcodes and function flows. Unfortunately, the static features are subject to obfuscation and code shelling using simple obfuscation techniques. Although a malware variant can change its structure and function flows, it is widely believed that the malware variant cannot hide its malicious behavioral patterns during the runtime. Accordingly, dynamic, or behavioral analysis-based features were suggested by many studies to detect malware variants accurately. However, most of these studies are solely dependent on application-programmable interface calls (or API calls), which is not enough to accurately distinguish between malware and benign due to API-based obfuscation techniques. Therefore, a malware variant detection model that combines different behavioral activities can improve detection accuracy while reducing the false-negative rate. To this end, this study proposed a Deep-Ensemble and Multifaceted Behavioral Malware Variant Detection Model using Sequential Deep Learning and Extreme Gradient Boosting Techniques. Different behavioral features were extracted from the dynamic analysis environment. Then, a feature extraction algorithm that can automatically extract effective representative patterns has been designed and developed to extract the hidden representative features of the malware variants using a sequential deep learning model. These features have been fed into a developed extreme gradient boosting-based classifier for decision making. Extensive experiments have been carried out to validate the proposed scheme. The results were compared to the other related techniques in the field. The results show that the proposed model is reliable, as it improves the detection rate while reducing the false-negative rate.  © 2013 IEEE.","Al-Hashmi A.A.; Ghaleb F.A.; Al-Marghilani A.; Yahya A.E.; Ebad S.A.; Muhammad Saqib M.S.; Darem A.A.","28"
"Technique","Multi-Head Architecture","Android Malware Detection Using Deep Learning","10.1007/978-3-031-15030-2_10","2022","This chapter investigates the potential of deep learning architectures for Android malware detection, specifically convolutional neural networks (CNNs) using natural language processing (NLP) concepts. The proposed solution is based on static analysis of raw opcode sequences from disassembled programs and other complementary features such as API calls and permissions, with features indicative of malware automatically learned by the network. This removes the need for hand-engineered malware features while performing classification. Using the Drebin and AMD benchmark datasets, the benefits of this multi-view architecture to combine multiple feature sources are demonstrated in our findings. We conclude the use of deep learning architectures enables state-of-art results in automatic malware detection, while reducing the dependency on feature engineering and domain expertise. Using multi-view compared to single-view architectures improves performance through exposure to simultaneous sources of information, learning a more effective set of features. The model achieves state-of-the art detection performance in a challenging zero-day scenario, reducing false positives by 77% in relative terms on average, an important metric for potential real-world deployment. © The Author(s), under exclusive license to Springer Nature Switzerland AG 2023.","Millar S.; McLaughlin N.; del Rincon J.M.; Miller P.","4"
"Technique","Knowledge Distillation Transfer","A Novel Knowledge Distillation Framework with Intermediate Loss for Android Malware Detection","10.1109/CSDE56538.2022.10089266","2022","With the popularity and self-contained functions of Android operating system, malicious attackers have targeted it primarily. Along with attackers are gradually skilled in avoid deep learning detectors, many in-depth researches on Android malware detection have been done. However, these works have complex models and enormous parameters. To settle this dilemma, we proposed a knowledge distillation architecture with intermediate loss to narrow the capability gap by promoting the student network emulate valuable hint knowledge from the intermediate layers of teacher network, based on Multi-Layer Perceptron (MLP). Besides, our framework utilizes static based features, namely permissions and vulnerabilities to effectively characterize applications and construct dataset. We evaluated our framework from various performance metrics and compared with other state-of-the-art deep neural networks. The experimen-tal results indicates that our framework own better performance and is perspective.  © 2022 IEEE.","Xia M.; Xu Z.; Zhu H.","3"
"Technique","Box Counting Method","An Android Malware Detection System using a Knowledge-based Permission Counting Method","10.30630/joiv.6.1.859","2022","— As the number of damage cases caused by malicious apps increases, accurate detection is required through various detection conditions, not just detection using simple techniques. This paper proposes a knowledge-based machine learning method using authority information and adding its usage counting features. This method classifies training apps and malicious apps through machine learning using permission features in manifest.xml of Android apps. As a result of the experiment, accuracy, recall, precision, F1 score are 99.01%, 97.70%, 100.0%, 99.01%, respectively. Since recall is higher than other indicators, it accurately predicts malicious apps as malicious. In other words, the proposed system effectively prevents the distribution of malicious apps. As the number of harmful apps develops daily, it was determined in this study that it is critical to detect malicious apps using a machine learning model effectively. However, utilizing permission alone as a criterion for distinguishing between legitimate and malicious apps is insufficient to detect all harmful apps that emerge from new attack technologies. Combining feature information efficient in detecting malicious apps, such as APIs that access and control sensitive data from users or adding other detection criteria will likely improve the detection model's accuracy. According to the upcoming study, recent attackers have used obfuscation to disguise harmful code and hinder static analysis of rogue programs. It is important to consider how to detect harmful apps that are obfuscated in this way. © 2022, Politeknik Negeri Padang. All rights reserved.","Lee S.-A.; Yoon A.-R.; Lee J.-W.; Lee K.","4"
"Technique","Late Fusion","Malware Detection in Internet of Things Devices Based on Association Models","10.1145/3603781.3603913","2023","In recent years, attackers have shifted aggressively targeting Internet of Things devices. In this paper, we propose the association IoT malware detection model. Before being associated, the model goes through two processing phases, each having two types of static and dynamic features. The process consists of 3 main steps: (1) the files are extracted static feature (grayscale image) and dynamic feature (system call through V-Sandbox sandbox), (2) features are preprocessed and fed into the learning models; for the grayscale image feature, a convolutional neural network (CNN) is used; for the system call graph feature, traditional machine learning algorithms are used; (3) the results from the two learning models are combined by late fusion to decide the final prediction label for the input files. The performance of the proposed method was evaluated, and its detection accuracy was 99.14% better than in the static analysis and dynamic analysis, which had 99.06% and 98.08% detection accuracy, respectively. © 2023 ACM.","Quoc-Dung N.","0"
"Technique","Wilcoxon Signed-Rank Test","A novel deep learning-based approach for malware detection","10.1016/j.engappai.2023.106030","2023","Malware detection approaches can be classified into two classes, including static analysis and dynamic analysis. Conventional approaches of the two classes have their respective advantages and disadvantages. For example, static analysis is faster but cannot detect the malware variants generated through code obfuscation, whereas dynamic analysis can effectively detect variants generated through code obfuscation but is slower and requires intensive resources. This paper proposes a novel deep learning-based approach for malware detection. It delivers better performance than conventional approaches by combining static and dynamic analysis advantages. First, it visualises a portable executable (PE) file as a coloured image. Second, it extracts deep features from the colour image using fine-tuned deep learning model. Third, it detects malware based on the deep features using support vector machines (SVM). The proposed method combines deep learning with machine learning and eliminates the need for intensive feature engineering tasks and domain knowledge. The proposed approach is scalable, cost-effective, and efficient. The detection effectiveness of the proposed method is validated through 12 machine learning models and 15 deep learning models. The generalisability of the proposed framework is validated on various benchmark datasets. The proposed approach outperformed with an accuracy of 99.06% on the Malimg dataset. The Wilcoxon signed-rank test is used to show the statistical significance of the proposed framework. The detailed experimental results demonstrate the superiority of the proposed method over the other state-of-the-art approaches, with an average increase in accuracy of 16.56%. Finally, to tackle the problems of imbalanced data and the shortage of publicly available datasets for malware detection, various data augmentation techniques are proposed, which lead to improved performance. It is evident from the results that the proposed framework can be useful to the defence industry, which will be helpful in devising more efficient malware detection solutions. © 2023 Elsevier Ltd","Shaukat K.; Luo S.; Varadharajan V.","150"
"Technique","LIME Explanation","Explainable Ensemble Learning Based Detection of Evasive Malicious PDF Documents","10.3390/electronics12143148","2023","PDF has become a major attack vector for delivering malware and compromising systems and networks, due to its popularity and widespread usage across platforms. PDF provides a flexible file structure that facilitates the embedding of different types of content such as JavaScript, encoded streams, images, executable files, etc. This enables attackers to embed malicious code as well as to hide their functionalities within seemingly benign non-executable documents. As a result, a large proportion of current automated detection systems are unable to effectively detect PDF files with concealed malicious content. To mitigate this problem, a novel approach is proposed in this paper based on ensemble learning with enhanced static features, which is used to build an explainable and robust malicious PDF document detection system. The proposed system is resilient against reverse mimicry injection attacks compared to the existing state-of-the-art learning-based malicious PDF detection systems. The recently released EvasivePDFMal2022 dataset was used to investigate the efficacy of the proposed system. Based on this dataset, an overall classification accuracy greater than 98% was observed with five ensemble learning classifiers. Furthermore, the proposed system, which employs new anomaly-based features, was evaluated on a reverse mimicry attack dataset containing three different types of content injection attacks, i.e., embedded JavaScript, embedded malicious PDF, and embedded malicious EXE. The experiments conducted on the reverse mimicry dataset showed that the Random Committee ensemble learning model achieved 100% detection rates for embedded EXE and embedded JavaScript, and 98% detection rate for embedded PDF, based on our enhanced feature set. © 2023 by the authors.","Yerima S.Y.; Bashar A.","6"
"Technique","Metadata Analysis","Research on Software Supply Chain Poisoning Attack Detection Scheme Based on Deep Learning","10.1145/3652628.3652768","2023","As the modern software development process continues to evolve, the significance of the software supply chain has grown substantially. Developers often utilize third-party software packages in the development phase to enhance efficiency, improve software quality and extend functionality. However, the rising prevalence of software supply chain poisoning attacks against third-party software packages has become a serious security threat. In response to this challenge, we propose a comprehensive detection solution based on deep learning and traditional methods. The approach employs both metadata analysis and static analysis techniques, combining a model for detecting typo-squatting attacks with a static detection model. This integration enables real-time detection of malicious packages in third-party software repositories. We further collect a substantial number of malicious package samples and implements a prototype system, demonstrating the effectiveness and efficiency of the proposed solution. © 2023 ACM.","Tang K.; Fan S.","0"
"Technique","Precision-Recall Curves","Threshold Analysis Using Probabilistic Xgboost Classifier for Hardware Trojan Detection","10.1007/s10836-023-06079-2","2023","The fabless nature of integrated circuits manufacturing leaves them vulnerable to modifications by ill-intentioned third party. There arises a necessity for security measures during their manufacturing to protect them from covert modifications known as hardware Trojans. Static analysis of gate-level synthesized integrated circuits can prove helpful in detecting the presence of unwanted circuitry within the host. This paper proposes a static analysis technique of gate-level integrated circuits using supervised probabilistic classifier through effective threshold analysis. New and existing relevant features are extracted that relates to hardware Trojan properties and normalised accordingly. Effective features are selected using their feature importance values. Variance threshold has been used to create a high entropy feature subset to train a supervised model using XGBoost algorithm with relevant hyperparameters. Threshold values of the probabilistic classifier are determined through analysis of threshold obtained using receiver operating characteristic and precision-recall curves. The chosen techniques showcase hardware Trojan detection with high accuracy over gate-level synthesized circuits. © 2023, The Author(s), under exclusive licence to Springer Science+Business Media, LLC, part of Springer Nature.","Dhar T.; Das R.; Giri C.; Roy S.K.","2"
"Technique","Byte Histogram","A Wolf in Sheep's Clothing: Query-Free Evasion Attacks Against Machine Learning-Based Malware Detectors with Generative Adversarial Networks","10.1109/EuroSPW59978.2023.00052","2023","Malware detectors based on machine learning (ML) have been shown to be susceptible to adversarial malware examples. However, current methods to generate adversarial malware examples still have their limits. They either rely on detailed model information (gradient-based attacks), or on detailed outputs of the model - such as class probabilities (score-based attacks), neither of which are available in real-world scenarios. Alternatively, adversarial examples might be crafted using only the label assigned by the detector (label-based attack) to train a substitute network or an agent using reinforcement learning. Nonetheless, label-based attacks might require querying a black-box system from a small number to thousands of times, depending on the approach, which might not be feasible against malware detectors.This work presents a novel query-free approach to craft adversarial malware examples to evade ML-based malware detectors. To this end, we have devised a GAN-based framework to generate adversarial malware examples that look similar to benign executables in the feature space. To demonstrate the suitability of our approach we have applied the GAN-based attack to three common types of features usually employed by static ML-based malware detectors: (1) Byte histogram features, (2) API-based features, and (3) String-based features. Results show that our model-agnostic approach performs on par with MalGAN, while generating more realistic adversarial malware examples without requiring any query to the malware detectors. Furthermore, we have tested the generated adversarial examples against state-of-the-art multimodal and deep learning malware detectors, showing a decrease in detection performance, as well as a decrease in the average number of detections by the antimalware engines in VirusTotal.  © 2023 IEEE.","Gibert D.; Planes J.; Le Q.; Zizzo G.","11"
"Technique","Histogram Equalization","Malware-on-the-Brain: Illuminating Malware Byte Codes With Images for Malware Classification","10.1109/TC.2022.3160357","2023","Malware is a piece of software that was written with the intent of doing harm to data, devices, or people. Since a number of new malware variants can be generated by reusing codes, malware attacks can be easily launched and thus become common in recent years, incurring huge losses in businesses, governments, financial institutes, health providers, etc. To defeat these attacks, malware classification is employed, which plays an essential role in anti-virus products. However, existing works that employ either static analysis or dynamic analysis have major weaknesses in complicated reverse engineering and time-consuming tasks. In this paper, we propose a visualized malware classification framework called VisMal, which provides highly efficient categorization with acceptable accuracy. VisMal converts malware samples into images and then applies a contrast-limited adaptive histogram equalization algorithm to enhance the similarity between malware image regions in the same family. We provided a proof-of-concept implementation and carried out an extensive evaluation to verify the performance of our framework. The evaluation results indicate that VisMal can classify a malware sample within 4.0 ms and have an average accuracy of 96.0%. Moreover, VisMal provides security engineers with a simple visualization approach to further validate its performance.  © 1968-2012 IEEE.","Zhong F.; Chen Z.; Xu M.; Zhang G.; Yu D.; Cheng X.","28"
"Technique","Anti-VM Detection","A Research on Countering Virtual Machine Evasion Techniques of Malware in Dynamic Analysis","10.1007/978-3-031-19958-5_55","2023","Malware underlies many criminal activities, especially money-driven criminal activities such as ransomware as well as advanced threats (APT). In recent time, the number and sophistication of malware are increasing significant. To understand malware activities, researchers can used static analysis and dynamic analysis. With dynamic analysis, samples must be run in the safe environment like virtual machine (VM) or an air gapped computer. Many malwares can detect the environment in which they are being launched. They change their behavior if the virtual environment is detected. It is necessary to create a virtual machine with the characteristics of a physical machine. In this study, we propose a system to create virtual machines that can be used to analyze malware using dynamic analysis techniques. The virtual machines generated from the proposed system can deceive malware using Anti-VM techniques. © 2023, The Author(s), under exclusive license to Springer Nature Switzerland AG.","Nep P.R.; Cam N.T.","1"
"Technique","Quantization Methods","Classification model of packed malware with attention mechanism","10.1117/12.2683184","2023","In recent years, deep learning has been applied to the field of malware detection to improve the detection accuracy. However, many malware detection models based on static features and visualization methods do not consider the impact of code confusion, and the detection rate of packed malware is low. In order to solve this problem, this paper proposes a model SE-MHSA combining channel attention and multi head attention mechanism. With ResNet as the backbone network, we combine the SE module and MHSA module to extract channel, local and global features, and weaken the interference caused by code obfuscation by fusing multi-level features, so that the model can capture the correlation information of each partial feature and improve the detection capability of the model. The experiment is carried out on the public data set Malimg, and the accuracy is 99.6%. The experiment is carried out on the packed data set Virushare-Packed, and the accuracy is 95%. Compared with other models, this model achieves better results, and verifies the generalization and anti-confusion ability of the proposed model. © 2023 SPIE.","Ma S.; Liu W.","0"
"Technique","Image Segmentation","Data-Driven Malware Detection for 6G Networks: A Survey From the Perspective of Continuous Learning and Explainability via Visualisation","10.1109/OJVT.2022.3219898","2023","5G is inherently prone to security vulnerabilities. We witness that many today's networks contain 5G security flaws due to their reliance on the existing 4G network core. A lack of security standards for 5G IoT devices means network breaches and malware threats might run uncontrolled. The future 6G network is predicted to be implemented with artificial intelligence-driven communication via machine learning, enhanced edge computing, post-quantum cryptography and so forth. With the activation of edge computing, the computing power available at supercomputing servers is to be integrated directly into the devices at the entry point of a network in a distributed manner (e.g., antennas, routers, IoT sensors, etc). This feature brings an equal quality of service everywhere including remote regions (a.k.a service everywhere) which will trigger an exponential growth of associated applications. In this intricate environment, malware attacks are becoming more challenging to detect. This paper thus reviews the theoretical and experimental data-driven malware detection literature, in the large-scale data-intensive field, relating to: (1) continuous learning, including new concepts in multi-domain to multi-target learning and the challenges associated with unseen/unknown data, imbalance data and data scarcity, and (2) new explainability via visualisation concepts with a multi-labelling approach which allows identifying malware by their recipes while improving the interpretability of its decision process.  © 2020 IEEE.","Uysal D.T.; Yoo P.D.; Taha K.","27"
"Technique","DBSCAN Clustering","APEC: App Permission Classification with Efficient Clustering","10.1109/CIISCA59740.2023.00042","2023","Android dominates the smartphone operating system market, publishing several apps daily. Hence it is hard to track apps and restrict malware apps. The apps tend to mine the user data without the user's knowledge. The user allows most permissions without reviewing them and considering their future consequences. Hence, unwanted permissions can breach a user's privacy. The paper enhances the 2 million app permission dataset by adding the category of the apps from the Google Play Store. It uses this dataset and proposes a novel three-Tier static model named APEC (App Permission classification with Efficient Clustering). It checks whether the app permissions are safe or unsafe based on their usage frequency in the app category on Google Play Store. APEC comprises three levels categorizing apps, clustering and approval, and classification. It uses DBSCAN clustering to create a cluster of apps based on category and rates their permissions as safe and unsafe. APEC uses the Decision Tree and Random Forest machine learning algorithm to classify the permissions requested by the new apps as safe or unsafe. It achieves an accuracy of 93.8% and 95.8% using the Decision Tree and Random Forest, respectively. It can assist the user in choosing the appropriate permissions and the developer in choosing the minimum amount required for the apps' smooth functioning,  © 2023 IEEE.","Rawal P.S.; Sethia D.","1"
"Technique","Orientation Detection","An Improved Pre-Exploitation Detection Model for Android Malware Attacks","10.48084/etasr.7661","2024","This paper presents an innovative approach to the early detection of Android malware, focusing on a dynamic pre-exploitation phase identification system. Traditional methods often rely on static thresholding to delineate the pre-exploitation phase of malware attacks, which can be insufficient due to the diverse behaviors exhibited by various malware families. This study introduces the Dynamic Pre-exploitation Boundary Definition and Feature Extraction (DPED-FE) system to address these limitations, which utilizes entropy for change detection, thus enabling more accurate and timely identification of potential threats before they reach the exploitation phase. A comprehensive analysis of the system's methodology is provided, including the use of vector space models with Kullback-Leibler divergence for dynamic boundary detection and advanced feature extraction techniques such as Weighted Term Frequency-Inverse Document Frequency (WF-IDF) to enhance its predictive capabilities. The experimental results demonstrate the superior performance of DPED-FE compared to traditional methods, highlighting its effectiveness in real-world scenarios. © by the authors.","Al Besher H.S.A.; Bin Rohani M.F.; Al-Rimy B.A.S.","0"
"Technique","Contrastive Learning","Research on Deep Learning-Based Techniques for Advanced Persistent Threat Malware Detection and Attribution","10.1117/12.3029125","2024","Advanced Persistent Threat attacks(APT) are targeted attacks launched by professional hacker organizations using advanced techniques, resulting in significant harm. Therefore, there is an urgent need to detect APT malware and trace their associated organizations. This paper proposes an improved Transformer-based method for APT malware detection and attribution. In terms of detection, dynamic behaviors of APT malware are extracted, and an information filtering gate mechanism is applied to reduce redundant feature noise in the original Transformer model. A contrastive learning-constrained model is used for information filtering, self-training, and optimization. In terms of attribution, static features of APT malware samples are extracted, global features of sequence data are established using the Transformer model, local features are constructed using Incremental Dilated Convolutional Neural Network, and features are fused using attention mechanism. This method outperforms the baseline methods. © 2024 SPIE.","Wang N.; Fu H.","1"
"Technique","Few-Shot Learning","FAMCF: A few-shot Android malware family classification framework","10.1016/j.cose.2024.104027","2024","Android malware is a major cyber threat to the popular Android platform which may influence millions of end users. To battle against Android malware, a large number of machine learning-based approaches have been developed, and have achieved promising results. However, the vast majority of the existing work relies on a large number of labeled samples which are unfortunately not available for the newly reported Android malware families. This poses a critical challenge to classify such few-shot Android malware families. In this paper, we propose FAMCF, a novel few-shot learning-based classification pipeline to solve the problem. Faced with insufficient labeled samples from few-shot malware families, we learn how to extract features by training on another base dataset which is of a much larger scale but has disjoint label space with the few-shot families. We consider three types of features based on static analysis, namely permissions, API calls, and opcodes. We train a classifier for each type of features, utilizing a metric-based few-shot learning approach, and get an ensemble decision. Specifically, for each classifier, given a query sample to be classified, we propose to compare it to the prototypes of all the families, which are generated in a query-dependent way. We compared the classification performance of FAMCF to that of the existing solutions of multiple categories, including those traditional machine learning-based approaches, few-shot Android malware classification approaches, and also state-of-the-art few-shot learning methods from other fields. We also analyzed robustness of FAMCF against multiple popular obfuscation techniques. The extensive experiments on the popular Drebin and CICInvesAndMal2019 datasets confirm the effectiveness and robustness of FAMCF in classifying few-shot Android malware families, e.g., we achieve at least 4.86% improvement on classification accuracy for Drebin and successfully kept the decrease in accuracy within 1% under the seven common types of obfuscation techniques. © 2024 Elsevier Ltd","Zhou F.; Wang D.; Xiong Y.; Sun K.; Wang W.","4"
"Technique","API Sequence Analysis","Dynamic Malware Pattern Analysis with Rapid Node Behaviour Analysis Using Self Replication Model for Network Intrusion Detection","10.18280/isi.290432","2024","Advanced machine learning and artificial intelligence-based malware identification and categorization activities in real time are the primary emphasis of Malware Analysis and Intrusion identification in Cyber Physical Systems, along with the time sequence output of observed activity. Malware and other cyber threats have prompted the development of numerous static and behavior based detection approaches. These cyber security solutions show promise on large datasets, but they aren't reliable or resilient enough for real-world detection. Problems like virus detection and the identification of malevolent behavior highlight the critical need for improved cyber security solutions based on artificial intelligence. For those who utilize the internet, malware has become an enormous issue. The application is executed in a secure virtual environment and its actions are tracked in real-time to facilitate dynamic malware detection. A lot of people utilize API sequence analysis to find out if the software that is currently running is dangerous. While existing systems do consider API names and usage frequencies, feature mining of API sequence falls short, making it possible for some malware to evade detection. The two mainstays of dynamic analysis now in use either modify the virus itself or use an elevated component to execute the analysis. In contrast to the latter, which usually causes a discernible performance overhead, the former is instantly identifiable by even the most sophisticated malware. One of the most important steps in avoiding cyber assaults is developing new cyber security methods to detect hostile nodes before they communicate. Traditional dynamic malware detection models need to monitor the nodes more keenly for deep pattern analysis and eradicating nodes that cause malicious actions in the network. This research proposes a Dynamic Malware Pattern Analysis with Rapid Node Behaviour Analysis using Self Replication Model (DMPA-RNBA-SRM) for Network Intrusion Detection in the network. The normal patterns will be allowed into the network and the patterns of the nodes that are unusual are not allowed temporarily. The Pattern analysis and updating is performed and the detected patterns are analyzed and if they are malicious in nature, they will not be allowed into the network. The self replication model will be triggered when a unusual pattern is detected and required actions are performed in the network. The proposed model dynamic pattern analysis and detection is high when compared to traditional models. Copyright: ©2024 The authors.","Mokkapati R.; Dasari V.L.","1"
"Technique","Siamese Networks","Malware Detection Using Dual Siamese Network Model","10.32604/cmes.2024.052403","2024","This paper proposes a new approach to counter cyberattacks using the increasingly diverse malware in cyber security. Traditional signature detection methods that utilize static and dynamic features face limitations due to the continuous evolution and diversity of new malware. Recently, machine learning-based malware detection techniques, such as Convolutional Neural Networks (CNN) and Recurrent Neural Networks (RNN), have gained attention. While these methods demonstrate high performance by leveraging static and dynamic features, they are limited in detecting new malware or variants because they learn based on the characteristics of existing malware. To overcome these limitations, malware detection techniques employing One-Shot Learning and Few-Shot Learning have been introduced. Based on this, the Siamese Network, which can effectively learn from a small number of samples and perform predictions based on similarity rather than learning the characteristics of the input data, enables the detection of new malware or variants. We propose a dual Siamese network-based detection framework that utilizes byte images converted from malware binary data to grayscale, and opcode frequency-based images generated after extracting opcodes and converting them into 2-gram frequencies. The proposed framework integrates two independent Siamese network models, one learning from byte images and the other from opcode frequency-based images. The detection models trained on the different kinds of images generated separately apply the L1 distance measure to the output vectors the models generate, calculate the similarity, and then apply different weights to each model. Our proposed framework achieved a malware detection accuracy of 95.9% and 99.83% in the experiments using different malware datasets. The experimental results demonstrate that our malware detection model can effectively detect malware by utilizing two different types of features and employing the dual Siamese network-based model. © 2024 The Authors.","An B.; Yang J.; Kim S.; Kim T.","4"
"Technique","Adversarial Patches","MalPatch: Evading DNN-Based Malware Detection with Adversarial Patches","10.1109/TIFS.2023.3333567","2024","Static analysis is a crucial protection layer that enables modern antivirus systems to address the rampant proliferation of malware. These systems are increasingly relying on deep neural networks (DNNs) to automatically extract reliable features and achieve outstanding detection accuracy. Since DNNs are known to be vulnerable to adversarial examples, several studies have proposed practical evasion attacks to generate adversarial perturbations that can evade malware detectors. These attacks, however, require specific designs for the given input sample, prohibiting them from large-scale deployment. Therefore, it is more practical to generate sample-agnostic perturbations that do not involve recalculations regardless of the input malware sample. To this end, we leverage an adversarial patch attack, which is a special type of adversarial attack that dose not know the sample being modified during the attack construction process. In particular, we propose a new adversarial attack against malware detection systems called MalPatch. It locates the nonfunctional part of malware for adversarial patch injection to protect its executability while generating adversarial examples based on different strategies. The generated patch can be injected into any malware sample, fooling the detector into classifying it as benign. Experimental results demonstrate that MalPatch is effective under different attack settings. In the white-box setting, MalPatch achieves 69%-78% success rates against DNN detectors based on raw byte features and 47%-96% success rates against four grayscale detectors based on image features. In the black-box setting, the success rates of MalPatch against the same models reach 54%-74% and 27%-42%, respectively. We conclude by discussing several of its potential countermeasures and the generality of our approach.  © 2005-2012 IEEE.","Zhan D.; Duan Y.; Hu Y.; Li W.; Guo S.; Pan Z.","12"
"Technique","Universal Adversarial Perturbations","MalPatch: Evading DNN-Based Malware Detection with Adversarial Patches","10.1109/TIFS.2023.3333567","2024","Static analysis is a crucial protection layer that enables modern antivirus systems to address the rampant proliferation of malware. These systems are increasingly relying on deep neural networks (DNNs) to automatically extract reliable features and achieve outstanding detection accuracy. Since DNNs are known to be vulnerable to adversarial examples, several studies have proposed practical evasion attacks to generate adversarial perturbations that can evade malware detectors. These attacks, however, require specific designs for the given input sample, prohibiting them from large-scale deployment. Therefore, it is more practical to generate sample-agnostic perturbations that do not involve recalculations regardless of the input malware sample. To this end, we leverage an adversarial patch attack, which is a special type of adversarial attack that dose not know the sample being modified during the attack construction process. In particular, we propose a new adversarial attack against malware detection systems called MalPatch. It locates the nonfunctional part of malware for adversarial patch injection to protect its executability while generating adversarial examples based on different strategies. The generated patch can be injected into any malware sample, fooling the detector into classifying it as benign. Experimental results demonstrate that MalPatch is effective under different attack settings. In the white-box setting, MalPatch achieves 69%-78% success rates against DNN detectors based on raw byte features and 47%-96% success rates against four grayscale detectors based on image features. In the black-box setting, the success rates of MalPatch against the same models reach 54%-74% and 27%-42%, respectively. We conclude by discussing several of its potential countermeasures and the generality of our approach.  © 2005-2012 IEEE.","Zhan D.; Duan Y.; Hu Y.; Li W.; Guo S.; Pan Z.","12"
"Technique","Cryptojacking Analysis","A Holistic Intelligent Cryptojacking Malware Detection System","10.1109/ACCESS.2024.3488192","2024","Recent statistics indicate a continuous rise in cryptojacking malware. This malware covertly exploits users' device resources to mine cryptocurrencies, such as Bitcoin, without their knowledge or consent. Cryptocurrency mining involves participants competing to generate a unique hash, with successful miners earning cryptocurrency tokens as rewards. As the difficulty of mining new cryptocurrencies increases, greater computational power and resources are required. Unfortunately, the growing popularity of cryptocurrencies has led to a significant increase in cryptojacking malware. Compounding this issue is the lack of adequate, practical solutions to combat this threat. Current shortcomings include a limited number of related studies, particularly in host-based cryptojacking, a scarcity of recent research, reliance on small or outdated datasets, and a shallow understanding of the behavior and characteristics of cryptojacking malware. This paper aims to address these gaps by introducing a holistic, intelligent cryptojacking malware detection system that: 1) provides a detailed analysis of the lifecycle of both host-based and web-based cryptojacking malware; 2) conducts a critical comparison of existing solutions, highlighting their weaknesses; 3) applies deep static analysis to identify key indicators crucial for cryptojacking analysis; 4) executes thorough dynamic analysis to demonstrate the real-world impact of cryptojacking; 5) utilizes a new, large, and robust cryptojacking dataset (CJDS) with over 100,000 samples, where the details of constructing this dataset are provided, (f) develops vision-based predictive models using 23 convolutional neural network (CNN) algorithms, extensively evaluated with comprehensive metrics; and 6) integrates the best-performing model to bulid a highly efficient cryptojacking detection system with an accuracy of 99%. This research offers valuable insights into the characteristics and consequences of cryptojacking, paving the way for further advancements in cybersecurity. It aims to protect digital environments from unauthorized resource exploitation and enhance the security of cryptocurrency-based systems. © 2013 IEEE.","Almurshid H.A.; Almomani I.; Khalifa M.A.; El-Shafai W.","2"
"Technique","Certified Defense","DRSM: DE-RANDOMIZED SMOOTHING ON MALWARE CLASSIFIER PROVIDING CERTIFIED ROBUSTNESS","","2024","Machine Learning (ML) models have been utilized for malware detection for over two decades. Consequently, this ignited an ongoing arms race between malware authors and antivirus systems, compelling researchers to propose defenses for malware-detection models against evasion attacks. However, most if not all existing defenses against evasion attacks suffer from sizable performance degradation and/or can defend against only specific attacks, which makes them less practical in real-world settings. In this work, we develop a certified defense, DRSM (De-Randomized Smoothed MalConv), by redesigning the de-randomized smoothing technique for the domain of malware detection. Specifically, we propose a window ablation scheme to provably limit the impact of adversarial bytes while maximally preserving local structures of the executables. After showing how DRSM is theoretically robust against attacks with contiguous adversarial bytes, we verify its performance and certified robustness experimentally, where we observe only marginal accuracy drops as the cost of robustness. To our knowledge, we are the first to offer certified robustness in the realm of static detection of malware executables. More surprisingly, through evaluating DRSM against 9 empirical attacks of different types, we observe that the proposed defense is empirically robust to some extent against a diverse set of attacks, some of which even fall out of the scope of its original threat model. In addition, we collected 15.5K recent benign raw executables from diverse sources, which will be made public as a dataset called PACE (Publicly Accessible Collection(s) of Executables) to alleviate the scarcity of publicly available benign datasets for studying malware detection and provide future research with more representative data of the time. Our code and dataset are available at-https://github.com/ShoumikSaha/DRSM. © 2024 12th International Conference on Learning Representations, ICLR 2024. All rights reserved.","Saha S.; Wang W.; Kaya Y.; Feizi S.; Dumitras T.","1"
"Technique","Library Analysis","Binary Cryptographic Function Identification via Similarity Analysis with Path-Insensitive Emulation","10.1145/3720415","2025","It becomes an essential requirement to identify cryptographic functions in binaries due to their widespread application in modern software. The technology fundamentally supports numerous software security analyses, such as malware analysis, blockchain forensics, etc. Unfortunately, the existing methods still struggle to strike a balance between analysis accuracy, efficiency, and code coverage, which hampers their practical application. In this paper, we propose BinCrypto, a method of emulation-based code similarity analysis on the interval domain, to identify cryptographic functions in binary files. It produces accurate results because it relies on the behavior-related code features collected during emulation. On the other hand, the emulation is performed in a path-insensitive manner, where the emulated values are all represented as intervals. As such, it is able to analyze every basic block only once, accomplishing the identification efficiently, and achieve complete block coverage simultaneously. We conduct the experiments with nine real-world cryptographic libraries. The results show that BinCrypto achieves the average accuracy of 83.2%, nearly twice that of WheresCrypto, the state-of-the-art method. BinCrypto is also able to successfully complete the tasks, including statically-linked library analysis, cross-library analysis, obfuscated code analysis, and malware analysis, demonstrating its potential for practical applications. © 2025 Copyright held by the owner/author(s).","Hu Y.; He Y.; He W.; Li H.; Zhao Y.; Wang S.; Gu D.","0"
"Technique","Class Activation Maps","Through the static: Demystifying malware visualization via explainability","10.1016/j.jisa.2025.104063","2025","Security researchers face growing challenges in rapidly identifying and classifying malware strains for effective protection. While Convolutional Neural Networks (CNNs) have emerged as powerful visual classifiers for this task, critical issues of robustness and explainability, well-studied in domains like medicine, remain underaddressed in malware analysis. Although these models achieve strong performance without manual feature engineering, their replicability and decision-making processes remain poorly understood. Two technical barriers have limited progress: first, the lack of obvious methods for selecting and evaluating explainability techniques due to their inherent complexity, and second the substantial computational resources required for replicating and tuning these models across diverse environments, which requires extensive computational power and time investments often beyond typical research constraints. Our study addresses these gaps through comprehensive replication of six CNN architectures, evaluating both performance and explainability using Class Activation Maps (CAMs) including GradCAM and HiResCAM. We conduct experiments across standard datasets (MalImg, Big2015) and our new VX-Zoo collection, systematically comparing how different models interpret inputs. Our analysis reveals distinct patterns in malware family identification while providing concrete explanations for CNN decisions. Furthermore, we demonstrate how these interpretability insights can enhance Visual Transformers, achieving F1-score yielding substantial improvements in F1 score, ranging from 2% to 8%, across the datasets compared to benchmark values. © 2025 The Authors","Brosolo M.; Vinod P.; Conti M.","0"
"Technique","Threat Intelligence Integration","Next-Generation Firewalls: Enhancing Network Security with Application-Awareness","10.1109/AUTOCOM64127.2025.10956381","2025","As modern alternatives to traditional firewalls, next-generation firewalls are an essential part of advanced network security, providing increased protection against advanced threats over a conventional firewall with the functionality to identify and control specific applications and traffic on the network. Traditional firewalls are packet-inspecting, port and protocol-centric devices that may miss or allow application-level attacks disguised as normal application traffic. In contrast, NGFWs are application-aware, meaning they know their unique signatures and can discriminate between various applications on the same port. This enables prepaid, more granular policy enforcement and protection against multiple threats, including malware, data breaches and unauthorized access. NGFWs provide application awareness and include intrusion prevention, malware detection, and deep packet inspection, which mean you get a multilayered defense against multiple types of attacks. HARs/HEAs also include central management and reporting features, allowing network administrators to monitor, analyze and quickly respond to potential threats. NGFWs are never static and evolve with the latest pointers in emerging threat vectors. They also offer advanced features like sandboxing and threat intelligence integration built into NGFW modules. © 2025 IEEE.","Pandey N.; Nalini Sunil M.; Sumathi M.; Alam I.; Das S.; Mondal R.","0"
"Technique","Protocol Analysis","Flatdc: Automatic Schema Reverse Engineering of FlatBuffers","10.1007/978-3-031-92886-4_17","2025","Schema reverse engineering is critical for analyzing closed-source software, including malware. Extracting communication schemas is particularly challenging for binary protocols. This paper presents two approaches for automatically reverse-engineering FlatBuffer schemas, a binary serialization framework by Google that, if exposed, can lead to security vulnerabilities such as size explosion attacks. The first, the binary approach, exploits static analysis and instruction simulation to extract schemas directly from validation logic. The second, the on-the-wire approach, analyzes protocol messages to approximate schemas, effectively narrowing the possible data types per field to an average of 2.3. We evaluate both methods on self-compiled binaries and third-party FlatBuffer schemas. The binary approach consistently extracts full schemas, aiding in vulnerability detection. The on-the-wire approach, though less precise, remains language-agnostic and resilient to binary obfuscation, making it valuable for security-focused protocol analysis. © IFIP International Federation for Information Processing 2025.","See A.; Ostendorf B.; Sell L.; Fischer M.","0"
"Technique","Section Hashing","Machine Learning-Driven URL Analysis for Enhanced Threat Detection","10.1109/InCACCT65424.2025.11011373","2025","Phishing, malware, defacement, and other malicious URLs are among the most significant online threats today. Traditional methods for detecting such threats rely on static blacklisting, which fails to adapt to the evolving malicious URL patterns. This article proposes a user-friendly approach using machine learning-based techniques, supported by an intuitive interface that can analyze URLs in real-time. Unlike existing solutions, which struggle with generalization or feature selection, our approach enhances adaptability by leveraging a wider range of structural, linguistic, and contextual URL features. Experiments have been performed using different machine learning models, including Decision Trees, K-nearest Neighbors, and Random Forest. From the results obtained, it has been observed that Random Forest does reasonably well with 89% in accuracy, proving that a lot of improvement by training the model on diverse data and labeled URLs. The tool first extracts numerical features from URL structures, so users can input any URL in real time and receive numerical ranking assessments regarding security risks. Future work will be on improving the adaptability of the model and enhancing user understanding through explainable AI techniques. © 2025 IEEE.","Thallapalli D.; Dannina B.; Deepak K.","0"
"Technique","Multi-Task Learning","Multi-Task Learning Model for Mobile Threat Detection and Cyber Resilience in Urban Systems","10.1007/978-981-96-8197-6_6","2025","The rapid expansion of Android devices in urban environments has led to an increase in sophisticated cyber threats, including zero-day malware, which pose risks to public safety and critical infrastructure. Traditional signature-based detection methods are often ineffective against these evolving threats. This paper presents a multi-task learning (MTL) framework designed to enhance Android malware detection and classification, contributing to the resilience of urban digital ecosystems. The model simultaneously performs binary classification (malware detection) and multi-class classification (malware family identification), using shared representations to improve efficiency and accuracy compared to single-task learning (STL) models. The framework is trained and evaluated on the CCCS-CIC-AndMal-2020 dataset, utilizing API-based static features of Android applications. Feature dimensionality is reduced through Principal Component Analysis (PCA), and class imbalance is addressed with a weighted loss function. Hyperparameter tuning with Optuna further optimizes configurations, including layer sizes, learning rate, and task-specific weights. Experimental results demonstrate that the MTL framework outperforms STL models, offering a promising approach for strengthening cybersecurity. Future work will explore real-time deployment and dynamic analysis to enhance urban resilience against emerging cyber threats. © The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2025.","Ibrahim S.; Catal C.; Kacem T.","0"
"Technique","Zero-Knowledge Proofs","20th International Conference on Information Systems Security, ICISS 2024","","2025","The proceedings contain 28 papers. The special focus in this conference is on Information Systems Security. The topics include: S-RFUP: Secure Remote Firmware Update Protocol; securing Virtual Reality Apps Inter-process Communication; Securing the Web: Analysis of HTTP Security Headers in Popular Global Websites; Countering Subscription Concealed Identifier (SUCI)-Catchers in Cellular Communications; BP-MAP: A Secure and Convenient Mutual Authentication Protocol; effects of Soft-Domain Transfer and Named Entity Information on Deception Detection; Paving the Way: Advancing V2X Safety Through Innovative Attack Generation and Analysis Framework (V2X-SAF); from Traits to Threats: Learning Risk Indicators of Malicious Insider Using Psychometric Data; Identifying Insecure Network Configurations Through Attack Modeling and Explainable AI; QIris: Quantum Implementation of Rainbow Table Attacks; insights from Running 24 Static Analysis Tools on Open Source Software Repositories; REMEDII: Robust Malware Detection with Iterative and Intelligent Adversarial Training; semantics-Based Static Vulnerability Detection in Solidity Using Abstract Interpretation; web Privacy Perceptions Amongst Indian Users; Enabling Privacy in IT Service Operations; Privacy-Preserving Photo Sharing: An SSI Use Case; zone Recovery Attack on a Secure Privacy-Preserving Ride-Matching Protocol; Making EULA Great Again: A Novel Nudge Mechanism to Improve Readability, User Attention and Awareness; a Decoupling Mechanism for Transaction Privacy; Protecting Ownership of Trained DNN Models with Zero-Knowledge Proofs; MALAI: ML-Based Attack on Learning with Error Problem; patch Based Backdoor Attack on Deep Neural Networks; integrating Crypto-Based Payment Systems for Data Marketplaces: Enhancing Efficiency, Security, and User Autonomy; IntelliSOAR: Intelligent Alert Enrichment Using Security Orchestration Automation and Response (SOAR); inTrust: An Asset Monitoring, Analysis and Vulnerability Assessment System for Zero Trust Network.","","0"
