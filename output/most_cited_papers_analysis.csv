"Category","Term","Most_Cited_Paper_Title","Most_Cited_Paper_Link","Most_Cited_Paper_Year","Most_Cited_Paper_Abstract","Most_Cited_Paper_Authors","Citations"
"Domain","Deep Learning Techniques","Deep Learning Approach for Intelligent Intrusion Detection System","10.1109/ACCESS.2019.2895334","2019","Machine learning techniques are being widely used to develop an intrusion detection system (IDS) for detecting and classifying cyberattacks at the network-level and the host-level in a timely and automatic manner. However, many challenges arise since malicious attacks are continually changing and are occurring in very large volumes requiring a scalable solution. There are different malware datasets available publicly for further research by cyber security community. However, no existing study has shown the detailed analysis of the performance of various machine learning algorithms on various publicly available datasets. Due to the dynamic nature of malware with continuously changing attacking methods, the malware datasets available publicly are to be updated systematically and benchmarked. In this paper, a deep neural network (DNN), a type of deep learning model, is explored to develop a flexible and effective IDS to detect and classify unforeseen and unpredictable cyberattacks. The continuous change in network behavior and rapid evolution of attacks makes it necessary to evaluate various datasets which are generated over the years through static and dynamic approaches. This type of study facilitates to identify the best algorithm which can effectively work in detecting future cyberattacks. A comprehensive evaluation of experiments of DNNs and other classical machine learning classifiers are shown on various publicly available benchmark malware datasets. The optimal network parameters and network topologies for DNNs are chosen through the following hyperparameter selection methods with KDDCup 99 dataset. All the experiments of DNNs are run till 1,000 epochs with the learning rate varying in the range [0.01-0.5]. The DNN model which performed well on KDDCup 99 is applied on other datasets, such as NSL-KDD, UNSW-NB15, Kyoto, WSN-DS, and CICIDS 2017, to conduct the benchmark. Our DNN model learns the abstract and high-dimensional feature representation of the IDS data by passing them into many hidden layers. Through a rigorous experimental testing, it is confirmed that DNNs perform well in comparison with the classical machine learning classifiers. Finally, we propose a highly scalable and hybrid DNNs framework called scale-hybrid-IDS-AlertNet which can be used in real-time to effectively monitor the network traffic and host-level events to proactively alert possible cyberattacks. © 2013 IEEE.","Vinayakumar R.; Alazab M.; Soman K.P.; Poornachandran P.; Al-Nemrat A.; Venkatraman S.","1398"
"Domain","IoT Security","A study of android application security","","2011","The fluidity of application markets complicate smartphone security. Although recent efforts have shed light on particular security issues, there remains little insight into broader security characteristics of smartphone applications. This paper seeks to better understand smartphone application security by studying 1,100 popular free Android applications. We introduce the ded decompiler, which recovers Android application source code directly from its installation image. We design and execute a horizontal study of smartphone applications based on static analysis of 21 million lines of recovered code. Our analysis uncovered pervasive use/misuse of personal/ phone identifiers, and deep penetration of advertising and analytics networks. However, we did not find evidence of malware or exploitable vulnerabilities in the studied applications. We conclude by considering the implications of these preliminary findings and offer directions for future analysis. © 2011 by The USENIX Association.","Enck W.; Octeau D.; McDaniel P.; Chaudhuri S.","709"
"Domain","Application Security","A study of android application security","","2011","The fluidity of application markets complicate smartphone security. Although recent efforts have shed light on particular security issues, there remains little insight into broader security characteristics of smartphone applications. This paper seeks to better understand smartphone application security by studying 1,100 popular free Android applications. We introduce the ded decompiler, which recovers Android application source code directly from its installation image. We design and execute a horizontal study of smartphone applications based on static analysis of 21 million lines of recovered code. Our analysis uncovered pervasive use/misuse of personal/ phone identifiers, and deep penetration of advertising and analytics networks. However, we did not find evidence of malware or exploitable vulnerabilities in the studied applications. We conclude by considering the implications of these preliminary findings and offer directions for future analysis. © 2011 by The USENIX Association.","Enck W.; Octeau D.; McDaniel P.; Chaudhuri S.","709"
"Domain","5G Security","Robust Intelligent Malware Detection Using Deep Learning","10.1109/ACCESS.2019.2906934","2019","Security breaches due to attacks by malicious software (malware) continue to escalate posing a major security concern in this digital age. With many computer users, corporations, and governments affected due to an exponential growth in malware attacks, malware detection continues to be a hot research topic. Current malware detection solutions that adopt the static and dynamic analysis of malware signatures and behavior patterns are time consuming and have proven to be ineffective in identifying unknown malwares in real-time. Recent malwares use polymorphic, metamorphic, and other evasive techniques to change the malware behaviors quickly and to generate a large number of new malwares. Such new malwares are predominantly variants of existing malwares, and machine learning algorithms (MLAs) are being employed recently to conduct an effective malware analysis. However, such approaches are time consuming as they require extensive feature engineering, feature learning, and feature representation. By using the advanced MLAs such as deep learning, the feature engineering phase can be completely avoided. Recently reported research studies in this direction show the performance of their algorithms with a biased training data, which limits their practical use in real-time situations. There is a compelling need to mitigate bias and evaluate these methods independently in order to arrive at a new enhanced method for effective zero-day malware detection. To fill the gap in the literature, this paper, first, evaluates the classical MLAs and deep learning architectures for malware detection, classification, and categorization using different public and private datasets. Second, we remove all the dataset bias removed in the experimental analysis by having different splits of the public and private datasets to train and test the model in a disjoint way using different timescales. Third, our major contribution is in proposing a novel image processing technique with optimal parameters for MLAs and deep learning architectures to arrive at an effective zero-day malware detection model. A comprehensive comparative study of our model demonstrates that our proposed deep learning architectures outperform classical MLAs. Our novelty in combining visualization and deep learning architectures for static, dynamic, and image processing-based hybrid approach applied in a big data environment is the first of its kind toward achieving robust intelligent zero-day malware detection. Overall, this paper paves way for an effective visual detection of malware using a scalable and hybrid deep learning framework for real-time deployments. © 2013 IEEE.","Vinayakumar R.; Alazab M.; Soman K.P.; Poornachandran P.; Venkatraman S.","436"
"Domain","Disaster Recovery","A survey on technical threat intelligence in the age of sophisticated cyber attacks","10.1016/j.cose.2017.09.001","2018","Today's cyber attacks require a new line of security defenses. The static approach of traditional security based on heuristic and signature does not match the dynamic nature of new generation of threats that are known to be evasive, resilient and complex. Organizations need to gather and share real-time cyber threat information and to transform it to threat intelligence in order to prevent attacks or at least execute timely disaster recovery. Threat Intelligence (TI) means evidence-based knowledge representing threats that can inform decisions. There is a general awareness for the need of threat intelligence while vendors today are rushing to provide a diverse array of threat intelligence products, specifically focusing on Technical Threat Intelligence (TTI). Although threat intelligence is being increasingly adopted, there is little consensus on what it actually is, or how to use it. Without any real understanding of this need, organizations risk investing large amounts of time and money without solving existing security problems. Our paper aims to classify and make distinction among existing threat intelligence types. We focus particularly on the TTI issues, emerging researches, trends and standards. Our paper also explains why there is a reluctance among organizations to share threat intelligence. We provide sharing strategies based on trust and anonymity, so participating organizations can do away with the risks of business leak. We also show in this paper why having a standardized representation of threat information can improve the quality of TTI, thus providing better automated analytics solutions on large volumes of TTI which are often non-uniform and redundant. Finally, we evaluate most popular open source/free threat intelligence tools, and compare their features with those of a new AlliaCERT TI tool. © 2017 Elsevier Ltd","Tounsi W.; Rais H.","349"
"Domain","Mobile Security","DL-Droid: Deep learning based android malware detection using real devices","10.1016/j.cose.2019.101663","2020","The Android operating system has been the most popular for smartphones and tablets since 2012. This popularity has led to a rapid raise of Android malware in recent years. The sophistication of Android malware obfuscation and detection avoidance methods have significantly improved, making many traditional malware detection methods obsolete. In this paper, we propose DL-Droid, a deep learning system to detect malicious Android applications through dynamic analysis using stateful input generation. Experiments performed with over 30,000 applications (benign and malware) on real devices are presented. Furthermore, experiments were also conducted to compare the detection performance and code coverage of the stateful input generation method with the commonly used stateless approach using the deep learning system. Our study reveals that DL-Droid can achieve up to 97.8% detection rate (with dynamic features only) and 99.6% detection rate (with dynamic + static features) respectively which outperforms traditional machine learning techniques. Furthermore, the results highlight the significance of enhanced input generation for dynamic analysis as DL-Droid with the state-based input generation is shown to outperform the existing state-of-the-art approaches. © 2019","Alzaylaee M.K.; Yerima S.Y.; Sezer S.","344"
"Domain","Machine Learning Domain","Machine learning for Android malware detection using permission and API calls","10.1109/ICTAI.2013.53","2013","The Google Android mobile phone platform is one of the most anticipated smartphone operating systems on the market. The open source Android platform allows developers to take full advantage of the mobile operation system, but also raises significant issues related to malicious applications. On one hand, the popularity of Android absorbs attention of most developers for producing their applications on this platform. The increased numbers of applications, on the other hand, prepares a suitable prone for some users to develop different kinds of malware and insert them in Google Android market or other third party markets as safe applications. In this paper, we propose to combine permission and API (Application Program Interface) calls and use machine learning methods to detect malicious Android Apps. In our design, the permission is extracted from each App's profile information and the APIs are extracted from the packed App file by using packages and classes to represent API calls. By using permissions and API calls as features to characterize each Apps, we can learn a classifier to identify whether an App is potentially malicious or not. An inherent advantage of our method is that it does not need to involve any dynamical tracing of the system calls but only uses simple static analysis to find system functions involved in each App. In addition, because permission settings and APIs are alwaysavailable for each App, our method can be generalized to all mobile applications. Experiments on real-world Apps with more than 1200 malware and 1200 benign samples validate the algorithm performance. © 2013 IEEE.","Peiravian N.; Zhu X.","331"
"Domain","Network Security","Malware identification using visualization images and deep learning","10.1016/j.cose.2018.04.005","2018","Currently, malware is one of the most serious threats to Internet security. In this paper we propose a malware classification algorithm that uses static features called MCSC (Malware Classification using SimHash and CNN) which converts the disassembled malware codes into gray images based on SimHash and then identifies their families by convolutional neural network. During this process, some methods such as multi-hash, major block selection and bilinear interpolation are used to improve the performance. Experimental results show that MCSC is very effective for malware family classification, even for those unevenly distributed samples. The classification accuracy can be 99.260% at best and 98.862% at average on a malware dataset of 10,805 samples which is higher than other compared algorithms. Moreover, for MCSC, on average, it just takes 1.41 s to recognize a new sample, which can meet the requirements in most of the practical applications. © 2018 Elsevier Ltd","Ni S.; Qian Q.; Zhang R.","264"
"Domain","Hardware Security","C-FLAT: Control-flow attestation for embedded systems software","10.1145/2976749.2978358","2016","Remote attestation is a crucial security service particularly relevant to increasingly popular IoT (and other embedded) devices. It allows a trusted party (verifier) to learn the state of a remote, and potentially malware-infected, device (prover). Most existing approaches are static in nature and only check whether benign software is initially loaded on the prover. However, they are vulnerable to runtime attacks that hijack the application's control or data flow, e.g., via return-oriented programming or data-oriented exploits. As a concrete step towards more comprehensive runtime remote attestation, we present the design and implementation of Control-FLow ATtestation (C-FLAT) that enables remote attestation of an application's control-flow path, without requiring the source code. We describe a full prototype implementation of C-FLAT on Raspberry Pi using its ARM TrustZone hardware security extensions. We evaluate C-FLAT's performance using a real-world embedded (cyber-physical) application, and demonstrate its efficacy against control-flow hijacking attacks. © 2016 ACM.","Abera T.; Asokan N.; Davi L.; Ekberg J.-E.; Nyman T.; Paverd A.; Sadeghi A.-R.; Tsudik G.","248"
"Domain","API Development","Classification of malware based on integrated static and dynamic features","10.1016/j.jnca.2012.10.004","2013","Collection of dynamic information requires that malware be executed in a controlled environment; the malware unpacks itself as a preliminary to the execution process. On the other hand, while execution of malware is not needed in order to collect static information, the file must first be unpacked manually. None-the-less, if a file has been executed, it is possible to use both static and dynamic information in designing a single classification method. In this paper, we present the first classification method integrating static and dynamic features into a single test. Our approach improves on previous results based on individual features and reduces by half the time needed to test such features separately. Robustness to changes in malware development is tested by comparing results on two sets of malware, the first collected between 2003 and 2007, and the second collected between 2009 and 2010. When classifying the older set as compared to the entire data set, our integrated test demonstrates significantly more robustness than previous methods by losing just 2.7% in accuracy as opposed to a drop of 7%. We conclude that to achieve acceptable accuracy in classifying the latest malware, some older malware should be included in the set of data. © 2012 Elsevier Ltd.","Islam R.; Tian R.; Batten L.M.; Versteeg S.","247"
"Domain","Gap Analysis","AppContext: Differentiating malicious and benign mobile app behaviors using context","10.1109/ICSE.2015.50","2015","Mobile malware attempts to evade detection during app analysis by mimicking security-sensitive behaviors of benign apps that provide similar functionality (e.g., sending SMS messages), and suppressing their payload to reduce the chance of being observed (e.g., executing only its payload at night). Since current approaches focus their analyses on the types of securitysensitive resources being accessed (e.g., network), these evasive techniques in malware make differentiating between malicious and benign app behaviors a difficult task during app analysis. We propose that the malicious and benign behaviors within apps can be differentiated based on the contexts that trigger securitysensitive behaviors, i.e., the events and conditions that cause the security-sensitive behaviors to occur. In this work, we introduce AppContext, an approach of static program analysis that extracts the contexts of security-sensitive behaviors to assist app analysis in differentiating between malicious and benign behaviors. We implement a prototype of AppContext and evaluate AppContext on 202 malicious apps from various malware datasets, and 633 benign apps from the Google Play Store. AppContext correctly identifies 192 malicious apps with 87.7% precision and 95% recall. Our evaluation results suggest that the maliciousness of a security-sensitive behavior is more closely related to the intention of the behavior (reflected via contexts) than the type of the security-sensitive resources that the behavior accesses. © 2015 IEEE.","Yang W.; Xiao X.; Andow B.; Li S.; Xie T.; Enck W.","212"
"Domain","Hardware Trojan Detection","COTD: Reference-Free Hardware Trojan Detection and Recovery Based on Controllability and Observability in Gate-Level Netlist","10.1109/TIFS.2016.2613842","2017","This paper presents a novel hardware Trojan detection technique in gate-level netlist based on the controllability and observability analyses. Using an unsupervised clustering analysis, the paper shows that the controllability and observability characteristics of Trojan gates present significant inter-cluster distance from those of genuine gates in a Trojan-inserted circuit, such that Trojan gates are easily distinguishable. The proposed technique does not require any golden model and can be easily integrated into the current integrated circuit design flow. Furthermore, it performs a static analysis and does not require any test pattern application for Trojan activation either partially or fully. In addition, the timing complexity of the proposed technique is an order of the number of signals in a circuit. Moreover, the proposed technique makes it possible to fully restore an inserted Trojan and to isolate its trigger and payload circuits. The technique has been applied on various types of Trojans, and all Trojans are successfully detected with 0 false positive and negative rates in less than 14 s in the worst case. © 2005-2012 IEEE.","Salmani H.","207"
"Domain","Reverse Engineering Domain","Static Analyzer of Vicious Executables (SAVE)","10.1109/CSAC.2004.37","2004","Software security assurance and malware (trojans, worms, and viruses, etc.) detection are important topics of information security. Software obfuscation, a general technique that is useful for protecting software from reverse engineering, can also be used by hackers to circumvent the malware detection tools. Current static malware detection techniques have serious limitations, and sandbox testing also fails to provide a complete solution due to time constraints. In this paper, we present a robust signature-based malware detection technique, with emphasis on detecting obfuscated (or polymorphic) malware and mutated (or metamorphic) malware. The hypothesis is that all versions of the same malware share a common core signature that is a combination of several features of the code. After a particular malware has been first identified, it can be analyzed to extract the signature, which provides a basis for detecting variants and mutants of the same malware in the future. Encouraging experimental results on a large set of recent malware are presented. © 2004 IEEE.","Sung A.H.; Xu J.; Chavez P.; Mukkamala S.","188"
"Domain","Continuous Monitoring","A Survey on malware analysis and mitigation techniques","10.1016/j.cosrev.2019.01.002","2019","In recent days, malwares are advanced, sophisticatedly engineered to attack the target. Most of such advanced malwares are highly persistent and capable of escaping from the security systems. This paper explores such an advanced malware type called Advanced Persistent Threats (APTs). APTs pave the way for most of the Cyber espionages and sabotages. APTs are highly sophisticated, target specific and operate in a stealthy mode till the target is compromised. The intention of the APTs is to deploy target specific automated malwares in a host or network to initiate an on-demand attack based on continuous monitoring. Encrypted covert communication and advanced, sophisticated attack techniques make the identification of APTs more challenging. Conventional security systems like antivirus, anti-malware systems which depend on signatures and static analysis fail to identify these APTs. The Advanced Evasive Techniques (AET) used in APTs are capable of bypassing the stateful firewalls housed in the enterprise choke points at ease. Hence, this paper presents a detailed study on sophisticated attack and evasion techniques used by the contemporary malwares. Furthermore, existing malware analysis techniques, application hardening techniques and CPU assisted application security schemes are also discussed. Finally, the study concludes by presenting the System and Network Security Design (SNSD) using existing mitigation techniques. © 2019 Elsevier Inc.","Sibi Chakkaravarthy S.; Sangeetha D.; Vaidehi V.","170"
"Domain","Anomaly Detection Systems","Mobile malware detection through analysis of deviations in application network behavior","10.1016/j.cose.2014.02.009","2014","In this paper we present a new behavior-based anomaly detection system for detecting meaningful deviations in a mobile application's network behavior. The main goal of the proposed system is to protect mobile device users and cellular infrastructure companies from malicious applications by: (1) identification of malicious attacks or masquerading applications installed on a mobile device, and (2) identification of republished popular applications injected with a malicious code (i.e., repackaging). More specifically, we attempt to detect a new type of mobile malware with self-updating capabilities that were recently found on the official Google Android marketplace. Malware of this type cannot be detected using the standard signatures approach or by applying regular static or dynamic analysis methods. The detection is performed based on the application's network traffic patterns only. For each application, a model representing its specific traffic pattern is learned locally (i.e., on the device). Semi-supervised machine-learning methods are used for learning the normal behavioral patterns and for detecting deviations from the application's expected behavior. These methods were implemented and evaluated on Android devices. The evaluation experiments demonstrate that: (1) various applications have specific network traffic patterns and certain application categories can be distinguished by their network patterns; (2) different levels of deviation from normal behavior can be detected accurately; (3) in the case of self-updating malware, original (benign) and infected versions of an application have different and distinguishable network traffic patterns that in most cases, can be detected within a few minutes after the malware is executed while presenting very low false alarms rate; and (4) local learning is feasible and has a low performance overhead on mobile devices. © 2014 Elsevier Ltd. All rights reserved.","Shabtai A.; Tenenboim-Chekina L.; Mimran D.; Rokach L.; Shapira B.; Elovici Y.","166"
"Domain","Email Security","DeepAMD: Detection and identification of Android malware using high-efficient Deep Artificial Neural Network","10.1016/j.future.2020.10.008","2021","Android smartphones are being utilized by a vast majority of users for everyday planning, data exchanges, correspondences, social interaction, business execution, bank transactions, and almost in each walk of everyday lives. With the expansion of human reliance on smartphone technology, cyberattacks against these devices have surged exponentially. Smartphone applications use permissions to utilize various functionalities of the smartphone that can be maneuvered to launch an attack or inject malware by hackers. Existing studies present various approaches to detect Android malware but lack early detection and identification. Accordingly, there is a dire need to craft an efficient mechanism for malicious applications’ detection before they exploit the data. In this paper, a novel approach DeepAMD to defend against real-world Android malware using deep Artificial Neural Network (ANN) has been adopted including an efficiency comparison of DeepAMD with conventional machine learning classifiers and state-of-the-art studies based on performance measures such as accuracy, recall, f-score, and precision. As per the experimental analysis, DeepAMD outperforms other approaches in detecting and identifying malware attacks on both Static as well as Dynamic layers. On the Static layer, DeepAMD achieves the highest accuracy of 93.4% for malware classification, 92.5% for malware category classification, and 90% for malware family classification. On the Dynamic layer, DeepAMD achieves the highest accuracy of 80.3% for malware category classification and 59% for malware family classification in comparison with the state-of-the-art techniques. © 2020 Elsevier B.V.","Imtiaz S.I.; Rehman S.U.; Javed A.R.; Jalil Z.; Liu X.; Alnumay W.S.","145"
"Domain","Batch Processing","Static detection of malicious JavaScript-bearing PDF documents","10.1145/2076732.2076785","2011","Despite the recent security improvements in Adobe's PDF viewer, its underlying code base remains vulnerable to novel exploits. A steady flow of rapidly evolving PDF malware observed in the wild substantiates the need for novel protection instruments beyond the classical signature-based scanners. In this contribution we present a technique for detection of JavaScript-bearing malicious PDF documents based on static analysis of extracted JavaScript code. Compared to previous work, mostly based on dynamic analysis, our method incurs an order of magnitude lower run-time overhead and does not require special instrumentation. Due to its efficiency we were able to evaluate it on an extremely large real-life dataset obtained from the VirusTotal malware upload portal. Our method has proved to be effective against both known and unknown malware and suitable for large-scale batch processing. Copyright 2011 ACM.","Laskov P.; Šrndić N.","141"
"Domain","Intellectual Property Protection","Protecting software through obfuscation: can it keep pace with progress in code analysis?","10.1145/2886012","2017","Software obfuscation has always been a controversially discussed research area. While theoretical results indicate that provably secure obfuscation in general is impossible, its widespread application inmalware and commercial software shows that it is nevertheless popular in practice. Still, it remains largely unexplored to what extent today's software obfuscations keep up with state-of-The-Art code analysis and where we stand in the arms race between software developers and code analysts. The main goal of this survey is to analyze the effectiveness of different classes of software obfuscation against the continuously improving deobfuscation techniques and off-The-shelf code analysis tools. The answer very much depends on the goals of the analyst and the available resources. On the one hand, many forms of lightweight static analysis have difficulties with even basic obfuscation schemes, which explains the unbroken popularity of obfuscation among malware writers. On the other hand, more expensive analysis techniques, in particular when used interactively by a human analyst, can easily defeat many obfuscations. As a result, software obfuscation for the purpose of intellectual property protection remains highly challenging. ©2016 ACM.","Schrittwieser S.; Katzenbeisser S.; Kinder J.; Merzdovnik G.; Weippl E.","137"
"Domain","Edge Computing","Intelligent Vision-Based Malware Detection and Classification Using Deep Random Forest Paradigm","10.1109/ACCESS.2020.3036491","2020","Malware is a rapidly increasing menace to modern computing. Malware authors continually incorporate various sophisticated features like code obfuscations to create malware variants and elude detection by existing malware detection systems. The classification of unseen malware variants with similar characteristics into their respective families is a significant challenge, even if the classifier is trained with known variants belonging to the same family. The identification and extraction of distinct features for each malware is another issue for generalizing the malware detection system. Features that contribute to the generalization capability of the classifier are difficult to be engineered with modifications in each malware. Conventional malware detection systems employ static signature-based methods and dynamic behavior-based methods, which are inefficient in analyzing and detecting advanced and zero-day malware. To address these issues, this work employs a visualization approach where malware is represented as 2D images and proposes a robust machine learning-based anti-malware solution. The proposed system is based on a layered ensemble approach that mimics the key characteristics of deep learning techniques but performs better than the latter. The proposed system does not require hyperparameter tuning or backpropagation and works with reduced model complexity. The proposed model outperformed other state-of-the-art techniques with a detection rate of 98.65%, 97.2%, and 97.43% for Malimg, BIG 2015, and MaleVis malware datasets, respectively. The results demonstrate that the proposed solution is effective in identifying new and advanced malware due to its diverse features.  © 2013 IEEE.","Roseline S.A.; Geetha S.; Kadry S.; Nam Y.","131"
"Domain","Data Visualization","Use of Data Visualisation for Zero-Day Malware Detection","10.1155/2018/1728303","2018","With the explosion of Internet of Things (IoT) worldwide, there is an increasing threat from malicious software (malware) attackers that calls for efficient monitoring of vulnerable systems. Large amounts of data collected from computer networks, servers, and mobile devices need to be analysed for malware proliferation. Effective analysis methods are needed to match with the scale and complexity of such a data-intensive environment. In today's Big Data contexts, visualisation techniques can support malware analysts going through the time-consuming process of analysing suspicious activities thoroughly. This paper takes a step further in contributing to the evolving realm of visualisation techniques used in the information security field. The aim of the paper is twofold: (1) to provide a comprehensive overview of the existing visualisation techniques for detecting suspicious behaviour of systems and (2) to design a novel visualisation using similarity matrix method for establishing malware classification accurately. The prime motivation of our proposal is to identify obfuscated malware using visualisation of the extended x86 IA-32 (opcode) similarity patterns, which are hard to detect with the existing approaches. Our approach uses hybrid models wherein static and dynamic malware analysis techniques are combined effectively along with visualisation of similarity matrices in order to detect and classify zero-day malware efficiently. Overall, the high accuracy of classification achieved with our proposed method can be visually observed since different malware families exhibit significantly dissimilar behaviour patterns. © 2018 Sitalakshmi Venkatraman and Mamoun Alazab.","Venkatraman S.; Alazab M.","130"
"Domain","Continuous Improvement","Revolver: An automated approach to the detection of evasive web-based malware","","2013","In recent years, attacks targeting web browsers and their plugins have become a prevalent threat. Attackers deploy web pages that contain exploit code, typically written in HTML and JavaScript, and use them to compromise unsuspecting victims. Initially, static techniques, such as signature-based detection, were adequate to identify such attacks. The response from the attackers was to heavily obfuscate the attack code, rendering static techniques insufficient. This led to dynamic analysis systems that execute the JavaScript code included in web pages in order to expose malicious behavior. However, today we are facing a new reaction from the attackers: evasions. The latest attacks found in the wild incorporate code that detects the presence of dynamic analysis systems and try to avoid analysis and/or detection. In this paper, we present Revolver, a novel approach to automatically detect evasive behavior in malicious JavaScript. Revolver uses efficient techniques to identify similarities between a large number of JavaScript programs (despite their use of obfuscation techniques, such as packing, polymorphism, and dynamic code generation), and to automatically interpret their differences to detect evasions. More precisely, Revolver leverages the observation that two scripts that are similar should be classified in the same way by web malware detectors (either both scripts are malicious or both scripts are benign); differences in the classification may indicate that one of the two scripts contains code designed to evade a detector tool. Using large-scale experiments, we show that Revolver is effective at automatically detecting evasion attempts in JavaScript, and its integration with existing web malware analysis systems can support the continuous improvement of detection techniques. copyright © 2013 USENIX Security Symposium.All right reserved.","Kapravelos A.; Shoshitaishvili Y.; Cova M.; Kruegel C.; Vigna G.","108"
"Domain","Behavioral Analytics","An approach for detection and family classification of malware based on behavioral analysis","10.1109/ICCNC.2016.7440587","2016","Malware, i.e., malicious software, represents one of the main cyber security threats today. Over the last decade malware has been evolving in terms of the complexity of malicious software and the diversity of attack vectors. As a result modern malware is characterized by sophisticated obfuscation techniques, which hinder the classical static analysis approach. Furthermore, the increased amount of malware that emerges every day, renders a manual approach inefficient. This study tackles the problem of analyzing, detecting and classifying the vast amount of malware in a scalable, efficient and accurate manner. We propose a novel approach for detecting malware and classifying it to either known or novel, i.e., previously unseen malware family. The approach relies on Random Forests classifier for performing both malware detection and family classification. Furthermore, the proposed approach employs novel feature representations for malware classification, that significantly reduces the feature space, while achieving encouraging predictive performance. The approach was evaluated using behavioral traces of over 270,000 malware samples and 837 samples of benign software. The behavioral traces were obtained using a modified version of Cuckoo sandbox, that was able to harvest behavioral traces of the analyzed samples in a time-efficient manner. The proposed system achieves high malware detection rate and promising predictive performance in the family classification, opening the possibility of coping with the use of obfuscation and the growing number of malware. © 2016 IEEE.","Hansen S.S.; Larsen T.M.T.; Stevanovic M.; Pedersen J.M.","102"
"Domain","Tool Development","Machine learning aided static malware analysis: A survey and tutorial","10.1007/978-3-319-73951-9_2","2018","Malware analysis and detection techniques have been evolving during the last decade as a reflection to development of different malware techniques to evade network-based and host-based security protections. The fast growth in variety and number of malware species made it very difficult for forensics investigators to provide an on time response. Therefore, Machine Learning (ML) aided malware analysis became a necessity to automate different aspects of static and dynamic malware investigation. We believe that machine learning aided static analysis can be used as a methodological approach in technical Cyber Threats Intelligence (CTI) rather than resource-consuming dynamic malware analysis that has been thoroughly studied before. In this paper, we address this research gap by conducting an in-depth survey of different machine learning methods for classification of static characteristics of 32-bit malicious Portable Executable (PE32) Windows files and develop taxonomy for better understanding of these techniques. Afterwards, we offer a tutorial on how different machine learning techniques can be utilized in extraction and analysis of a variety of static characteristic of PE binaries and evaluate accuracy and practical generalization of these techniques. Finally, the results of experimental study of all the method using common data was given to demonstrate the accuracy and complexity. This paper may serve as a stepping stone for future researchers in cross-disciplinary field of machine learning aided malware forensics. © Springer International Publishing AG, part of Springer Nature 2018.","Shalaginov A.; Banin S.; Dehghantanha A.; Franke K.","92"
"Domain","Distributed Computing","Classification of malware using structured control flow","","2010","Malware is a pervasive problem in distributed computer and network systems. Identification of malware variants provides great benefit in early detection. Control flow has been proposed as a characteristic that can be identified across variants, resulting in flowgraph based malware classification. Static analysis is widely used for the classification but can be ineffective if malware undergoes a code packing transformation to hide its real content. This paper proposes a novel algorithm for constructing a control flow graph signature using the decompilation technique of structuring. Similarity between structured graphs can be quickly determined using string edit distances. To reverse the code packing transformation, a fast application level emulator is proposed. To demonstrate the effectiveness of the automated unpacking and flowgraph based classification, we implement a complete system and evaluate it using synthetic and real malware. The evaluation shows our system is highly effective in terms of accuracy in revealing all the hidden code, execution time for unpacking, and accuracy in classification. © 2010, Australian Computer Society, Inc.","Cesare S.; Xiang Y.","92"
"Domain","Natural Language Processing","EveDroid: Event-Aware Android Malware Detection Against Model Degrading for IoT Devices","10.1109/JIOT.2019.2909745","2019","With the proliferation of the smart Internet of Things (IoT) devices based on Android system, malicious Android applications targeting for IoT devices have received more and more attention due to the concern of privacy leakage and property loss. However, existing malware detection approaches based on static or dynamic analysis are not scalable to the evolvement of malware and cannot extract enough valid semantics in application programming interface (API) level, failing to detect new malware. In this paper, we propose EveDroid, a scalable and event-aware Android malware detection system, which exploits the behavioral patterns in different events to effectively detect new malware based on the insight that events can reflect apps' possible running activities. Unlike existing approaches using API calls as features directly, we propose to use event group to describe apps' behaviors in event level, which can capture higher level of semantics than in API level. In event group, we adopt function clusters to represent behaviors in each event so that behaviors hidden in events can still be captured as time goes on, which enables EveDroid to detect new malware in the event level. The function clusters can generalize API calls into vectors based on their API composition to capture new API calls, which makes EveDroid scalable to malware evolving. Moreover, a neural network is specifically designed to aggregate the multiple events and automatically mine the semantic relationship among them. We train the system and evaluate its {F}1 -measure on a dataset of 14 956 benign and 28 848 malicious Android apps released in different years. The experimental results show that EveDroid outperforms other malware detection systems. © 2014 IEEE.","Lei T.; Qin Z.; Wang Z.; Li Q.; Ye D.","85"
"Domain","Capability Assessment","Binary Code Clone Detection across Architectures and Compiling Configurations","10.1109/ICPC.2017.22","2017","Binary code clone (or similarity) detection is a fundamental technique for many important applications, such as plagiarism detection, malware analysis, software vulnerability assessment and program comprehension. With the prevailing of smart and IoT (Internet of Things) devices, more and more programs are ported from traditional desktop platform (e.g., IA-32) to ARM and MIPS architectures. It is imperative to detect cloned binary code across architectures. However, because of incomparable instruction sets of different architectures as well as alternative compiling configurations of binaries, it is difficult to conduct a binary code clone detection with traditional syntax-or structure-based methods. To address, we propose a semantics-based approach to fulfill the target. We recognize arguments and indirect jump targets of each binary function, and emulate executions of those functions to extract semantic signatures helping measure the similarity of functions. The approach has been implemented in a prototype system names CACompare to detect cloned binary functions across architectures and compiling configurations. It supports comparisons between mainstream architectures (IA-32, ARM and MIPS) and is able to analysis binaries on Linux platform. The experimental results show that CACompare not only is effective in dealing with binaries of different architectures and variant compiling configurations, but also improves the accuracy of binary code clone detection comparing to state-of-the-art solutions. © 2017 IEEE.","Hu Y.; Zhang Y.; Li J.; Gu D.","75"
"Domain","Cryptanalysis","Aligot: Cryptographic function identification in obfuscated binary programs","10.1145/2382196.2382217","2012","Analyzing cryptographic implementations has important applications, especially for malware analysis where they are an integral part both of the malware payload and the unpacking code that decrypts this payload. These implementations are often based on well-known cryptographic functions, whose description is publicly available. While potentially very useful for malware analysis, the identification of such cryptographic primitives is made difficult by the fact that they are usually obfuscated. Current state-of-the-art identification tools are ineffective due to the absence of easily identifiable static features in obfuscated code. However, these implementations still maintain the input-output (I/O) relationship of the original function. In this paper, we present a tool that leverages this fact to identify cryptographic functions in obfuscated programs, by retrieving their I/O parameters in an implementation-independent fashion, and comparing them with those of known cryptographic functions. In experimental evaluation, we successfully identi fied the cryptographic functions TEA, RC4, AES and MD5 both in synthetic examples protected by a commercial-grade packer (AsProtect), and in several obfuscated malware samples (Sality, Waledac, Storm Worm and SilentBanker). In addition, our tool was able to recognize basic operations done in asymmetric ciphers such as RSA. Copyright © 2012 ACM.","Calvet J.; Fernandez J.M.; Marion J.-Y.","72"
"Domain","Drive-By Download","BINSPECT: Holistic analysis and detection of malicious web pages","10.1007/978-3-642-36883-7_10","2013","Malicious web pages are among the major security threats on the Web. Most of the existing techniques for detecting malicious web pages focus on specific attacks. Unfortunately, attacks are getting more complex whereby attackers use blended techniques to evade existing countermeasures. In this paper, we present a holistic and at the same time lightweight approach, called BINSPECT, that leverages a combination of static analysis and minimalistic emulation to apply supervised learning techniques in detecting malicious web pages pertinent to drive-by-download, phishing, injection, and malware distribution by introducing new features that can effectively discriminate malicious and benign web pages. Large scale experimental evaluation of BINSPECT achieved above 97% accuracy with low false signals. Moreover, the performance overhead of BINSPECT is in the range 3-5 seconds to analyze a single web page, suggesting the effectiveness of our approach for real-life deployment. © 2013 ICST Institute for Computer Science, Social Informatics and Telecommunications Engineering.","Eshete B.; Villafiorita A.; Weldemariam K.","70"
"Domain","Digital Forensics","Artificial Intelligence-Based Malware Detection, Analysis, and Mitigation","10.3390/sym15030677","2023","Malware, a lethal weapon of cyber attackers, is becoming increasingly sophisticated, with rapid deployment and self-propagation. In addition, modern malware is one of the most devastating forms of cybercrime, as it can avoid detection, make digital forensics investigation in near real-time impossible, and the impact of advanced evasion strategies can be severe and far-reaching. This makes it necessary to detect it in a timely and autonomous manner for effective analysis. This work proposes a new systematic approach to identifying modern malware using dynamic deep learning-based methods combined with heuristic approaches to classify and detect five modern malware families: adware, Radware, rootkit, SMS malware, and ransomware. Our symmetry investigation in artificial intelligence and cybersecurity analytics will enhance malware detection, analysis, and mitigation abilities to provide resilient cyber systems against cyber threats. We validated our approach using a dataset that specifically contains recent malicious software to demonstrate that the model achieves its goals and responds to real-world requirements in terms of effectiveness and efficiency. The experimental results indicate that the combination of behavior-based deep learning and heuristic-based approaches for malware detection and classification outperforms the use of static deep learning methods. © 2023 by the authors.","Djenna A.; Bouridane A.; Rubab S.; Marou I.M.","68"
"Domain","Critical Infrastructure Domain","Multi-stage crypto ransomware attacks: A new emerging cyber threat to critical infrastructure and industrial control systems","10.1016/j.icte.2017.12.007","2018","The inevitable integration of critical infrastructure to public networks has exposed the underlying industrial control systems to various attack vectors. In this paper, we model multi-stage crypto ransomware attacks, which are today an emerging cyber threat to critical infrastructure. We evaluate our modeling approach using multi-stage attacks by the infamous WannaCry ransomware. The static malware analysis results uncover the techniques employed by the ransomware to discover vulnerable nodes in different SCADA and production subnets, and for the subsequent network propagation. Based on the uncovered artifacts, we recommend a cascaded network segmentation approach, which prioritizes the security of production network devices. © 2018 The Korean Institute of Communications Information Sciences","Zimba A.; Wang Z.; Chen H.","68"
"Domain","Access Control","An Adaptive Behavioral-Based Incremental Batch Learning Malware Variants Detection Model Using Concept Drift Detection and Sequential Deep Learning","10.1109/ACCESS.2021.3093366","2021","Malware variants are the major emerging threats that face cybersecurity due to the potential damage to computer systems. Many solutions have been proposed for detecting malware variants. However, accurate detection is challenging due to the constantly evolving nature of the malware variants that cause concept drift. Existing malware detection solutions assume that the mapping learned from historical malware features will be valid for new and future malware. The relationship between input features and the class label has been considered stationary, which doesn't hold for the ever-evolving nature of malware variants. Malware features change dynamically due to code obfuscations, mutations, and the modification made by malware authors to change the features' distribution and thus evade the detection rendering the detection model obsolete and ineffective. This study presents an Adaptive behavioral-based Incremental Batch Learning Malware Variants Detection model using concept drift detection and sequential deep learning (AIBL-MVD) to accommodate the new malware variants. Malware behaviors were extracted using dynamic analysis by running the malware files in a sandbox environment and collecting their Application Programming Interface (API) traces. According to the malware first-time appearance, the malware samples were sorted to capture the malware variants' change characteristics. The base classifier was then trained based on a subset of historical malware samples using a sequential deep learning model. The new malware samples were mixed with a subset of old data and gradually introduced to the learning model in an adaptive batch size incremental learning manner to address the catastrophic forgetting dilemma of incremental learning. The statistical process control technique has been used to detect the concept drift as an indication for incrementally updating the model as well as reducing the frequency of model updates. Results from extensive experiments show that the proposed model is superior in terms of detection rate and efficiency compared with the static model, periodic retraining approaches, and the fixed batch size incremental learning approach. The model maintains an average of 99.41% detection accuracy of new and variants malware with a low updating frequency of 1.35 times per month. © 2013 IEEE.","Darem A.A.; Ghaleb F.A.; Al-Hashmi A.A.; Abawajy J.H.; Alanazi S.M.; Al-Rezami A.Y.","66"
"Domain","Risk Assessment","Merging permission and api features for android malware detection","10.1109/IIAI-AAI.2016.237","2016","The prosperity of mobile devices have been rapidly and drastically reforming the use pattern and of user habits with computing devices. Android, the most popular mobile operating system, has a privilege-separated security system through a sophisticated permission control mechanism. Android Apps need to request permissions to access sensitive personal data and system resources, but empirical studies have found that various types of malicious software could obtain permissions and attack systems and applications by deceiving users and the security mechanism. In this paper, we propose a novel machine learning approach to detect malware by mining the patterns of Permissions and API Function Calls acquired and used by Android Apps. Based on static analysis of source code and resource files of Android Apps, binary and numerical features are extracted for qualitative and quantitative evaluation. Feature selection methods are applied to reduce the feature dimension and enhance the efficiency. Different machine learning methods, including Support Vector Machines, Random Forest and Neural Networks, are applied and compared in classification. The experimental results show that the proposed approach delivers accurate detection of Android malware. We deem that the proposed approach could help raise users' awareness of potential risks and mitigate malware threats for Android devices. © 2016 IEEE.","Qiao M.; Sung A.H.; Liu Q.","64"
"Domain","Edge Device Security","An Android Malware Detection Approach Based on Static Feature Analysis Using Machine Learning Algorithms","10.1016/j.procs.2022.03.086","2022","In the past decade, mobile devices became necessary for modern civilization and contributed directly to its development stages in defining mobile information access. Nonetheless, along with these rapid developments in modern mobile devices, security issues rise dramatically, and malware is the most concerning of all. Therefore, many studies and research are still trending in this spectrum, using Machine Learning approaches to prevent and reduce malware's impact. This paper seeks to add to what is already a foundation of various malware detection efforts by presenting a static base classification approach for malware detection based on android permissions and API calls. This approach is based on three well-known Machine Learning algorithms, Support Vector Machines (SVM), K-nearest neighbors (KNN), and Naive Bayes (NB) against a comprehensive new Android malware dataset (CICInvesAndMal2019), in pursuit of achieving high malware detection rates and contribution to the efforts and studies in protecting the development of mobile information. access. © 2022 Elsevier B.V.. All rights reserved.","Shatnawi A.S.; Yassen Q.; Yateem A.","64"
"Domain","Firmware Reverse Engineering","Forensic analysis of ransomware families using static and dynamic analysis","10.1109/SPW.2018.00033","2018","Forensic analysis of executables or binary files is the common practice of detecting malware characteristics. Reverse engineering is performed on executables at different levels such as raw binaries, assembly codes, libraries, and function calls to better analyze and interpret the purpose of malware code segments. In this work, we applied data-mining techniques to correlate multi-level code components (derived from reverse engineering process) for finding unique association rules to identify ransomware families. However a reverse process and analysis of code structure do not always provide run-time behavior of executables so we used a combined approaches (static and dynamic) to better unveil hidden intent of the program. We performed analysis of 450 samples of ransomware and experimental results reported some important correlation among different code components from our combined analysis. © 2018 IEEE.","Subedi K.P.; Budhathoki D.R.; Dasgupta D.","64"
"Domain","Deception Technology","A malware detection scheme based on mining format information","10.1155/2014/260905","2014","Malware has become one of the most serious threats to computer information system and the current malware detection technology still has very significant limitations. In this paper, we proposed a malware detection approach by mining format information of PE (portable executable) files. Based on in-depth analysis of the static format information of the PE files, we extracted 197 features from format information of PE files and applied feature selection methods to reduce the dimensionality of the features and achieve acceptable high performance. When the selected features were trained using classification algorithms, the results of our experiments indicate that the accuracy of the top classification algorithm is 99.1% and the value of the AUC is 0.998. We designed three experiments to evaluate the performance of our detection scheme and the ability of detecting unknown and new malware. Although the experimental results of identifying new malware are not perfect, our method is still able to identify 97.6% of new malware with 1.3% false positive rates. © 2014 Jinrong Bai et al.","Bai J.; Wang J.; Zou G.","63"
"Domain","Supply Chain Attack Domain","Towards Measuring Supply Chain Attacks on Package Managers for Interpreted Languages","10.14722/ndss.2021.23055","2021","Package managers have become a vital part of the modern software development process. They allow developers to reuse third-party code, share their own code, minimize their codebase, and simplify the build process. However, recent reports showed that package managers have been abused by attackers to distribute malware, posing significant security risks to developers and end-users. For example, eslint-scope, a package with millions of weekly downloads in Npm, was compromised to steal credentials from developers. To understand the security gaps and the misplaced trust that make recent supply chain attacks possible, we propose a comparative framework to qualitatively assess the functional and security features of package managers for interpreted languages. Based on qualitative assessment, we apply well-known program analysis techniques such as metadata, static, and dynamic analysis to study registry abuse. Our initial efforts found 339 new malicious packages that we reported to the registries for removal. The package manager maintainers confirmed 278 (82%) from the 339 reported packages where three of them had more than 100, 000 downloads. For these packages we were issued official CVE numbers to help expedite the removal of these packages from infected victims. We outline the challenges of tailoring program analysis tools to interpreted languages and release our pipeline as a reference point for the community to build on and help in securing the software supply chain. © 2021 28th Annual Network and Distributed System Security Symposium, NDSS 2021. All Rights Reserved.","Duan R.; Alrawi O.; Kasturi R.P.; Elder R.; Saltaformaggio B.; Lee W.","61"
"Domain","Web Security","HidenoSeek: Camouflaging malicious Javascript in benign asts","10.1145/3319535.3345656","2019","In the malware field, learning-based systems have become popular to detect new malicious variants. Nevertheless, attackers with specific and internal knowledge of a target system may be able to produce input samples which are misclassified. In practice, the assumption of strong attackers is not realistic as it implies access to insider information. We instead propose HideNoSeek, a novel and generic camouflage attack, which evades the entire class of detectors based on syntactic features, without needing any information about the system it is trying to evade. Our attack consists of changing the constructs of malicious JavaScript samples to reproduce a benign syntax. For this purpose, we automatically rewrite the Abstract Syntax Trees (ASTs) of malicious JavaScript inputs into existing benign ones. In particular, HideNoSeek uses malicious seeds and searches for isomorphic subgraphs between the seeds and traditional benign scripts. Specifically, it replaces benign sub-ASTs by their malicious equivalents (same syntactic structure) and adjusts the benign data dependencies-without changing the AST-, so that the malicious semantics is kept. In practice, we leveraged 23 malicious seeds to generate 91,020 malicious scripts, which perfectly reproduce ASTs of Alexa top 10,000 web pages. Also, we can produce on average 14 different malicious samples with the same AST as each Alexa top 10. Overall, a standard trained classifier has 99.98% false negatives with HideNoSeek inputs, while a classifier trained on such samples has over 88.74% false positives, rendering the targeted static detectors unreliable. © 2019 Copyright held by the owner/author(s).","Fass A.; Backes M.; Stock B.","58"
"Domain","Statistical Analysis","Cross-method-based analysis and classification of malicious behavior by API calls extraction","10.3390/app9020239","2019","Data-driven public security networking and computer systems are always under threat from malicious codes known as malware; therefore, a large amount of research and development is taking place to find effective countermeasures. These countermeasures are mainly based on dynamic and statistical analysis. Because of the obfuscation techniques used by the malware authors, security researchers and the anti-virus industry are facing a colossal issue regarding the extraction of hidden payloads within packed executable extraction. Based on this understanding, we first propose a method to de-obfuscate and unpack the malware samples. Additional, cross-method-based big data analysis to dynamically and statistically extract features from malware has been proposed. The Application Programming Interface (API) call sequences that reflect the malware behavior of its code have been used to detect behavior such as network traffic, modifying a file, writing to stderr or stdout, modifying a registry value, creating a process. Furthermore, we include a similarity analysis and machine learning algorithms to profile and classify malware behaviors. The experimental results of the proposed method show that malware detection accuracy is very useful to discover potential threats and can help the decision-maker to deploy appropriate countermeasures. © 2019 by the authors.","Ndibanje B.; Kim K.H.; Kang Y.J.; Kim H.H.; Kim T.Y.; Lee H.J.","56"
"Domain","Research and Development","Cross-method-based analysis and classification of malicious behavior by API calls extraction","10.3390/app9020239","2019","Data-driven public security networking and computer systems are always under threat from malicious codes known as malware; therefore, a large amount of research and development is taking place to find effective countermeasures. These countermeasures are mainly based on dynamic and statistical analysis. Because of the obfuscation techniques used by the malware authors, security researchers and the anti-virus industry are facing a colossal issue regarding the extraction of hidden payloads within packed executable extraction. Based on this understanding, we first propose a method to de-obfuscate and unpack the malware samples. Additional, cross-method-based big data analysis to dynamically and statistically extract features from malware has been proposed. The Application Programming Interface (API) call sequences that reflect the malware behavior of its code have been used to detect behavior such as network traffic, modifying a file, writing to stderr or stdout, modifying a registry value, creating a process. Furthermore, we include a similarity analysis and machine learning algorithms to profile and classify malware behaviors. The experimental results of the proposed method show that malware detection accuracy is very useful to discover potential threats and can help the decision-maker to deploy appropriate countermeasures. © 2019 by the authors.","Ndibanje B.; Kim K.H.; Kang Y.J.; Kim H.H.; Kim T.Y.; Lee H.J.","56"
"Domain","Cloud Security","VMShield: Memory Introspection-Based Malware Detection to Secure Cloud-Based Services against Stealthy Attacks","10.1109/TII.2020.3048791","2021","With the rapid evolution of the industrial Internet, cloud service has emerged as a next-generation industrial standard that has the potential to revolutionize and transform the enterprise industry. In recent years, numerous enterprises have acknowledged the benefits of cloud-based service models. However, the security issues are a major concern, such as stealthy malware attacks against virtual domains. In this article, we propose an introspection based security approach, called VMShield for securing virtual domains in a cloud based service platform, which is designed to detect malware in cloud infrastructure. VMShield performs virtual memory introspection from the hypervisor (trusted-domain) to collect the run-time behavior of processes, making it impossible for the malware to evade the security tool. The use of introspection makes the proposed approach a better choice over traditional static and dynamic state-of-the-art techniques which fail to detect stealthy attacks. The VMShield extracts the system call features using Bag of n-gram approach and selects important features using the meta-heuristic algorithm, binary particle swarm optimization. Random Forest (RF) classifier is used to classify the monitored programs into benign and malign processes, making it capable of detecting the variants of malware thus, an advantage over the typical signature-matching approach. The University of New Mexico (UNM) Dataset and Bare cloud Dataset (University of California) has been used for the demonstration and validation of VMShield. The results prove that VMShield achieves a higher attack detection rate and reduced storage compared to previously proposed techniques. © 2005-2012 IEEE.","Mishra P.; Aggarwal P.; Vidyarthi A.; Singh P.; Khan B.; Alhelou H.H.; Siano P.","55"
"Domain","Operating System Security","Android malware classification using optimum feature selection and ensemble machine learning","10.1016/j.iotcps.2023.03.001","2023","The majority of smartphones on the market run on the Android operating system. Security has been a core concern with this platform since it allows users to install apps from unknown sources. With thousands of apps being produced and launched daily, malware detection using Machine Learning (ML) has attracted significant attention compared to traditional detection techniques. Despite academic and commercial efforts, developing an efficient and reliable method for classifying malware remains challenging. As a result, several datasets for malware analysis have been generated and made available during the past ten years. These datasets may contain static features, such as API calls, intents, and permissions, or dynamic features, like logcat errors, shared memory, and system calls. Dynamic analysis is more resilient when it comes to code obfuscation. Though binary classification and multi-classification have been carried out in recent studies, the latter provides valuable insight into the nature of malware. Because each malware variant operates differently, identifying its category might help prevent it. Using the well-known ensemble ML approach called weighted voting, this study performed dynamic feature analysis for multi-classification. Random Forest, K-nearest Neighbors, Multi-Level Perceptrons, Decision Trees, Support Vector Machines, and Logistic Regression are all studied in this ensemble model. We used a recent dataset named CCCS-CIC-AndMal-2020, which contains an extensive collection of Android applications and malware samples. A well-researched data preparation phase followed by weighted voting based on R2 scores of the ML classifiers presents an accuracy of 95.0% even after excluding 60.2% features, outperforming all recent studies. © 2023 The Authors","Islam R.; Sayed M.I.; Saha S.; Hossain M.J.; Masud M.A.","52"
"Domain","Complexity Theory","Fusion of deep learning based cyberattack detection and classification model for intelligent systems","10.1007/s10586-022-03686-0","2023","In recent years, the exponential growth of malware has posed a significant security threat to intelligent systems. Earlier static and dynamic analysis methods fail to achieve effective recognition rate and incurs high computational complexity. The recently developed machine learning (ML) and deep learning (DL) models can be employed to detect and classify cyberattacks and Malware efficiently. This paper presents a fusion of deep learning based cyberattack detection and classification model for intelligent systems named FDL-CADIS technique. The proposed FDL-CADIS technique transforms the Malware binary files into two-dimensional images, which are then classified by the fusion model. The FDL-CADIS technique employs the binary input images into the MobileNetv2 model for the extraction of features and the hyper parameter tuning process takes place utilizing the black widow optimization technique. The MobileNetv2 model derives all features from the Malware dataset and trains the model using the derived features. Finally, an ensemble of voting based classifiers, including gated recurrent unit and long short-term memory techniques, for Malware cyberattack detection and classification was developed. A comprehensive range of experimental analysis is performed against the benchmark dataset to demonstrate the FDL-CADIS technique’s promising performance. According to the comparative analysis of the results, the FDL-CADIS technique outperformed current approaches. © 2022, The Author(s), under exclusive licence to Springer Science+Business Media, LLC, part of Springer Nature.","Alzubi O.A.; Qiqieh I.; Alzubi J.A.","50"
"Domain","Information Theory","Dalvik Opcode Graph Based Android Malware Variants Detection Using Global Topology Features","10.1109/ACCESS.2018.2870534","2018","Since Android has become the dominator of smartphone operating system market with a share of 86.8%, the number of Android malicious applications are increasing rapidly as well. Such a large volume of diversified malware variants has forced researchers to investigate new methods by using machine learning since it provides a powerful ability for variants detection. Since the static analysis of malware plays an important role in system security and the opcode has been shown as an effective representation of malware, some of them use the Dalvik opcodes as features of malware and adopt machine learning to detect Android malware. However, current opcode-based methods are also facing some problems, such as considering both of accuracy and time cost, selection of features, and the lack of understanding or description of the characteristics of malware. To overcome the existing challenges, we propose a novel method to build a graph of Dalvik opcode and analyze its global topology properties, which will first construct a weighted probability graph of operations, and then we use information entropy to prune this graph while retaining information as more as possible, the next we extract several global topology features of the graph to represent malware, finally search the similarities with these features between programs. These global topology features formulate the high-level characteristics of malware. Our approach provides a light weight framework to detect Android malware variants based on graph theory and information theory. Theoretical analysis and real-life experimental results show the effectiveness, efficiency, and robustness of our approach, which achieves high detection accuracy and cost little training and detection time. © 2018 IEEE.","Zhang J.; Qin Z.; Zhang K.; Yin H.; Zou J.","47"
"Domain","Fileless Malware Static","Fileless malware threats: Recent advances, analysis approach through memory forensics and research challenges","10.1016/j.eswa.2022.119133","2023","The rapid advancements in cyber-attack strategies are in parallel with the measures for detection, analysis, and prevention. Attackers have recently developed fileless malware that can simply bypass existing security mechanisms. Researchers publish reports to help discover fileless malware and to better understand the threatʼs scope to counteract it. However, with the lack of studies on fileless malware regarding the classification and the scale of the threat, they have not been thoroughly analyzed. As a result, in this research, we explored the most recent advancements in fileless malware prevention and detection and highlighted future research challenges. We also propose an analytical approach based on the attack strategies and attributes of the selected sample. Our method simplifies feature extraction and reduces processing load. Furthermore, compared to the static analysis we do not need for decompression and unpacking for the analysis. We applied the proposed method on a real case example. It has been seen that information about fileless malware detection, working mechanism, attack method and attacker named “Kovter” can be accessed. Our approach is advantageous and can be applied as a new technique for fileless malware detection to protect systems from cyber threats. This paper also presents an insight to the fileless malware threat and provides a basic review of the methods and techniques used in the detection and analysis of fileless malware attacks. © 2022 Elsevier Ltd","Kara I.","46"
"Domain","Attack Surface Analysis","DL-FHMC: Deep Learning-Based Fine-Grained Hierarchical Learning Approach for Robust Malware Classification","10.1109/TDSC.2021.3097296","2022","The acceptance of the Internet of Things (IoT) for both household and industrial applications is accompanied by the rapid growth of IoT malware. With the increase of their attack surface, analyzing, understanding, and detecting IoT malicious behavior are crucial. Traditionally, machine and deep learning-based approaches are used for malware detection and behavioral understanding. However, recent research has shown the susceptibility of those approaches to adversarial attacks by introducing noise to the feature space. In this work, we introduce DL-FHMC, a fine-grained hierarchical learning approach for robust IoT malware detection. DL-FHMC utilizes Control Flow Graph (CFG)-based behavioral patterns for adversarial IoT malicious software detection. In particular, we extract a comprehensive list of behavioral patterns from a large dataset of malicious IoT binaries, represented by the shared execution flows, and use them as a modality for malicious behavior detection. Leveraging machine learning and subgraph isomorphism matching algorithms, DL-FHMC provides state-of-the-art performance in detecting malware samples and adversarial examples (AEs). We first highlight the caveats of CFG-based IoT malware detection systems, showing the adversarial capabilities in generating practical functionality-preserving AEs with reduced overhead using Graph Embedding and Augmentation (GEA) techniques. We then introduce Suspicious Behavior Detector, a component that extracts comprehensive behavioral patterns from three popular IoT malicious families, Gafgyt, Mirai, and Tsunami, for AEs detection with high accuracy. The proposed detector operates as a model-independent standalone module, with no prior assumptions of the adversarial attacks nor their configurations.  © 2004-2012 IEEE.","Abusnaina A.; Abuhamad M.; Alasmary H.; Anwar A.; Jang R.; Salem S.; Nyang D.; Mohaisen D.","46"
"Domain","Penetration Testing","Survey of protocol reverse engineering algorithms: Decomposition of tools for static traffic analysis","10.1109/COMST.2018.2867544","2019","Knowledge about a network protocol to understand the communication between entities is necessary for vulnerability research, penetration testing, malware analysis, network reconnaissance, and network modeling. Traffic analysis is one approach to infer a protocol, and this approach has specific challenges, tasks, methods, and solutions. In this survey, we collect tools presented by prior research in the field of protocol reverse engineering by static traffic trace analysis. We dissect each tool to discern the individual mechanisms and the algorithms on which they are based, then categorize and contrast the mechanisms and algorithms used in static traffic trace analysis to discuss how successfully they were applied in each case. To structure our discussion about the tools, we compared classification schemes for protocol reverse engineering. We present and discuss an explicit process model for static traffic trace analysis to reveal the common structure of the decomposed tools and frameworks from previous research. Via discussions of the algorithms applied within each tool, we show relations between tools, methods, and the process for each process task. We validate our model by applying it to each of the tools, then provide an outline of the utility of protocol reverse engineering. Beginning with the process description, we deduce which solutions and algorithms have already been investigated and where challenges remain to determine how new solutions may be researched in the future. Across the entire field of protocol reverse engineering, few implementations of tools and frameworks are publicly available, which remains a prevalent problem. © 2018 IEEE.","Kleber S.; Maile L.; Kargl F.","45"
"Domain","Database Security","Machine learning aided malware detection for secure and smart manufacturing: a comprehensive analysis of the state of the art","10.1007/s12008-023-01578-0","2023","In the last decade, the number of computer malware has grown rapidly. Currently, cybercriminals typically use malicious software (malware) as a means of attacking industrial systems. By email, malicious websites, and by downloading and installing software, the internet is the main medium by which malware attacks are conducted on computers. As a result of open standards and the opening of the internet, typical attack techniques can be seen in smart factories. Because of the high level of specialization of industrial cyberattacks, traditional intrusion detection systems that rely on a signature database are also failing. Anomaly detection is therefore becoming increasingly important to the research community. When smart manufacturing or cyber–physical systems involve the use of machine learning techniques to implement this paradigm, great results are obtained. A virus, trojan horse, worm, rootkit, adware, or ransomware are examples of malicious software. Analysis of static, dynamic, hybrid, or deep learning samples reveals whether a sample is malicious or benign. The unique traits of malicious and benign files can then be identified. ML-based malware detection techniques are reviewed in this paper to provide a systematic overview. In this article, 117 carefully selected articles related to malware detection are critically evaluated. It was determined which features are most capable of discriminating malware by examining feature selection methods. The most effective malware detection techniques rely on the extraction of malware features. In this paper an examination of recent trends in machine learning is presented along with an analysis of the challenges and limitations of traditional machine learning. The survey can be used by researchers to delve deeper into malware detection and scientific developments in industries. © 2023, The Author(s), under exclusive licence to Springer-Verlag France SAS, part of Springer Nature.","Rani S.; Tripathi K.; Kumar A.","39"
"Domain","Security Metrics","Secure Randomized Checkpointing for Digital Microfluidic Biochips","10.1109/TCAD.2017.2748030","2018","Digital microfluidic biochips (DMFBs) integrated with processors and arrays of sensors form cyberphysical systems and consequently face a variety of unique, recently described security threats. It has been noted that techniques used for error recovery can provide some assurance of integrity when a cyberphysical DMFB is under attack. This paper proposes the use of such hardware for security purposes through the randomization of checkpoints in both space and time, and provides design guidelines for designers of such systems. We define security metrics and present techniques for improving performance through static checkpoint maps, and describe performance tradeoffs associated with static and random checkpoints. We also provide detailed classification of attack models and demonstrate the feasibility of our techniques with case studies on assays implemented in typical DMFB hardware. © 1982-2012 IEEE.","Tang J.; Ibrahim M.; Chakrabarty K.; Karri R.","39"
"Domain","Cloud Services","Designing in-VM-assisted lightweight agent-based malware detection framework for securing virtual machines in cloud computing","10.1007/s10207-019-00447-w","2020","The security of cloud services and underlying resources is a major concern due to vulnerabilities existing in current implementation of the virtualization. Thus, there is a need of detecting system-level attacks like viruses, worms, malware, etc. In this paper, we extend our previous work on vulnerability assessment and patching by integrating in-VM-assisted agent-based malware detection (AMD) framework for securing high-risk virtual machines (VMs) in cloud. The proposed framework has two components, viz. agent at VM and anomaly detection at hypervisor. An agent continuously looks for the new deployment of the executable in-VM and applies the signature-based detection to detect known malware. For detecting unknown attacks, it generates the profile with optimal static features for new executable. The optimal features are derived using an extended binary bat algorithm with two new fitness functions. The profile is transferred to hypervisor where anomaly detection using random forest classifier is applied. It classifies the executable to either normal or malware and generates an alert to VM user. The functionality of the proposed AMD framework is validated over cloud testbed at NIT Goa, as well as with the latest malware datasets. In addition, we analyze the VM security requirements fulfilled by the proposed framework. © 2019, Springer-Verlag GmbH Germany, part of Springer Nature.","Patil R.; Dudeja H.; Modi C.","38"
"Domain","HIPAA Security Requirements","Designing in-VM-assisted lightweight agent-based malware detection framework for securing virtual machines in cloud computing","10.1007/s10207-019-00447-w","2020","The security of cloud services and underlying resources is a major concern due to vulnerabilities existing in current implementation of the virtualization. Thus, there is a need of detecting system-level attacks like viruses, worms, malware, etc. In this paper, we extend our previous work on vulnerability assessment and patching by integrating in-VM-assisted agent-based malware detection (AMD) framework for securing high-risk virtual machines (VMs) in cloud. The proposed framework has two components, viz. agent at VM and anomaly detection at hypervisor. An agent continuously looks for the new deployment of the executable in-VM and applies the signature-based detection to detect known malware. For detecting unknown attacks, it generates the profile with optimal static features for new executable. The optimal features are derived using an extended binary bat algorithm with two new fitness functions. The profile is transferred to hypervisor where anomaly detection using random forest classifier is applied. It classifies the executable to either normal or malware and generates an alert to VM user. The functionality of the proposed AMD framework is validated over cloud testbed at NIT Goa, as well as with the latest malware datasets. In addition, we analyze the VM security requirements fulfilled by the proposed framework. © 2019, Springer-Verlag GmbH Germany, part of Springer Nature.","Patil R.; Dudeja H.; Modi C.","38"
"Domain","Firmware Security","DroidRay: A security evaluation system for customized Android firmwares","10.1145/2590296.2590313","2014","Android mobile devices are enjoying a lion's market share in smartphones and mobile devices. This also attracts malware writers to target the Android platform. Recently, we have discovered a new Android malware distribution channel: releasing malicious firmwares with pre-installed malware to the wild. This poses significant risk since users of mobile devices cannot change the content of the malicious firmwares. Furthermore, pre-installed applications have ""more permissions"" (i.e., silent installation) than other legitimate mobile apps, so they can download more malware or access users' confidential information. To understand and address this new form of malware distribution channel, we design and implement ""DroidRay"": a security evaluation system for customized Android firmwares. DroidRay uses both static and dynamic analyses to evaluate the firmware security on both the application and system levels. To understand the impact of this new malware distribution channel, we analyze 250 Android firmwares and 24,009 pre-installed applications. We reveal how the malicious firmware and pre-installed malware are injected, and discovered 1,947 (8.1%) pre-installed applications have signature vulnerability and 19 (7.6%) firmwares contain pre-installed malware. In addition, 142 (56.8%) firmwares have the default signature vulnerability, five (2.0%) firmwares contain malicious hosts file, at most 40 (16.0%) firmwares have the native level privilege escalation vulnerability and at least 249 (99.6%) firmwares have the Java level privilege escalation vulnerability. Lastly, we investigate a realworld case of a pre-installed zero-day malware known as CEPlugnew, which involves 348,018 infected Android smart-phones, and we show its degree and geographical penetration. This shows the significance of this new malware distribution channel, and DroidRay is an effective tool to combat this new form of malware spreading. Copyright 2014 ACM.","Zheng M.; Sun M.; Lui J.C.S.","36"
"Domain","Privacy Protection","A case study in open source software security and privacy: Android adware","","2012","The goal of this paper is to analyze the behavior and intent of recent types of privacy-invasive Android adware. This paper starts with a review of Android mobile operating system security. This paper also addresses the broader issue as to the pros and cons of an open source operating system in terms of security and privacy. Static analysis of malware can provide higher quality results and lead to a better understanding. This approach is used in this paper. As Android's market share is rapidly growing around the world, Android security will be a crucial area of research for IT security professionals and their academic counterparts. The upside of the current situation is that malware is being quickly exposed, thanks to open-source software development tools. © 2012 Infonomics Society.","Erturk E.","34"
"Domain","System Integration","A novel hybrid mobile malware detection system integrating anomaly detection with misuse detection","10.1145/2802130.2802132","2015","As the dominator of the Smartphone operating system market, Android has attracted the attention of malware authors and researchers alike. The number of Android malware is increasing rapidly regardless of the considerable number of proposed malware analysis systems. In this paper, by taking advantages of low false-positive rate of misuse detection and the ability of anomaly detection to detect zero-day malware, we propose a novel hybrid detection system based on a new open-source framework CuckooDroid, which enables the use of Cuckoo Sandbox's features to analyze Android malware through dynamic and static analysis. Our proposed system mainly consist of two parts, a misuse detector performing known malware detection and classification through combining static analysis with dynamic analysis; an anomaly detector performing abnormal apps detection through dynamic analysis. We evaluate our method with 5560 malware samples and 12000 benign samples. Experiments shows that our misuse detector with hybrid analysis can accurately detect and classify malware samples with an average positive rate 98.79%, 98.32% respectively; it is worth noting that our anomaly detector by dynamic analysis is capable of detecting zero-day malware with a low false negative rate (1.24%) and acceptable false positive rate (2.24%). Our proposed detection system is mainly designed for App store markets and the ordinary users who can access our system through mobile cloud service. © 2015 ACM.","Wang X.; Shi J.; Yang Y.; Xu K.; Zeng Y.; Tang C.","34"
"Domain","Endpoint Security","PROUD-MAL: static analysis-based progressive framework for deep unsupervised malware classification of windows portable executable","10.1007/s40747-021-00560-1","2022","Enterprises are striving to remain protected against malware-based cyber-attacks on their infrastructure, facilities, networks and systems. Static analysis is an effective approach to detect the malware, i.e., malicious Portable Executable (PE). It performs an in-depth analysis of PE files without executing, which is highly useful to minimize the risk of malicious PE contaminating the system. Yet, instant detection using static analysis has become very difficult due to the exponential rise in volume and variety of malware. The compelling need of early stage detection of malware-based attacks significantly motivates research inclination towards automated malware detection. The recent machine learning aided malware detection approaches using static analysis are mostly supervised. Supervised malware detection using static analysis requires manual labelling and human feedback; therefore, it is less effective in rapidly evolutionary and dynamic threat space. To this end, we propose a progressive deep unsupervised framework with feature attention block for static analysis-based malware detection (PROUD-MAL). The framework is based on cascading blocks of unsupervised clustering and features attention-based deep neural network. The proposed deep neural network embedded with feature attention block is trained on the pseudo labels. To evaluate the proposed unsupervised framework, we collected a real-time malware dataset by deploying low and high interaction honeypots on an enterprise organizational network. Moreover, endpoint security solution is also deployed on an enterprise organizational network to collect malware samples. After post processing and cleaning, the novel dataset consists of 15,457 PE samples comprising 8775 malicious and 6681 benign ones. The proposed PROUD-MAL framework achieved an accuracy of more than 98.09% with better quantitative performance in standard evaluation parameters on collected dataset and outperformed other conventional machine learning algorithms. The implementation and dataset are available at https://bit.ly/35Sne3a. © 2021, The Author(s).","Rizvi S.K.J.; Aslam W.; Shahzad M.; Saleem S.; Fraz M.M.","32"
"Domain","Benchmarking","TaintBench: Automatic real-world malware benchmarking of Android taint analyses","10.1007/s10664-021-10013-5","2022","Due to the lack of established real-world benchmark suites for static taint analyses of Android applications, evaluations of these analyses are often restricted and hard to compare. Even in evaluations that do use real-world apps, details about the ground truth in those apps are rarely documented, which makes it difficult to compare and reproduce the results. To push Android taint analysis research forward, this paper thus recommends criteria for constructing real-world benchmark suites for this specific domain, and presents TaintBench, the first real-world malware benchmark suite with documented taint flows. TaintBench benchmark apps include taint flows with complex structures, and addresses static challenges that are commonly agreed on by the community. Together with the TaintBench suite, we introduce the TaintBench framework, whose goal is to simplify real-world benchmarking of Android taint analyses. First, a usability test shows that the framework improves experts’ performance and perceived usability when documenting and inspecting taint flows. Second, experiments using TaintBench reveal new insights for the taint analysis tools Amandroid and FlowDroid: (i) They are less effective on real-world malware apps than on synthetic benchmark apps. (ii) Predefined lists of sources and sinks heavily impact the tools’ accuracy. (iii) Surprisingly, up-to-date versions of both tools are less accurate than their predecessors. © 2021, The Author(s).","Luo L.; Pauck F.; Piskachev G.; Benz M.; Pashchenko I.; Mory M.; Bodden E.; Hermann B.; Massacci F.","26"
"Domain","Reverse Engineering Practices","Malware similarity identification using call graph based system call subsequence features","10.1109/ICDCSW.2013.55","2013","Recent literature has proposed approaches to detect code-sharing relationships between malware artifacts, which helps to accelerate the malware reverse engineering process. In this paper we propose a novel code-sharing analysis technique that can complement existing methods. Our algorithm partitions malware system call logs into system call subsequences by identifying places in these logs where the set of saved instruction pointers on the program call stack changes significantly. The extracted subsequences thus reflect subsequences of system calls that occur in local regions of the program call graph. Having extracted subsequences, we then use the subsequences as features for computing a malware sample similarity matrix. A unique contribution of our method is that it incorporates sequence information into the features it uses to perform similarity analysis, but unlike previously proposed longest common substring methods it runs in linear time. Similarly, our method incorporates call stack information into its features but is computationally far more tractable than previously proposed call graph isomorphism techniques. Because we extract information from sample behavior logs, we avoid the problem of obfuscated samples resistant to static analysis tools. We have evaluated our method on a corpus of 959 samples and achieve high precision given known malware family labels. © 2013 IEEE.","Blokhin K.; Saxe J.; Mentis D.","22"
"Domain","Proof of Concept","Android Rooting: An Arms Race between Evasion and Detection","10.1155/2017/4121765","2017","We present an arms race between rooting detection and rooting evasion. We investigate different methods to detect rooted device at both Java and native level and evaluate the counterattack from major hooking tools. To this end, an extensive study of Android rooting has been conducted, which includes the techniques to root the device and make it invisible to the detection of mobile antimalware product. We then analyze the evasion loopholes and in turn enhance our rooting detection tool. We also apply evasion techniques on rooted device and compare our work with 92 popular root checking applications and 18 banking and finance applications. Results show that most of them do not suffice and can be evaded through API hooking or static file renaming. Furthermore, over 28000 Android applications have been analyzed and evaluated in order to diagnose the characteristics of rooting in recent years. Our study shows that rooting has become more and more prevalent as an inevitable trend, and it raises big security concerns regarding detection and evasion. As a proof of concept, we have published our rooting detection application to Google Play Store to demonstrate the work presented in this paper. © 2017 Long Nguyen-Vu et al.","Nguyen-Vu L.; Chau N.-T.; Kang S.; Jung S.","19"
"Domain","Ransomware Encryption","A New Scheme for Ransomware Classification and Clustering Using Static Features","10.3390/electronics11203307","2022","Ransomware is a strain of malware that disables access to the user’s resources after infiltrating a victim’s system. Ransomware is one of the most dangerous malware organizations face by blocking data access or publishing private data over the internet. The major challenge of any entity is how to decrypt the files encrypted by ransomware. Ransomware’s binary analysis can provide a means to characterize the relationships between different features used by ransomware families to track the ransomware encryption mechanism routine. In this paper, we compare the different ransomware detection approaches and techniques. We investigate the criteria, parameters, and tools used in the ransomware detection ecosystem. We present the main recommendations and best practices for ransomware mitigation. In addition, we propose an efficient ransomware indexing system that provides search functionalities, similarity checking, sample classification, and clustering. The new system scheme mainly targets native ransomware binaries, and the indexing engine depends on hybrid data from the static analyzer system. Our scheme tracks and classifies ransomware based on static features to find the similarity between different ransomware samples. This is done by calculating the absolute Jaccard index. Results have shown that Import Address Table (IAT) feature can be used to classify different ransomware more accurately than the Strings feature. © 2022 by the authors.","Yamany B.; Elsayed M.S.; Jurcut A.D.; Abdelbaki N.; Azer M.A.","19"
"Domain","Cyber Threat Intelligence","Swarm Optimization and Machine Learning Applied to PE Malware Detection towards Cyber Threat Intelligence","10.3390/electronics12020342","2023","Cyber threat intelligence includes analysis of applications and their metadata for potential threats. Static malware detection of Windows executable files can be done through the analysis of Portable Executable (PE) application file headers. Benchmark datasets are available with PE file attributes; however, there is scope for updating the data and also to research novel attribute reduction and performance improvement algorithms. The existing benchmark dataset contains non-PE header attributes, and few ignored attributes. In this work, a critical analysis was conducted to develop a new dataset called SOMLAP (Swarm Optimization and Machine Learning Applied to PE Malware Detection) with a value addition to the existing benchmark dataset. The SOMLAP data contains 51,409 samples that include both benign and malware files, with a total of 108 pure PE file header attributes. Further research was carried out to improve the performance of the Malware Detection System (MDS) by feature minimization using swarm optimization tools, viz., Ant Colony Optimization (ACO), Cuckoo Search Optimization (CSO), and Grey Wolf Optimization (GWO) wrapped with machine learning tools. The dataset was evaluated, and an accuracy of 99.37% with an optimized set of 12 features (ACO) proves the efficiency of the dataset, its attributes, and the algorithms used. © 2023 by the authors.","Kattamuri S.J.; Penmatsa R.K.V.; Chakravarty S.; Madabathula V.S.P.","18"
"Domain","Market Analysis","Combining Static Permissions and Dynamic Packet Analysis to Improve Android Malware Detection","10.1109/ICCCI49374.2020.9145994","2020","Nowadays Android smart mobile devices have become the main target of malware developers, so detecting and preventing Android malware has become an important issue of information security. Therefore, this paper proposes an Android application classification system that combines static permissions and dynamic packet analysis. This system first obtains the static information of Android applications through static analysis, classifies the applications as benign or malicious through machine learning, and avoids excessive dynamic data collection time by filtering out benign applications. Then in the dynamic analysis stage, the malware's network traffic is used to extract multiple types of features, and then machine learning is used to achieve the malware family classification. The experimental results showed that the accuracy rate of the static model for malicious and benign classification was 98.86%. On the other hand, the accuracy of the dynamic model proposed in this paper for family classification of applications is 96%, which is better than 94.33% of DroidClassifier [1]. The final experiment confirmed that the system proposed in this paper can not only save 52.5% of dynamic data collection time but also improve the accuracy of Android application family classification.  © 2020 IEEE.","Shyong Y.-C.; Jeng T.-H.; Chen Y.-M.","17"
"Domain","Artificial Intelligence Ethics","Benchmarking convolutional and recurrent neural networks for malware classification","10.1109/IWCMC.2019.8766515","2019","Malware detection and classification are attracting more research nowadays due to the increasing number of malware and ransomware instances targeting financial, educational and industrial systems. In artificial intelligence, we witness a resurgence of neural networks against the symbolic school which is manifested by many breakthroughs in gaming, image recognition and natural language processing under the umbrella term of deep learning. Researchers are evaluating deep learning algorithms for static and behavioral malware analysis. In this paper, we benchmark deep learning architectures composed of recurrent and convolutional neural networks. We report results on different techniques such as Long Short Term Memory (LSTM), Gated Recurrent Units (GRU), and one-dimensional Convolutional Neural Networks (1DCNN). We develop an automatic feature extraction component and a hybrid CNN/RNN classification model. We validate our model using the Microsoft Malware Classification Challenge (BIG 2015). Our results show comparable accuracy to approaches requiring manual and thorough feature engineering. © 2019 IEEE.","Safa H.; Nassar M.; Orabi W.A.R.A.","16"
"Domain","Effectiveness Assessment","Improving fuzzing using software complexity metrics","10.1007/978-3-319-30840-1_16","2016","Vulnerable software represents a tremendous threat to modern information systems. Vulnerabilities in widespread applications may be used to spread malware, steal money and conduct target attacks. To address this problem, developers and researchers use different approaches of dynamic and static software analysis; one of these approaches is called fuzzing. Fuzzing is performed by generating and sending potentially malformed data to an application under test. Since first appearance in 1988, fuzzing has evolved a lot, but issues which addressed to effectiveness evaluation have not fully investigated until now. In our research, we propose a novel approach of fuzzing effectiveness evaluation and improving, taking into account semantics of executed code along with a quantitative assessment. For this purpose, we use specific metrics of source code complexity assessment specially adapted to perform analysis of machine code. We conducted effectiveness evaluation of these metrics on 104 wide-spread applications with known vulnerabilities. As a result of these experiments, we were able to identify the best metrics that is more suitable to find bugs. In addition we proposed a set of open-source tools for improving fuzzing effectiveness. The experimental results of effectiveness assessment have shown viability of our approach and allowed to reduce time costs for fuzzing campaign by an average of 26–28% for 5 well-known fuzzing systems. © Springer International Publishing Switzerland 2016.","Shudrak M.O.; Zolotarev V.V.","15"
"Domain","Risk Management","Predicting the Impact of Android Malicious Samples via Machine Learning","10.1109/ACCESS.2019.2914311","2019","Recently, Android malicious samples threaten billions of mobile end users' security or privacy. The community researchers have designed many methods to automatically and accurately identify Android malware samples. However, the rapid increase of Android malicious samples outpowers the capabilities of traditional Android malware detectors and classifiers with respect to the cyber security risk management needs. It is important to identify the small proportion of Android malicious samples that may produce high cyber-security or privacy impact. In this paper, we propose a light-weight solution to automatically identify the Android malicious samples with high security and privacy impact. We manually check a number of Android malware families and corresponding security incidents and define two impact metrics for Android malicious samples. Our investigation results in a new Android malware dataset with impact ground truth (low impact or high impact). This new dataset is employed to empirically investigate the intrinsic characteristics of low-impact as well as high-impact malicious samples. To characterize and capture Android malicious samples' pattern, reverse engineering is performed to extract semantic features to represent malicious samples. The leveraged features are parsed from both the AndroidManifest.xml files as well as the disassembled binary classes.dex codes. Then, the extracted features are embedded into numerical vectors. Furthermore, we train highly accurate support vector machine and deep neural network classifiers to categorize the candidate Android malicious samples into low impact or high impact. The empirical results validate the effectiveness of our designed light-weight solution. This method can be further utilized for identifying those high-impact Android malicious samples in the wild. © 2013 IEEE.","Qiu J.; Luo W.; Pan L.; Tai Y.; Zhang J.; Xiang Y.","14"
"Domain","Adware Injection","Understanding In-App Ads and Detecting Hidden Attacks through the Mobile App-Web Interface","10.1109/TMC.2018.2809727","2018","Mobile users are increasingly becoming targets of malware infections and scams. In order to curb such attacks it is important to know how these attacks originate. We take a previously unexplored step in this direction. Numerous in-app advertisements work at this interface: when the user taps on the advertisement, she is led to a web page which may further redirect until the user reaches the final destination. Even though the original applications may not be malicious, the Web destinations that the user visits could play an important role in propagating attacks. We develop a systematic static analysis methodology to find ad libraries embed in applications and dynamic analysis methodology consisting of three components related to triggering web links, detecting malware and scam campaigns, and determining the provenance of such campaigns reaching the user. Our static analysis system identified 242 different ad libraries and dynamic analysis system was deployed for a two-month period and analyzed over 600,000 applications while triggering a total of about 1.5 million links in applications to the Web. We gain a general understanding of attacks through the app-web interface and make several interesting findings including a rogue antivirus scam, free iPad scams, and advertisements propagating SMS trojans. © 2002-2012 IEEE.","Shao R.; Rastogi V.; Chen Y.; Pan X.; Guo G.; Zou S.; Riley R.","13"
"Domain","Anonymization Techniques","DOLOS: A Novel Architecture for Moving Target Defense","10.1109/TIFS.2023.3318964","2023","Moving Target Defense and Cyber Deception emerged in recent years as two key proactive cyber defense approaches, contrasting with the static nature of the traditional reactive cyber defense. The key insight behind these approaches is to impose an asymmetric disadvantage for the attacker by using deception and randomization techniques to create a dynamic attack surface. Moving Target Defense (MTD) typically relies on system randomization and diversification, while Cyber Deception is based on decoy nodes and fake systems to deceive attackers. However, current Moving Target Defense techniques are complex to manage and can introduce high overheads, while Cyber Deception nodes are easily recognized and avoided by adversaries. This paper presents DOLOS, a novel architecture that unifies Cyber Deception and Moving Target Defense approaches. DOLOS is motivated by the insight that deceptive techniques are much more powerful when integrated into production systems rather than deployed alongside them. DOLOS combines typical Moving Target Defense techniques, such as randomization, diversity, and redundancy, with cyber deception and seamlessly integrates them into production systems through multiple layers of isolation. We extensively evaluate DOLOS against a wide range of attackers, ranging from automated malware to professional penetration testers, and show that DOLOS is effective in slowing down attacks and protecting the integrity of production systems. We also provide valuable insights and considerations for the future development of MTD techniques based on our findings. © 2005-2012 IEEE.","Pagnotta G.; De Gaspari F.; Hitaj D.; Andreolini M.; Colajanni M.; Mancini L.V.","12"
"Domain","Security Architecture","Exploring the malicious android applications and reducing risk using static analysis","10.1109/ICEEOT.2016.7754896","2016","Android plays a vital role in the today's market. According to recent survey placed nearly 84.4% of people stick to android which explosively become popular for personal or business purposes. It is no doubt that the application are extremely familiar in the market for their amazing features and the wonderful benefits of android applications makes the users to fall for it. Android imparts significant responsibility to application developers for designing the application with understanding the risk of security issues. When concerned about security, malware protection is a major issue in which android has been a major target of malicious applications. In android based applications, permission control is one of the major security mechanisms. In this project, the permission induced risk in application, and the fundamentals of the android security architecture are explored, and it also focuses on the security ranking algorithms that are unique to specific applications. Hence, we propose the system providing the detection of malware analysis based on permission and steps to mitigate from accessing unwanted permission (limits the permission). It is also designed to reduce the probability of vulnerable attacks. © 2016 IEEE.","Kavitha K.; Salini P.; Ilamathy V.","11"
"Domain","Software as a Service","Hiding in the Crowd: Ransomware Protection by Adopting Camouflage and Hiding Strategy With the Link File","10.1109/ACCESS.2023.3309879","2023","Ransomware is a growing threat and is building ecosystems in the form of ransomware as a service (RaaS). While there have been diverse efforts to detect and mitigate such threats, techniques to bypass such countermeasures have advanced considerably. Since detecting all evolving threats has become challenging, there is a growing interest in developing proactive countermeasures that can minimize the damage even in environments where ransomware has already been executed. In this study, we gained insights from an attacker's perspective by analyzing ransomware such as LockBit and derived a generic counterstrategy against features that are common in ransomware attacks. Our proposed method protects critical files from existing ransomware by applying a hiding strategy that poses a challenge to attackers in finding the target files. We also present best practices for implementing the strategy while considering both in terms of security and usability using the link file and improving the method through the addition of a linker and encrypted database to reduce the attack surface. By using real-world ransomware samples, our experiments show that the proposed method successfully protects valuable files against ransomware in a cost-effective manner.  © 2013 IEEE.","Lee S.; Lee S.; Park J.; Kim K.; Lee K.","10"
"Domain","Anti-Forensics Techniques","BERTDeep-Ware: A Cross-architecture Malware Detection Solution for IoT Systems","10.1109/TrustCom53373.2021.00130","2021","Malware is widely regarded as one of the most severe security threats to modern technologies. Detecting malware in the Internet of Things (IoT) infrastructures is a critical and complicated task. The complexity of this task increases with the recent growth of malware variants targeting different IoT CPU architectures since the new malware variants often use anti-forensic techniques to avoid detection and investigation. There-fore, we cannot utilize the traditional machine learning (ML) techniques that require domain knowledge and sophisticated feature engineering in detecting the unseen mal ware variants. Re-cent deep learning approaches have performed well on mal ware analysis and detection while using minimum feature engineering requirements. In this paper, we propose BERTDeep- Ware, a real-time cross-architecture malware detection solution tailored for IoT systems. BERTDeep- Ware analyzes the executable file's operation codes (OpCodes) sequence representations using Bidi-rectional Encoder Representations from Transformers (BERT) Embedding, the state-of-the-art natural language processing (NLP) approach. The extracted sentence embedding from BERT is fed into a customized hybrid multi-head CNN-BiLSTM-LocAtt model. This deep learning (DL) model combines the convolutional neural network (CNN), bidirectional long short-term memory (BiLSTM), and the local attention mechanisms (locAtt) to capture conual features and long-term dependencies between OpCode sequences. We train and evaluate BERTDeep- Ware using the datasets created for three different CPU architectures. The performance evaluation results confirm that the proposed multi-head CNN-BiLSTM-LocAtt model produces more accurate classification results with higher detection rates and lower false positives than a number of baseline ML and DL models.  © 2021 IEEE.","Hamad S.A.; Tran D.H.; Sheng Q.Z.; Zhang W.E.","10"
"Domain","Cyber Warfare","HELO DarkSide: Breaking Free from Katas and Embracing the Adversarial Mindset in Cybersecurity Education","10.1145/3478431.3499404","2022","The pedagogy of cybersecurity education presents an exciting challenge. Although cyber-warfare has existed for nearly four decades, we fail to adequately model the chaos of offensive cyber attacks in the classroom. Instead, coursework focuses on studying choreographed cyber-attack patterns. In this paper, we present an undergraduate cybersecurity course design that balances theoretical learning with an emphasis on exploring offensive tactics, techniques, and procedures. Labs consist of writing payloads and channels to evade detection, cobbling together operating system internals to achieve attack functionality, and developing survivable post-exploitation tools. In the exams, students develop malware capable of avoiding static and dynamic analysis and identify the strategic and tactical flaws that lead to the discovery of highly successful attack campaigns. We believe that sharing this experience will prove valuable for instructors who wish to explore offensive cyber tactics in the classroom.  © 2022 ACM.","Oconnor T.J.","10"
"Domain","Cyber Kill Chain","The Rise of ICS Malware: A Comparative Analysis","10.1007/978-3-030-95484-0_29","2022","Cyber attacks against Industrial Control Systems are one of the major concerns for worldwide manufacturing companies. With the growth of emerging technologies, protecting large-scale Critical Infrastructures has become a considerable research topic in the past decade. Nowadays, software used to monitor Industrial Control Systems might be malicious and cause harm not only to physical processes but also to people working in industrial environments. To that end, integrating safety and security in Industrial Control Systems requires a well-developed understanding of malware-based cyber attacks. In this paper, we present a comparative analysis framework of ICS Malware in a bi-layered approach: A cyber threat intelligence layer based on the ICS cyber kill chain and a hybrid analysis layer based on a static and dynamic analysis of ICS malware. We evaluated our proposed method by experimenting five well-known ICS malware: Stuxnet, Havex, BlackEnergy2, CrashOverride, and TRISIS. Our comparative analysis results show different and similar strategies used by each ICS malware to disrupt the ICS environment. © 2022, Springer Nature Switzerland AG.","Mekdad Y.; Bernieri G.; Conti M.; El Fergougui A.","10"
"Domain","Incident Response","Applied Incident Response","10.1002/9781119560302","2020","Incident response is critical for the active defense of any network, and incident responders need up-to-date, immediately applicable techniques with which to engage the adversary. Applied Incident Response details effective ways to respond to advanced attacks against local and remote network resources, providing proven response techniques and a framework through which to apply them. As a starting point for new incident handlers, or as a technical reference for hardened IR veterans, this book details the latest techniques for responding to threats against your network, including: • Preparing your environment for effective incident response • Leveraging MITRE ATT&CK and threat intelligence for active network defense • Local and remote triage of systems using PowerShell, WMIC, and open-source tools • Acquiring RAM and disk images locally and remotely • Analyzing RAM with Volatility and Rekall • Deep-dive forensic analysis of system drives using open-source or commercial tools • Leveraging Security Onion and Elastic Stack for network security monitoring • Techniques for log analysis and aggregating high-value logs • Static and dynamic analysis of malware with YARA rules, FLARE VM, and Cuckoo Sandbox • Detecting and responding to lateral movement techniques, including pass-the-hash, pass-the-ticket, Kerberoasting, malicious use of PowerShell, and many more • Effective threat hunting techniques • Adversary emulation with Atomic Red Team • Improving preventive and detective controls. © 2020 by John Wiley & Sons, Inc., Indianapolis, Indiana. All rights reserved.","Anson S.","9"
"Domain","DevSecOps","Mobile Application as a Critical Infrastructure Cyberattack Surface","","2023","Mobile applications are becoming increasingly crucial for critical infrastructure, ensuring effective management and reliable communication in today's world. Postal services play a key role in logistics and serving citizens, providing a connection between people, the transfer of goods, and even delivering payments to the socially vulnerable segments of the population in remote regions. Mobile apps are increasingly becoming an integral part of postal services, offering convenience, speed, and ease of use for users, as well as access to additional features, such as scanning package barcodes and receiving notifications about shipment statuses. This article is dedicated to the security assessment of a mobile application of one of Ukraine's postal operators, which undeniably constitutes an element of the state's critical infrastructure. The research aims to evaluate the security of this app, considering potential threats and vulnerabilities that might arise during its operation. The study includes an analysis of the recommendations from popular security standards - ISO/IEC 27001:2022 and NIST Special Publication 800-163, and the application of static and dynamic analysis techniques to verify the security requirements established by OWASP Mobile Application Security Verification Standard (MASVS). The primary tool selected for this research is MobSF (Mobile Security Framework) - an automated, all-in-one framework for penetration testing, malware analysis, and security assessment of mobile apps (Android/iOS). The attack and the exploitation scenario of the identified vulnerabilities were verified in real time in an emulated environment. This article presents the vulnerabilities discovered in the mobile application. Our findings indicate the absence of usage confirmation and improper authorization for critically important functions, allowing malicious actors to remotely access the user's personal information, including name, contacts, and address, by only knowing the user's system identifier. Further, we propose countermeasures to protect the infrastructure and prevent adversaries from conducting reconnaissance and launching remote attacks using compromised accounts. The authors urge considering the possibility of applying the DevSecOps methodology when developing critical infrastructure information system applications.  © 2023 Copyright for this paper by its authors.","Mykhaylova O.; Fedynyshyn T.; Datsiuk A.; Fihol B.; Hulak H.","9"
"Domain","Continuous Integration","Chat GPT-Based Design-Time DevSecOps","10.1109/ICEST58410.2023.10187247","2023","Adoption of DevOps-enabled software development has become one of constituent processes within the workflow behind competitive organizations in any area of industry. Its main purpose consists of automation when it comes to steps of development, testing and deployment, aiming to achieve continuous integration and delivery of products and services. On the other side, these highly automatized steps are prone to security flaws and various types of vulnerabilities, which could have fatal consequences, especially in critical domains of usage, such as sensitive usage scenarios related to public infrastructure and healthcare. For that reason, the so-called DevSecOps has emerged, whose main scope are security concerns in DevOps-based automated workflows. In this paper, Python API of novel ChatGPT conversational agent service is leveraged for static code analysis of Infrastructure as Code (IaC) scripts. Moreover, we perform aggregation and post-processing of results returned by ChatGPT, making them more useful when it comes to end-users, such as DevOps engineers and system administrators. When it comes to evaluation, we focus on Ansible and Terraform IaC script case studies. © 2023 IEEE.","Petrovic N.","9"
"Domain","Defense in Depth","Spam Trapping System: Novel security framework to fight against spam botnets","10.1109/ICT.2014.6845160","2014","In this paper, we inspire from two analogies: the warfare kill zone and the airport check-in system, to tackle the issue of spam botnet detection. We add a new line of defense to the defense-in-depth model called the third line. This line is represented by a security framework, named the Spam Trapping System (STS) and adopts the prevent-then-detect approach to fight against spam botnets. The framework exploits the application sandboxing principle to prevent the spam from going out of the host and detect the corresponding malware bot. We show that the proposed framework can ensure better security against malware bots. In addition, an analytical study demonstrates that the framework offers optimal performance in terms of detection time and computational cost in comparison to intrusion detection systems based on static and dynamic analysis. © 2014 IEEE.","Derhab A.; Bouras A.; Muhaya F.B.; Khan M.K.; Xiang Y.","9"
"Domain","Predictive Analytics","Identifying email threats using predictive analysis","10.1109/CyberSecPODS.2017.8074848","2017","Malicious emails pose substantial threats to businesses. Whether it is a malware attachment or a URL leading to malware, exploitation or phishing, attackers have been employing emails as an effective way to gain a foothold inside organizations of all kinds. To combat email threats, especially targeted attacks, traditional signature- and rule-based email filtering as well as advanced sandboxing technology both have their own weaknesses. In this paper, we propose a predictive analysis approach that learns the differences between legit and malicious emails through static analysis, creates a machine learning model and makes detection and prediction on unseen emails effectively and efficiently. By comparing three different machine learning algorithms, our preliminary evaluation reveals that a Random Forests model performs the best. © 2017 IEEE.","Zeng Y.G.","7"
"Domain","Infrastructure as a Service","A dynamic malware detection in cloud platform","10.37622/IJDE/15.2.2020.243-258","2021","Cloud computing not only provides high availability on elastic resources, scalable, and cost-efficient. The platform is also widely used in information technology (IT) to support technology infrastructure and services. However, due to the complex environment and scalability of services, one of the highest security issues is malware attacks, where some of the antivirus scanner unable to detect metamorphic malware or encrypted malware where these kinds of malware able to bypass some traditional protection solution. This is why a high recognition rate and good precision detection are important to eliminate a high false-positive rate. Machine Learning (ML) classifiers are a critical role in artificial intelligent-system. However, machine learning will require to learn from the high amplitude of input data; classify then only able to generate a reliable model with a high detection rate. The objective of this work is to study and performs detection based on dynamic malware analysis and classification is through the WEKA classifier and Random Forest Jupyter Notebook. There are three classifiers chosen in this work, which are Random Forest, J-48, and Naive Bayes with 10-folds validation from the WEKA tool and another additional classifier from Random Forest - Jupyter Notebook to substantiate the accuracy. © Research India Publications","Fui N.L.Y.; Asmawi A.; Hussin M.","7"
"Domain","High Performance Computing","DockerWatch: a two-phase hybrid detection of malware using various static features in container cloud","10.1007/s00500-022-07546-2","2023","As an emerging virtualization technology, the Linux container provides a more lightweight, flexible, and high-performance operating-system-level virtual run-time environment. Its appearance has profoundly changed the development and deployment of multi-tier distributed applications. However, the imperfect system resource isolation features and the kernel-sharing mechanism will introduce significant security risks to the cloud platform. In this paper, we present DockerWatch, a real-time detection system for malware detection in the container-based cloud platform. DockerWatch uses a non-intrusive manner to extract executable files inside the containers, then uses the ensemble of various static features and behavior-based graphs as the analysis vector to learn the robust representations of malicious patterns. Consequently, a two-phase hybrid detection method based on deep learning is proposed to accelerate and enhance the detection performance, aiming to address the trade-off between fast and high-performance real-time detection. Extensive experiments are conducted and compared with extensive existing related methods using real-world datasets to validate the effectiveness of our system. The results show that DockerWatch achieves excellent detection performance with acceptable run-time performance overhead introduced into the platform. © 2022, The Author(s), under exclusive licence to Springer-Verlag GmbH Germany, part of Springer Nature.","Wang Y.; Wang Q.; Qin X.; Chen X.; Xin B.; Yang R.","7"
"Domain","Performance Optimization","Metamorphic Malware Evolution: The Potential and Peril of Large Language Models","10.1109/TPS-ISA58951.2023.00019","2023","Code metamorphism refers to a computer programming exercise wherein the program modifies its own code (partial or entire) consistently and automatically while retaining its core functionality. This technique is often used for online performance optimization and automated crash recovery in certain mission-critical applications. However, the technique has been misappropriated by malware creators to bypass signature-based detection measures instituted by anti-malware engines. However, current code mutation engines used by threat actors offer only a limited degree of mutation, which is frequently detectable via static code analysis. The advent of large language models (LLMs), such as ChatGPT 4.0 and Google Bart may lead to a significant evolution in this landscape. These models have demonstrated a level of algorithm comprehension and code synthesis capability that closely resembles human abilities. This advancement has sparked concerns among experts that such models could be exploited by threat actors to generate sophisticated metamorphic malware. This paper explores the potential of several prominent LLMs for software code mutation that may be used to reconstruct (with mutation) existing malware code bases or create new forms of embedded mutation engines for next-gen metamorphic malwares. In this work, we introduce a framework for creating self-testing program mutation engines based on LLM/Transformer-based models. The proposed framework serves as an essential tool in testing next-gen metamorphic malware detection engines.  © 2023 IEEE.","Madani P.","7"
"Domain","Election System Security","BTMD: A framework of binary translation based malcode detector","10.1109/CyberC.2012.16","2012","Binary Translation technology is used to convert binary code of one Instruction Set Architecture (ISA) into another. This technology can solve the software-inheritance problem and ISA-compatibility between different computers architecture. In this paper, we describe BTMD (Binary Translation based Malcode Detector), a novel framework that exploits static and dynamic binary translation features to detect broad spectrum malware and prevent its execution. By operating directly on binary code with MD Rules on the availability of source code, BTMD is appropriate for translating low-level binary code to high-level proper representation, obtaining CFG (Control Flow Graph) and other high-level Control Structure by MD Parser. Then Critical API Graph based on CFG is generated to do sub graph matching with the defined Malware Behavior Template. MD Engine in BTMD is called to undertake the process to take on the remaining code analysis. Compared with other detection approaches, BTMD is found to be very efficient in terms of detection capability and false alarm rate. © 2012 IEEE.","Shan Z.; Guo H.; Pang J.","7"
"Domain","Container Security","Implementing a Method for Docker Image Security; [Docker Görüntü Güvenli?ine Yönelik Bir Yöntem Uygulamas]","10.1109/ISCTURKEY53027.2021.9654383","2021","Containers that can be easily created, transported and scaled with the use of container-based virtualization technologies work better than classical virtualization technologies and provide efficient resource usage. The Docker platform is one of the most widely used solutions among container-based virtualization technologies. The OS-level virtualization of the Docker platform and the container's use of the host operating system kernel may cause security problems. In this study, a method including static and dynamic analysis has been proposed to ensure Docker image and container security. In the static analysis phase of the method, the packages of the images are scanned for vulnerabilities and malware. In the dynamic analysis phase, Docker containers are run for a certain period of time, after the open port scanning, network traffic is analyzed with the Snort3. Seven Docker images are analyzed and the results are shared.  © 2021 IEEE.","Sengul O.; Ozkilicaslan H.; Arda E.; Yavanoglu U.; Dogru I.A.; Selcuk A.A.","7"
"Domain","Version Control","AI-enhanced Defense Against Ransomware Within the Organization’s Architecture","10.13052/jcsm2245-1439.1146","2022","Ransomware is a type of revenue-generating tactic that cybercriminals utilize to improve their income. Businesses have spent billions of dollars recovering control of their resources, which may include confidential data, operational applications and models, financial transactions, and other information, as a result of malicious software. Ransomware can infiltrate a resource or device and restrict the owner from accessing or utilizing it. There are various obstacles that a business must overcome in order to avoid ransomware attacks. Traditional ransomware detection systems employ a static detection method in which a finite dataset is provided into the system and a logical check is performed to prevent ransomware attacks against the system. This was effective in the early stages of the internet, but the scenario of recent times is far more advanced, and as more and more cyber world contrivances have been analyzed, multiple gaps have been identified, to the benefit of ransomware attackers, who use these gaps to generate astronomically large sums of money. As a result, the suggested methodology aims to efficiently detect diverse patterns associated with various file formats by starting with their sources, data collecting, probabilistic identification of target devices, and deep learning classifier with intelligent detection. An organization can use the recommended approach to safeguard its data and prepare for future ransomware attacks by using it as a roadmap to lead them through their security efforts. © 2022 River Publishers.","Chaithanya B.N.; Brahmananda S.H.","6"
"Domain","Code Signing Domain","Feature Extraction Approach to Unearth Domain Generating Algorithms (DGAs)","10.1109/DASC-PICom-CBDCom-CyberSciTech49142.2020.00077","2020","Domain name plays a crucial role today, a technique was developed to algorithmically generate do-main names (AGD) with the idea to solve the problem of designing domain names manually. Attackers deploy highly sophisticated tactics to compromise end-user systems to gain control as a target for malware to spread, as they are immune to static prevention methods like blacklisting and sinkholing. There have been multiple attempts to prevent them using lexical feature analysis, domain query responses, and some of these techniques have been really efficient as well. In this paper we propose a framework to detect Domain Generating Algorithms (DGAs) even in real network traffic, using features studied from legitimate domain names in static and real traffic, by considering feature extraction as the key of the framework we propose. The detection process consists of detection, prediction and classification attaining a maximum accuracy of 99%. © 2020 IEEE.","Upadhyay S.; Ghorbani A.","6"
"Domain","Cost Optimization","Optimized Deep Learning Technique for the Effective Detection of Windows PE Malware","10.1007/978-3-031-73494-6_27","2025","This study examines the effects of several hyper-parameters, such as the number of epochs, batch size, number of layers and neurons, optimization technique, dropout rate, type of activation function, and learning rate, on deep learning-based static malware detection. To determine the ideal hyper-parameters for our deep learning model, we used the inception approach. Our research shows that convolutional neural networks with inception are more effective than other techniques, and that the correctness of the model is greatly influenced by the choice of hyper-parameter values. In particular, our method causes the neural network model’s accuracy for static malware detection on the Ember dataset to significantly increase (from 84.19% to 90.78%). These findings support the efficacy of our suggested methodology and have significant ramifications for the static malware detection community. © The Author(s), under exclusive license to Springer Nature Switzerland AG 2025.","Ganapathiyappan K.; Yadav A.","5"
"Domain","Performance Measurement","AASH: A Lightweight and Efficient Static IoT Malware Detection Technique at Source Code Level","10.1109/ACCC58361.2022.00010","2022","IoT malware applications significantly threaten user privacy and security. Traditionally, IoT developers have focused primarily on hardware, but connectivity requires additional embedded software, usually developed by third-party developers. Unfortunately, third-party code is not always secure and trustworthy, and it frequently contains bugs and malicious code, which leaves IoT devices vulnerable. We propose the AASH technique (IoT Malware Detection) a novel technique that can detect malware at the source code level using the Adler-32 hash function and Fibonacci search. Previously, DROIDMD technique and SQVDT technique have been proposed to detect malware on Android and Linux devices. According to the authors, their schemes are scalable and can be deployed on IoT devices. However, their technique suffers from lower accuracy and takes longer to detect malicious code. The performance measurement shows that our proposed AASH technique is comparatively better than DROIDMD and SQVDT techniques in terms of accuracy and malware detection. AASH is reliable, efficient, and can be deployed on a large-scale level. © 2022 IEEE.","Glani Y.; Ping L.; Shah S.A.","5"
"Domain","Firmware Security Domain","Inter-IP Malicious Modification Detection through Static Information Flow Tracking","10.23919/DATE54114.2022.9774694","2022","To help expand the usage of formal methods in the hardware security domain. We propose a static register-transfer level (RTL) security analysis framework and an electronic design automation (EDA) tool named If-Tracker to support the proposed framework. Through this framework, a data-flow model will be automatically extracted from the RTL description of the SoC. Information flow security properties will then be generated. The tool checks all possible inter-IP paths to verify whether any property violations exist. The effectiveness of the proposed framework is demonstrated on customized SoC designs using AMBA bus where malicious modifications are inserted across multiple IPs. Existing IP level security analysis tools cannot detect such Trojans. Compared to commercial formal tools such as Cadence JasperGold and Synopsys VC-Formal, our framework provides a much simpler user interface and can identify more types of malicious modifications. © 2022 EDAA.","Liu Z.; Arias O.; Fu W.; Jin Y.; Guo X.","5"
"Domain","Vulnerability Static Scan","Dynamic Distributed Secure Storage against Ransomware","10.1109/TCSS.2019.2924650","2020","In just a few years, ransomware evolved into one of the most pernicious threats on the web. From hijacking private disks, the cybercriminals moved to disabling hospital networks, while the cyberwarriors launched destructive cyberwar exercises masquerading as ransomware. To match the variety of attacks, there is also a variety of promising proposals for the mitigation of the ransomware problem by disrupting the attack cycle at various points. None of them seems to be eliminating the vulnerability of static nodes in dynamic networks. We put forward the idea that ransomware is a symptom of a broader problem of architectural imbalance in social computation, while the processes are dynamic and nonlocal, the storage is static and local. We study and discuss some paths toward dynamic, nonlocal, and secure storage. Furthermore, we provide a toy method for locally encrypting the data that can provide a balance of high security and encryption speed.  © 2014 IEEE.","Castiglione J.; Pavlovic D.","5"
"Domain","Healthcare Security","AI driven IOMT security framework for advanced malware and ransomware detection in SDN","10.1186/s13677-025-00745-w","2025","An AI driven double-tier detection system, means this is a security framework that works in two layers to increase accuracy and reliability of threat identification, this is presented in this research. The system designs to tackle rising Software Defined Network (SDN) security threats especially in healthcare environment to the risk of malware, and ransomware attacks, is powered by Deep Learning (DL) and Machine Learning (ML) technologies to work together, as a static and dynamic scanning methods. Using this, execution traces and the Application Programming Interface (API) call sequences are integrated with Generative Adversarial Networks (GANs) and autoencoder based predictive analysis to improve the threat detection. This is a continuous training system that ensures medical data’s protection while maintaining compliance with health regulations and creates a secure operational environment. The double tier eXtreme Gradient Boosting (XGBoost) performance reaches 99.60% accuracy with an F1 score of 0.9966 and outperforming the benchmark model at 98.80% accuracy and F1 score 0.988. Further, a two-layer Light Gradient Boosting Machine (LightGBM) model achieves 99.32% accuracy with an F1 score of 0.9934, in contrast to which at 98.96% accuracy and an F1 score of 0.9895, beats its benchmark counterpart. Furthermore, the Deep Neural Network (DNN) system with bi layered also achieves 99.13% accuracy and F1 score of 0.9915. This study presents novel countermeasures for these SDN and healthcare security threats that warrant a breakthrough in the field of cybersecurity. The presented security model is agile and strong which offer real time network assessment and continue to detect emerging threats thus improving the protection of critical healthcare infrastructure. © The Author(s) 2025.","Almotiri S.H.","4"
"Domain","Cryptocurrency Wallet","An Empirical Analysis of Security and Privacy Risks in Android Cryptocurrency Wallet Apps","10.1007/978-3-031-33491-7_26","2023","A cryptocurrency wallet app is a piece of software that manages, stores, and generates private keys of cryptocurrency accounts. With the provision of services such as easy access to transaction history, and checking account balance besides transmissions of new transactions in distributed networks such as Blockchains, cryptocurrency wallet apps gain unprecedented popularity which in turn attracts malicious actors to attack users resulting in loss of cryptocurrency assets and leakage of sensitive user data. This paper presents the first large-scale study of Android cryptocurrency wallet apps. We surveyed apps on Google Play to detect and extract meta-data and application packages of 457 cryptocurrency wallet apps. We perform several passive and active measurements designed to investigate the security and privacy features to study the behavior of cryptocurrency wallet apps. Our analysis includes investigating cryptocurrency wallet apps’ third-party embedding, malware presences, and exfiltration of users’ sensitive data to third-parties. Our study reveals vulnerabilities and privacy issues in cryptocurrency apps including the insecure use of HTTP to serve transactions. © 2023, The Author(s), under exclusive license to Springer Nature Switzerland AG.","Sentana I.W.B.; Ikram M.; Kaafar M.A.","4"
"Domain","Mesh Network Malware","A Malware Classification Method Based on the Capsule Network","10.1007/978-3-030-62223-7_4","2020","Malware has become a serious threat to network security. Traditional static analysis methods usually cannot effectively detect packers, obfuscations, and variants. Dynamic analysis is not efficient when dealing with large amounts of malware. Aiming at the shortcomings of the existing methods, this paper proposes a method for analyzing malware based on the capsule network. It uses a supervised learning method to train the capsule network with a large number of malware samples with existing category labels. In the process of constructing features, this paper adopts a method of combining static features and dynamic features to extract the operation code information based on static analysis, and extract the API call sequence information based on general analysis. Both characteristics can well represent the structure and behavior of malware. Then use N-Gram to construct sequence features, visualize the N-Gram sequence, generate malware images, and finally use the capsule network for classification detection. In addition, this paper improves the original capsule network and verifies the effect of the improved model. © 2020, Springer Nature Switzerland AG.","Wang Z.; Han W.; Lu Y.; Xue J.","4"
"Domain","Firmware Analysis","FirmwareDroid: Towards Automated Static Analysis of Pre-Installed Android Apps","10.1109/MOBILSoft59058.2023.00009","2023","Supply chain attacks are an evolving threat to the IoT and mobile landscape. Recent malware findings have shown that even sizeable mobile phone vendors cannot defend their operating systems fully against pre-installed malware. Detecting and mitigating malware and software vulnerabilities on Android firmware is a challenging task requiring expertise in Android internals, such as customised firmware formats. Moreover, as users cannot choose what software is pre-installed on their devices, there is a fundamental lack of transparency and control. To make Android firmware analysis more accessible and regain some transparency, we present FirmwareDroid, a novel open-source security framework for Android firmware analysis that automates the extraction and analysis of pre-installed software.FirmwareDroid streamlines the process of software extraction from Android firmware for static security and privacy assessments. With FirmwareDroid, we lay the groundwork for researchers to automate the security assessment of Android firmware at scale, and we demonstrated the capabilities of FirmwareDroid by analysing 5,728 Android firmware samples from various vendors. We analysed 75,141 unique pre-installed Android applications to study how common advertising tracker libraries (a piece of software that collects user usage data) are used and which permissions pre-installed Android apps inherit. We conclude that 20.53% of all apps in our dataset include advertising trackers and that 88.14% of all used permissions are signature-based. © 2023 IEEE.","Sutter T.; Tellenbach B.","4"
"Domain","Publication and Dissemination","HTChecker: Detecting hardware trojans based on static characteristics","10.1109/ISCAS.2017.8050674","2017","Hardware Trojan detection, which is very important to the chip security, has drawn more and more attention in both academia and industry. In this paper, we propose a novel hardware Trojan detection scheme named HTChecker, which detects hardware Trojans with subgraph isomorphism based on static characteristics of Trojans. Unlike other schemes, HTChecker pay more attention to preventing the replication and dissemination of hardware Trojans. We evaluate the HTChecker with random mixtures of Trojans and circuits from ITC'99 benchmarks and OpenCores. Experiments show that HTChecker can detect Trojans quickly and accurately without Golden Chip and it can cope with actual VLSI designs with large scale efficiently. © 2017 IEEE.","Shen H.; Zhao Y.","4"
"Domain","Telecom Infrastructure","Enhanced detection of advanced malicious software","10.1109/UEMCON.2016.7777866","2016","Over the last year the number of polymorphic and metamorphic malware samples seen in the wild has grown exponentially. The development of signatures for defensive purposes simply cannot keep up with the pace of these new malware attacks. New and sophisticated malware have been able to bypass network protection infrastructures to deliver attacks on the intended target. The network defense apparatus which relies on signature-based detection finds itself practically useless and unable to protect networks, platforms and data. This paper describes a novel approach to detect polymorphic and metamorphic malware. Our approach uses a unique method of leveraging multidimensional topological data with advanced clustering techniques for network detection. The results of our initial research and a discussion of future research possibilities are also presented. © 2016 IEEE.","Fraley J.B.; Cannady J.","4"
"Domain","Resource Efficiency","A Neural Network Approach to a Grayscale Image-Based Multi-File Type Malware Detection System","10.3390/app132312888","2023","This study introduces an innovative all-in-one malware identification model that significantly enhances convenience and resource efficiency in classifying malware across diverse file types. Traditional malware identification methods involve the extraction of static and dynamic features, followed by comparisons with signature-based databases or machine learning-based classifiers. However, many malware detection applications that rely on transfer learning and image transformation suffer from excessive resource consumption. In recent years, transfer learning has emerged as a powerful tool for developing effective classifiers, leveraging pre-trained neural network models. In this research, we comprehensively explore various pre-trained network architectures, including compact and conventional networks, as well as series and directed acyclic graph configurations for malware classification. Our approach utilizes grayscale transform-based features as a standardized set of characteristics, streamlining malware classification across various file types. To ensure the robustness and generalization of our classification models, we integrate multiple datasets into the training process. Remarkably, we achieve an optimal model with 96% accuracy, while maintaining a modest 5 MB size using the SqueezeNet classifier. Overall, our model efficiently classifies malware across file types, reducing the computational load, which can be useful for cybersecurity professionals and organizations. © 2023 by the authors.","Copiaco A.; El Neel L.; Nazzal T.; Mukhtar H.; Obaid W.","3"
"Domain","Vulnerability Management","Theoretical Study of Security for a Software Product","10.1007/978-981-19-7660-5_20","2023","In the beginning, some of the most fundamental aspects of security, like confidentiality, integrity, and availability are presented. Then, the attacker’s key motivators are mentioned. In the following parts, the focus is on the ways of designing and developing a secure software product. So, from a design point of view, the secure software development life cycle and how a security management process should take place are described in multiple phases starting from security threat and risk analysis phase to security testing phase and malware scanning. To keep track of vulnerabilities that might appear in the future, especially for 3rd party products, a security vulnerability management process should be used. Finally, some of the most common vulnerabilities and ways to assure secure code are presented in the secure development chapter. Making source code security analysis by using static/dynamic/interactive application security testing tools with manual code reviews is some important factors in assuring secure software development. © 2023, The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd.","Stanciu A.-M.","3"
"Domain","Trusted Platform Module","StaticTrust: A practical framework for trusted networked devices","10.1109/HICSS.2011.384","2011","Given the proliferation of malware and malicious activities, the integrity of communication systems is an ever growing concern. In this work, we propose StaticTrust, an integrity measurement framework which enables a system to evaluate the integrity and state of a remote client prior to providing trusted communication services. StaticTrust is designed for a specific class of network devices that have software images that change infrequently and require tight configuration control (e.g. routers, switches, trusted gateways, or high-low guards). StaticTrust exploits the relatively static nature of these communication systems and uses a Trusted Platform Module (TPM) to measure the state and provide identity verification for the device. This framework, coupled with the attestation and dynamic firewall exception services we authored, enables remote parties to confirm the integrity of clients, thereby limiting the effects and the proliferation of malware in a compromised system. We implement a prototype of the StaticTrust framework and measure the performance of our system to show that our design choices for constructing the software image result in efficient measurement and verification of system integrity. © 2011 IEEE.","Harris J.; Hill R.L.","3"
"Domain","Return on Investment","Malware Attacks: Dimensions, Impact, and Defenses","10.1007/978-3-030-90708-2_9","2022","Malware is a top threat to the current digital world. It will be more devastating in coming years due to the expansion of information technology in various fields of life, engagement of different type of users, and increased technical sophistication in malware. The changing motivations, multi-resource investment in malware development and Return on Investment (RoI) are the main reasons for the exponential growth in malware. Businesses and users are losing millions of dollars due to various malware attacks. Although there are different Anti-malware solutions and other security software, malware attacks are successful due to inherent limitations of these security products and common security vulnerabilities such as“zero-day”, “buffer-overflow”, etc. This book chapter provides a detailed study about malware, its propagation and attack mechanisms and discusses various anti-malware techniques (machine learning, bio-inspired algorithms etc.). It also presents possible research directions for developing tools and techniques for better protection against malware. © 2022, The Author(s), under exclusive license to Springer Nature Switzerland AG.","Kumar A.; Choi B.J.; Kuppusamy K.S.; Aghila G.","3"
"Domain","Aerospace Security","MateGraph: Toward Mobile Malware Detection Through Traffic Behavior Graph","10.1109/HPCC-DSS-SmartCity-DependSys57074.2022.00132","2022","As the number of interconnected mobile devices increases exponentially, mobile malware poses a severe threat to cyberspace security. Existing techniques utilize network traffic analysis effectively to identify and detect mobile malware. The majority of these solutions concentrate on the statistical features of malicious traffic or the information of key fields in the packet, but fail to take advantage of rich communication patterns throughout the entire network. In this paper, we present MateGraph, a traffic behavior graph-based approach to detect and classify mobile malware. The key insight of our research is that the communication patterns of a mobile application can be modeled as several traffic behavior graphs in Non-Euclidean space, and thus we can differentiate between malicious and benign applications by using graph convolution network models to learn graph topologies and representations. In MateGraph, we first construct a traffic behavior graph from a given chunk of network traffic within a time window, where a node of the graph is defined by a tuple of destination IP and port while an edge is established by the static and dynamic correlation between the nodes. Next, we present an enhanced graph convolution network for discovering the diverse pattern representations of benign and malicious traffic behavior graphs and achieving high detection performance and efficiency. We have conducted experiments on a publicly available dataset to evaluate MateGraph against several state-of-the-art methods, and the experimental results show that MateGraph has a better performance, the F1 score of which reached 96.57% and the accuracy increased by more than 7%.  © 2022 IEEE.","Ge R.; Zhang Y.; Si C.; Zhou G.; Zhou W.","3"
"Domain","User Feedback","Closing the Pandora's box: Defenses for thwarting epidemic outbreaks in mobile adhoc networks","10.1109/MASS.2012.6502518","2012","The openness of the Android operating system increased the number of applications developed, but it also introduced a new propagation vector for mobile malware. We model the propagation of mobile malware using epidemiology theory and study the problem as a function of the underlying mobility models. We define the optimal approach to heal an infected system with the help of a set of static healers that distribute patches, as the T-COVER problem and show that it is NP-HARD. We then propose two families of healer protocols that trade-off time recovery and energy consumed by sending patches. The first one uses randomization to ensure a small recovery time but may result in healers sending more patches than needed. The second one uses system feedback to optimize energy consumed by sending patches, but it may result in a larger recovery time. We show through simulations using the NS-3 simulator that despite lacking knowledge of the future, our protocols obtain a recovery time within a 10x bound of the oracle solution that knows the arrival time of the infected nodes. © 2012 IEEE.","Potharaju R.; Hoque E.; Nita-Rotaru C.; Sarkar S.; Venkatesh S.S.","2"
"Domain","Information Sharing","Context-aware embeddings for robust multiclass fraudulent URL detection in online social platforms","10.1016/j.compeleceng.2024.109494","2024","The current ubiquity of online social networks (OSNs) cannot be overstated, and they have over 4.8 billion users worldwide. These platforms have become integrated into modern life, representing an important means of communication and information sharing. However, this widespread popularity has also drawn the attention of cybercriminals, who seek to exploit OSNs using deceptive Uniform Resource Locators (URLs) as their weapons of choice. Conventional URL-classification methods, which rely on post-access features or static analysis, face significant limitations; they struggle to keep pace with the ever-evolving tactics of cybercriminals, and they often lack the granularity required for precise URL categorization. The methodology proposed herein takes a different path, leveraging the power of an artificial neural network (ANN) in tandem with Bidirectional Encoder Representations from Transformers (BERT) to extract contextual embeddings from URLs. By combining the cutting-edge capabilities of ANNs and BERT, we introduce an efficient approach to safeguarding OSN users from the insidious threats lurking behind deceptive URLs by classifying them into five distinct categories: benign, defacement, phishing, malware, and spam. The proposed approach was found to achieve an impressive accuracy rate of 98.0%, surpassing the previous best of 97.92%. This technique thus has the potential to serve as a crucial defense mechanism for the billions of individuals who rely on OSNs for their social and informational needs. © 2024 The Author(s)","Afzal S.; Asim M.; Beg M.O.; Baker T.; Awad A.I.; Shamim N.","2"
"Domain","Machine Learning Applications","A panoramic view of cyber attack detection and prevention using machine learning and deep learning approaches","10.1201/9781003119838-4","2021","A set of code or a software designed in such a way to cause damage to a computer, server, mobile phones, or computer network is known as malware. Malicious software is a malware that exploits the cyber world and causes huge losses. Cyber attacks are increasing day by day and have become a great threat to the digital world. A recent survey says that there will be a malware (Ransomware) attack every 11 seconds by 2021 and by that time, global costs will be around $20 billion yearly. And also, every year, Ransomware generates an estimated $1 billion in revenue for cybercriminals. Various types of malware may cause serious threats to the digital world. Largely, malware is identified using signatures of the previously attacked malware even when the attackers try to create new malware that doesn’t fall under this signature. In such a scenario, it is necessary to develop a malware detection and a prevention system. The existing machine learning applications to provide solutions to problems of cyber security had a substantial impact and hence, it’s critical to explore the novel deep learning approaches toward protecting the information in the field of cyber security. The deep learning approaches are currently used in a widespread manner for cyber security applications. This chapter aims to review the deep learning architectures suitable for malware detection and prevention for cyber security applications. The categories of malware based on the functionality and attack patterns are termed virus, Trojan, backdoor, adware, botnet, root kit, and dropper. This chapter’s objective is to understand the working of malware and to detect and eliminate it using machine learning and deep learning approaches. The classification of malware analysis falls under categories such as static analysis, dynamic analysis, code analysis, and memory analysis. Detection of malware based on windows operating system, Android Operating system, and Ransomware is studied and its future direction is analyzed. To prevent this type of malware, traditional Machine Learning (ML)-based classification algorithms such a Support Vector Machine (SVM), Random Forest (RF), Naive Bayes (NB), Decision Tree (DT), Logistic regression (LR), and AdaBoost can be used to efficiently detect the malware. Feature extraction is an important feature that requires prior knowledge of the application and hence neural network-based machine learning techniques are utilized that improves the performance of the classifiers used. These soft computing techniques can be utilized when the features are known in advance and these features are not changed frequently so that the classifications can be more accurate. But when the features cannot be predicted due to insufficient domain knowledge and also the data are too large to analyze, then the deep learning approaches become critical. As the initial level of deep learning architecture Multilayer perceptron (MLP), the neural network can be incorporated when the features for an application are known and can be categorized for analysis. The time-series data utilize long short-term memory (LSTM) and Gated Recurrent Unit (GRU) for improved classification accuracy. © 2022 Taylor & Francis Group, LLC.","Daniel E.; Susila N.; Durga S.","2"
"Domain","Peer Review","Reflections on Trusting Docker: Invisible Malware in Continuous Integration Systems","","2023","Continuous integration (CI) is a widely adopted methodology for supporting software development. It provides automated generation of artifacts (e.g., binaries, container images) which are then deployed in production. However, to which extent should you trust the generated artifacts even if the source code is clean of malicious code? Revisiting the famous compiler backdoor from Ken Thompson, we show that a container-based CI system can be compromised without leaving any trace in the source code. Therefore, detecting such malware is challenging or even impossible with common practices such as peer review or static code analysis. We detail multiple ways to do the initial infection process. Then, we show how to persist during CI system updates, allowing long-term compromise. We detail possible malicious attack payloads such as sensitive data extraction or backdooring production software. We show that infected CI systems can be remotely controlled using covert channels to update attack payload or adapt malware to mitigation strategies. Finally, we propose a proof of concept implementation tested on GitLab CI and applicable to major CI providers. © 2023 17th IEEE Workshop on Offensive Technologies, WOOT 2023, co-located with IEEE S and P 2023. All Rights Reserved.","Moriconi F.; Neergaard A.I.; Georget L.; Aubertin S.; Francillon A.","2"
"Domain","MITRE ATT&CK Framework","Real Time Multistage Attack Detection Leveraging Machine Learning and MITRE Framework","10.1109/SMART55829.2022.10047248","2022","Organizations regardless of their size are rapidly transforming, adopting and embracing digitalization amid the COVID pandemic. The pandemic forced organizations to ratio- nalize offline operations and swift towards online operations. Many organizations have digitized their services and have witnessed increasing Multistage cyber-attacks. Further, a lot of organizations have enabled remote access to the enterprise resources and services. As a result, organizations are striving to defend against Multistage cyber-attacks. These multistage attacks often spread across many stages, which is best described by MITRE Adversarial Tactics, Techniques, and Common Knowl- edge (ATT&CK) Framework. There are many research efforts for static detection of malicious binaries but very few or limited research targeting run-time detection of malicious processes in the system. Detection of these malicious processes are key for identifying new variants of multistage attacks or malware in the real world. This paper proposes a system for detecting multistage attacks in real-time or run-time by leveraging Machine learning and MITRE ATT&CK Framework. Machine learning facilitates detecting the malicious process in the system, and the MITRE ATT&CK framework offers insight into adversary techniques. Combination of these two is very effective in detecting multistage attacks and identifying individual stages. The proposed system shows promising results when tested on real-time/latest malware. Test result shows that our system can achieve 95.83% of accuracy. This paper discusses the challenges in detection of runtime malware, dataset generation © 2022 IEEE.","Takey Y.S.; Tatikayala S.G.; Patil M.U.; Lakshmi Eswari P.R.; Samavedam S.S.","2"
"Domain","Cryptominer Detection","MineDetector: JavaScript Browser-side Cryptomining Detection using Static Methods","10.1109/CSE53436.2021.00022","2021","Because of the rise of the Monroe coin, many JavaScript files with embedded malicious code are used to mine cryptocurrency using the computing power of the browser client. This kind of script does not have any obvious behaviors when it is running, so it is difficult for common users to witness them easily. This feature could lead the browser side cryptocurrency mining abused without the user's permission. Traditional browser security strategies focus on information disclosure and malicious code execution, but not suitable for such scenes. Thus, we present a novel detection method named MineDetector using a machine learning algorithm and static features for automatically detecting browser-side cryptojacking scripts on the websites. MineDetector extracts five static feature groups available from the abstract syntax tree and text of codes and combines them using the machine learning method to build a powerful cryptojacking classifier. In the real experiment, MineDetector achieves the accuracy of 99.41% and the recall of 93.55% and has better performance in time comparing with present dynamic methods. We also made our work user-friendly by developing a browser extension that is click-to-run on the Chrome browser.  © 2021 IEEE.","Wang P.; Sun Y.; Huang C.; Du Y.; Liang G.; Long G.","2"
"Domain","Runtime Library Detection","Identifying runtime libraries in statically linked linux binaries","10.1016/j.future.2024.107602","2025","Vulnerabilities in unpatched applications can originate from third-party dependencies in statically linked applications, as they must be relinked each time to take advantage of libraries that have been updated to fix any vulnerability. Despite this, malware binaries are often statically linked to ensure they run on target platforms and to complicate malware analysis. In this sense, identification of libraries in malware analysis becomes crucial to help filter out those library functions and focus on malware function analysis. In this paper, we introduce MANTILLA, a system for identifying runtime libraries in statically linked Linux-based binaries. Our system is based on radare2 to identify functions and extract their features (independent of the underlying architecture of the binary) through static binary analysis and on the K-nearest neighbors supervised machine learning model and a majority rule to predict final values. MANTILLA is evaluated on a dataset consisting of binaries built for different architectures (MIPSeb, ARMel, Intel x86, and Intel x86-64) and different runtime libraries (uClibc, glibc, and musl), achieving very high accuracy. We also evaluate it in two case studies. First, using a dataset of binary files belonging to the binutils collection and second, using an IoT malware dataset. In both cases, good accuracy results are obtained both in terms of runtime library detection (94.4% and 95.5%, respectively) and architecture identification (100% and 98.6%, respectively). © 2024 The Authors","Carrillo-Mondéjar J.; Rodríguez R.J.","1"
"Domain","Supply Chain Security","An Analysis of Malicious Behaviors of Open-Source Packages Using Dynamic Analysis","10.1007/978-3-031-76273-4_8","2025","There has been an increasing number of malicious open-source packages in recent years. A recent backdoor attack on the Linux xz utility has highlighted the importance of security checks on open-source packages, especially popular ones. While major security scanners focus on identifying vulnerabilities (CVEs) in open-source packages, there are very few studies on malware analysis techniques for them. Similar to traditional malware analysis, there are two types of analysis for open-source packages: static and dynamic analysis. Static analysis techniques mainly focus on analyzing the source code of a package while dynamic analysis techniques execute the code in an isolated environment. Dynamic analysis techniques seem more promising than static analysis techniques, as they can expose packages’ behaviors at runtime. However, current dynamic analysis tools (e.g., package-analysis) make minimal effort to provide insight into the behaviors of open-source packages. In this paper, we attempt to analyze the dynamic behaviors of open-source packages on popular package repositories, including npm, PyPI, RubyGems, Packagist, and crates.io. We also analyze the discrepancies in behaviors between benign and malicious packages at runtime, which is helpful in building rules for malware detection. Our study finds that malicious packages perform a significantly higher number of domain communications and command executions. Malicious packages use simple techniques for malicious operations such as base64 or curl. © The Author(s), under exclusive license to Springer Nature Switzerland AG 2025.","Nguyen T.-C.; Vu D.-L.; C. Debnath N.","1"
"Domain","Real-Time Processing","Optimizing Malware Detection and Classification in Real-Time Using Hybrid Deep Learning Approaches","10.18280/ijsse.150115","2025","Malware detection and classification are critical for ensuring system security in real-time applications. Conventional approaches may not be optimized to combine precise results with low time consumption and become a problem when it comes to processing large volumes of different malware samples in a real-time setting. The general framework for this paper is to introduce a new detection and classification method that uses deep learning (DL) models to detect and classify malware. We developed and tested two models: the static convolutional neural network-long short-term memory (CNN-LSTM) model and the dynamic CNN 1D-LSTM model in this work. The models achieved an accurate rate of 99%. Static-CNN-LSTM was able to classify the malware based on static analysis. At the same time, the proposed dynamic (1D-CNN-LSTM) model got the best results, with a 100% success rate, by gathering behavioral data. This means that it can accurately classify even new and complicated dynamic malicious program variants. Therefore, this study's results show that using a hybrid approach raises the rate of detection while also meeting the real-time processing needs of systems with a lot at stake that need to perform well. Our approach represents a substantial improvement in malware detection, delivering a more efficient and versatile response to contemporary cyber threats. ©2025 The authors.","Alsumaidaee Y.A.M.; Yahya M.M.; Yaseen A.H.","1"
"Domain","Change Management","Analysis and Categorization of Emotet IoT Botnet Malware","10.1109/AISC56616.2023.10085302","2023","To provide the ease control and remote monitoring, Internet of Things (IoT) plays an important role in smart devices. The IoT system ranges from smart city to healthcare sector, and supply chain management. This extent of advancement generated a huge amount of data which may be the reason of malware threats of the IoT system. IoT Malware is a threat which may affects all sectors such as business, network, telecoms, media, military, etc. The recent report claimed the proliferation of global cost of malware estimated that till 2023 it would be around 8 trillion dollars annually which may double due to coronavirus outbreak. The analysis of IoT malware needs serious concern as now warfare and digital retaliation can cause serious damage than the war lead on ground. The major aim of this paper is performing the critical analysis of an IoT malware named Emotet. The IoT malware analysis can be categorized in two types such as static and dynamic malware analysis. Static analysis is the process of analyzing malware or binary without executing it. It is considered a more effective method when it comes to the diversity of processor architecture. While dynamic analysis is based on the detection of malware and its behavior with real-time execution. This paper focused on the testbed and Analysis of Emotet malware statically and dynamically using distinguished malware analysis tools.  © 2023 IEEE.","Garg U.; Kumar S.; Ghanshala M.","1"
"Domain","POS Terminal Malware","Dynamic detection method for Android terminal malware based on Native layer","10.1109/ICCEA58433.2023.10135186","2023","The current traditional malware detection methods mainly obtain the characteristics of malware by analyzing the static file structure and binary byte code of the software, which leads to poor detection due to the lack of fusion processing of the characteristics. In this regard, we propose a dynamic detection method for Android terminal malware based on Native layer. The APK installation package of the Android application is parsed, and the dex file and Native library file are fused and mapped into a three-channel visual RGB color image, and the malware features are extracted and fused to achieve dynamic detection of malware. In the experiments, the detection performance of the proposed method is verified. The experimental results show that the proposed method has a larger ROC curve area and has a more desirable detection performance when malware is detected by the proposed method.  © 2023 IEEE.","Jing P.; An N.; Yue S.","1"
"Domain","Monitoring and Alerting","Research on key technology of enterprise private cloud anti-leakage","10.1109/ICICAS48597.2019.00178","2019","With the rapid development of Internet and cloud computing technology, more and more enterprises use private cloud for collaborative work. Important data protection has become the focus of enterprise security protection. Based on the need of data anti-leakage, content monitoring and filtering security techniques were studied. And the private cloud anti-leakage prototype system was realized, which provided real-time monitoring for internal staff's intentional or unintentional leakages and the leakages caused by the implantation of malicious code from external attackers. When sending files containing pre-set sensitive words, the system will remind the user and inform the administrator. The received document is embedded with executable script code or the document itself is binary code, and dynamic and static combination detection will be performed. If the document includes malicious code, then warning information will timely feedback to the administrator to strengthen the enterprise information security management. © 2019 IEEE.","Chen Z.; Wang J.; Yang Y.; Yang G.; Wen L.; Chen L.","1"
"Domain","Stream Processing","1st International Conference on Runtime Verification, RV 2010","","2010","The proceedings contain 39 papers. The special focus in this conference is on Runtime Verification. The topics include: Statistical model checking: An overview; Runtime verification with the RV system; a meta-aspect protocol for developing dynamic analyses; behavior abstraction in malware analysis; clara: A framework for partially evaluating finite-state runtime monitors ahead of time; Checking the correspondence between UML models and implementation; compensation-aware runtime monitoring; recovery Tasks: An Automated Approach to Failure Recovery; formally efficient program instrumentation; Code Contracts for.NET: Runtime verification and so much more; interval analysis for concurrent trace programs using transaction sequence graphs; causality analysis in contract violation; reducing configurations to monitor in a software product line; runtime instrumentation for precise flow-sensitive type analysis; trace recording for embedded systems: Lessons learned from five industrial projects; Verification of an AFDX infrastructure using simulations and probabilities; copilot: A Hard Real-Time Runtime Monitor; stealthWorks: Emulating memory errors; efficient data race detection for async-finish parallelism; run-time verification of optimistic concurrency; visual debugging for stream processing applications; who guards the guardians? — Toward V&V of health management software: (Short paper); Aspect-Oriented instrumentation with GCC; runtime Verification for Software Transactional Memories; optimized temporal monitors for systemC; runtime verification of stochastic, faulty systems; low-overhead bug fingerprinting for fast debugging; ESAT: A tool for animating logic-based specifications of evolvable component systems; a tool which mines partial execution traces to improve static analysis; larvaStat: Monitoring of statistical properties; WS-PSC monitor: A tool chain for monitoring temporal and timing properties in composite service based on property sequence chart.","","1"
"Technique","Static Analysis","Drebin: Effective and Explainable Detection of Android Malware in Your Pocket","10.14722/ndss/2014.23247","2014","Malicious applications pose a threat to the security of the Android platform. The growing amount and diversity of these applications render conventional defenses largely ineffective and thus Android smartphones often remain unprotected from novel malware. In this paper, we propose DREBIN, a lightweight method for detection of Android malware that enables identifying malicious applications directly on the smartphone. As the limited resources impede monitoring applications at run-time, DREBIN performs a broad static analysis, gathering as many features of an application as possible. These features are embedded in a joint vector space, such that typical patterns indicative for malware can be automatically identified and used for explaining the decisions of our method. In an evaluation with 123,453 applications and 5,560 malware samples DREBIN outperforms several related approaches and detects 94% of the malware with few false alarms, where the explanations provided for each detection reveal relevant properties of the detected malware. On five popular smartphones, the method requires 10 seconds for an analysis on average, rendering it suitable for checking downloaded applications directly on the device. Copyright 2014 Internet Society.","Arp D.; Spreitzenbarth M.; Hübner M.; Gascon H.; Rieck K.","1877"
"Technique","Pruning Techniques","Deep Learning Approach for Intelligent Intrusion Detection System","10.1109/ACCESS.2019.2895334","2019","Machine learning techniques are being widely used to develop an intrusion detection system (IDS) for detecting and classifying cyberattacks at the network-level and the host-level in a timely and automatic manner. However, many challenges arise since malicious attacks are continually changing and are occurring in very large volumes requiring a scalable solution. There are different malware datasets available publicly for further research by cyber security community. However, no existing study has shown the detailed analysis of the performance of various machine learning algorithms on various publicly available datasets. Due to the dynamic nature of malware with continuously changing attacking methods, the malware datasets available publicly are to be updated systematically and benchmarked. In this paper, a deep neural network (DNN), a type of deep learning model, is explored to develop a flexible and effective IDS to detect and classify unforeseen and unpredictable cyberattacks. The continuous change in network behavior and rapid evolution of attacks makes it necessary to evaluate various datasets which are generated over the years through static and dynamic approaches. This type of study facilitates to identify the best algorithm which can effectively work in detecting future cyberattacks. A comprehensive evaluation of experiments of DNNs and other classical machine learning classifiers are shown on various publicly available benchmark malware datasets. The optimal network parameters and network topologies for DNNs are chosen through the following hyperparameter selection methods with KDDCup 99 dataset. All the experiments of DNNs are run till 1,000 epochs with the learning rate varying in the range [0.01-0.5]. The DNN model which performed well on KDDCup 99 is applied on other datasets, such as NSL-KDD, UNSW-NB15, Kyoto, WSN-DS, and CICIDS 2017, to conduct the benchmark. Our DNN model learns the abstract and high-dimensional feature representation of the IDS data by passing them into many hidden layers. Through a rigorous experimental testing, it is confirmed that DNNs perform well in comparison with the classical machine learning classifiers. Finally, we propose a highly scalable and hybrid DNNs framework called scale-hybrid-IDS-AlertNet which can be used in real-time to effectively monitor the network traffic and host-level events to proactively alert possible cyberattacks. © 2013 IEEE.","Vinayakumar R.; Alazab M.; Soman K.P.; Poornachandran P.; Al-Nemrat A.; Venkatraman S.","1398"
"Technique","Taint Analysis","FLOWDROID: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for Android apps","10.1145/2594291.2594299","2014","In this work we thus present FLOWDROID, a novel and highly precise static taint analysis for Android applications. A precise model of Android's lifecycle allows the analysis to properly handle callbacks invoked by the Android framework, while context, flow, field and object-sensitivity allows the analysis to reduce the number of false alarms. Novel on-demand algorithms help FLOWDROID maintain high efficiency and precision at the same time.; We also propose DROIDBENCH, an open test suite for evaluating the effectiveness and accuracy of taint-analysis tools specifically for Android apps. As we show through a set of experiments using SecuriBench Micro, DROIDBENCH, and a set of well-known Android test applications, FLOWDROID finds a very high fraction of data leaks while keeping the rate of false positives low. On DROIDBENCH, FLOWDROID achieves 93% recall and 86% precision, greatly outperforming the commercial tools IBM AppScan Source and Fortify SCA. FLOWDROID successfully finds leaks in a subset of 500 apps from Google Play and about 1,000 malware apps from the VirusShare project. Copyright © 2014 ACM.; Today's smartphones are a ubiquitous source of private and confidential data. At the same time, smartphone users are plagued by carelessly programmed apps that leak important data by accident, and by malicious apps that exploit their given privileges to copy such data intentionally. While existing static taint-analysis approaches have the potential of detecting such data leaks ahead of time, all approaches for Android use a number of coarse-grain approximations that can yield high numbers of missed leaks and false alarms.","Arzt S.; Rasthofer S.; Fritz C.; Bodden E.; Bartel A.; Klein J.; Le Traon Y.; Octeau D.; McDaniel P.","1007"
"Technique","Stack Analysis","Limits of static analysis for malware detection","10.1109/ACSAC.2007.21","2007","Malicious code is an increasingly important problem that threatens the security of computer systems. The traditional line of defense against malware is composed of malware detectors such as virus and spyware scanners. Unfortunately, both researchers and malware authors have demonstrated that these scanners, which use pattern matching to identify malware, can be easily evaded by simple code transformations. To address this shortcoming, more powerful malware detectors have been proposed. These tools rely on semantic signatures and employ static analysis techniques such as model checking and theorem proving to perform detection. While it has been shown that these systems are highly effective in identifying current malware, it is less clear how successful they would be against adversaries that take into account the novel detection mechanisms. The goal of this paper is to explore the limits of static analysis for the detection of malicious code. To this end, we present a binary obfuscation scheme that relies on the idea of opaque constants, which are primitives that allow us to load a constant into a register such that an analysis tool cannot determine its value. Based on opaque constants, we build obfuscation transformations that obscure program control flow, disguise access to local and global variables, and interrupt tracking of values held in processor registers. Using our proposed obfuscation approach, we were able to show that advanced semantics-based malware detectors can be evaded. Moreover, our opaque constant primitive can be applied in a way such that is provably hard to analyze for any static code analyzer. This demonstrates that static analysis techniques alone might no longer be sufficient to identify malware. © 2007 IEEE.","Moser A.; Kruegel C.; Kirda E.","734"
"Technique","Dynamic Analysis","DroidMat: Android malware detection through manifest and API calls tracing","10.1109/AsiaJCIS.2012.18","2012","Recently, the threat of Android malware is spreading rapidly, especially those repackaged Android malware. Although understanding Android malware using dynamic analysis can provide a comprehensive view, it is still subjected to high cost in environment deployment and manual efforts in investigation. In this study, we propose a static feature-based mechanism to provide a static analyst paradigm for detecting the Android malware. The mechanism considers the static information including permissions, deployment of components, Intent messages passing and API calls for characterizing the Android applications behavior. In order to recognize different intentions of Android malware, different kinds of clustering algorithms can be applied to enhance the malware modeling capability. Besides, we leverage the proposed mechanism and develop a system, called Droid Mat. First, the Droid Mat extracts the information (e.g., requested permissions, Intent messages passing, etc) from each application's manifest file, and regards components (Activity, Service, Receiver) as entry points drilling down for tracing API Calls related to permissions. Next, it applies K-means algorithm that enhances the malware modeling capability. The number of clusters are decided by Singular Value Decomposition (SVD) method on the low rank approximation. Finally, it uses kNN algorithm to classify the application as benign or malicious. The experiment result shows that the recall rate of our approach is better than one of well-known tool, Androguard, published in Black hat 2011, which focuses on Android malware analysis. In addition, Droid Mat is efficient since it takes only half of time than Androguard to predict 1738 apps as benign apps or Android malware. © 2012 IEEE.","Wu D.-J.; Mao C.-H.; Wei T.-E.; Lee H.-M.; Wu K.-P.","575"
"Technique","IRC Analysis","DroidMat: Android malware detection through manifest and API calls tracing","10.1109/AsiaJCIS.2012.18","2012","Recently, the threat of Android malware is spreading rapidly, especially those repackaged Android malware. Although understanding Android malware using dynamic analysis can provide a comprehensive view, it is still subjected to high cost in environment deployment and manual efforts in investigation. In this study, we propose a static feature-based mechanism to provide a static analyst paradigm for detecting the Android malware. The mechanism considers the static information including permissions, deployment of components, Intent messages passing and API calls for characterizing the Android applications behavior. In order to recognize different intentions of Android malware, different kinds of clustering algorithms can be applied to enhance the malware modeling capability. Besides, we leverage the proposed mechanism and develop a system, called Droid Mat. First, the Droid Mat extracts the information (e.g., requested permissions, Intent messages passing, etc) from each application's manifest file, and regards components (Activity, Service, Receiver) as entry points drilling down for tracing API Calls related to permissions. Next, it applies K-means algorithm that enhances the malware modeling capability. The number of clusters are decided by Singular Value Decomposition (SVD) method on the low rank approximation. Finally, it uses kNN algorithm to classify the application as benign or malicious. The experiment result shows that the recall rate of our approach is better than one of well-known tool, Androguard, published in Black hat 2011, which focuses on Android malware analysis. In addition, Droid Mat is efficient since it takes only half of time than Androguard to predict 1738 apps as benign apps or Android malware. © 2012 IEEE.","Wu D.-J.; Mao C.-H.; Wei T.-E.; Lee H.-M.; Wu K.-P.","575"
"Technique","Anomaly Detection","DroidMat: Android malware detection through manifest and API calls tracing","10.1109/AsiaJCIS.2012.18","2012","Recently, the threat of Android malware is spreading rapidly, especially those repackaged Android malware. Although understanding Android malware using dynamic analysis can provide a comprehensive view, it is still subjected to high cost in environment deployment and manual efforts in investigation. In this study, we propose a static feature-based mechanism to provide a static analyst paradigm for detecting the Android malware. The mechanism considers the static information including permissions, deployment of components, Intent messages passing and API calls for characterizing the Android applications behavior. In order to recognize different intentions of Android malware, different kinds of clustering algorithms can be applied to enhance the malware modeling capability. Besides, we leverage the proposed mechanism and develop a system, called Droid Mat. First, the Droid Mat extracts the information (e.g., requested permissions, Intent messages passing, etc) from each application's manifest file, and regards components (Activity, Service, Receiver) as entry points drilling down for tracing API Calls related to permissions. Next, it applies K-means algorithm that enhances the malware modeling capability. The number of clusters are decided by Singular Value Decomposition (SVD) method on the low rank approximation. Finally, it uses kNN algorithm to classify the application as benign or malicious. The experiment result shows that the recall rate of our approach is better than one of well-known tool, Androguard, published in Black hat 2011, which focuses on Android malware analysis. In addition, Droid Mat is efficient since it takes only half of time than Androguard to predict 1738 apps as benign apps or Android malware. © 2012 IEEE.","Wu D.-J.; Mao C.-H.; Wei T.-E.; Lee H.-M.; Wu K.-P.","575"
"Technique","Reverse Engineering","BitBlaze: A new approach to computer security via binary analysis","10.1007/978-3-540-89862-7_1","2008","In this paper, we give an overview of the BitBlaze project, a new approach to computer security via binary analysis. In particular, BitBlaze focuses on building a unified binary analysis platform and using it to provide novel solutions to a broad spectrum of different security problems. The binary analysis platform is designed to enable accurate analysis, provide an extensible architecture, and combines static and dynamic analysis as well as program verification techniques to satisfy the common needs of security applications. By extracting security-related properties from binary programs directly, BitBlaze enables a principled, root-cause based approach to computer security, offering novel and effective solutions, as demonstrated with over a dozen different security applications. © 2008 Springer Berlin Heidelberg.","Song D.; Brumley D.; Yin H.; Caballero J.; Jager I.; Kang M.G.; Liang Z.; Newsome J.; Poosankam P.; Saxena P.","513"
"Technique","Behavioral Analysis","Android security: A survey of issues, malware penetration, and defenses","10.1109/COMST.2014.2386139","2015","Smartphones have become pervasive due to the availability of office applications, Internet, games, vehicle guidance using location-based services apart from conventional services such as voice calls, SMSes, and multimedia services. Android devices have gained huge market share due to the open architecture of Android and the popularity of its application programming interface (APIs) in the developer community. Increased popularity of the Android devices and associated monetary benefits attracted the malware developers, resulting in big rise of the Android malware apps between 2010 and 2014. Academic researchers and commercial antimalware companies have realized that the conventional signature-based and static analysis methods are vulnerable. In particular, the prevalent stealth techniques, such as encryption, code transformation, and environment-aware approaches, are capable of generating variants of known malware. This has led to the use of behavior-, anomaly-, and dynamic-analysis-based methods. Since a single approach may be ineffective against the advanced techniques, multiple complementary approaches can be used in tandem for effective malware detection. The existing reviews extensively cover the smartphone OS security. However, we believe that the security of Android, with particular focus on malware growth, study of antianalysis techniques, and existing detection methodologies, needs an extensive coverage. In this survey, we discuss the Android security enforcement mechanisms, threats to the existing security enforcements and related issues, malware growth timeline between 2010 and 2014, and stealth techniques employed by the malware authors, in addition to the existing detection methods. This review gives an insight into the strengths and shortcomings of the known research methodologies and provides a platform, to the researchers and practitioners, toward proposing the next-generation Android security, analysis, and malware detection techniques. © 1998-2012 IEEE.","Faruki P.; Bharmal A.; Laxmi V.; Ganmoor V.; Gaur M.S.; Conti M.; Rajarajan M.","483"
"Technique","Clone Detection","From throw-away traffic to bots: Detecting the rise of DGA-based malware","","2012","Many botnet detection systems employ a blacklist of known command and control (C&C) domains to detect bots and block their traffic. Similar to signature-based virus detection, such a botnet detection approach is static because the blacklist is updated only after running an external (and often manual) process of domain discovery. As a response, botmasters have begun employing domain generation algorithms (DGAs) to dynamically produce a large number of random domain names and select a small subset for actual C&C use. That is, a C&C domain is randomly generated and used for a very short period of time, thus rendering detection approaches that rely on static domain lists ineffective. Naturally, if we know how a domain generation algorithm works, we can generate the domains ahead of time and still identify and block botnet C&C traffic. The existing solutions are largely based on reverse engineering of the bot malware executables, which is not always feasible. In this paper we present a new technique to detect randomly generated domains without reversing. Our insight is that most of the DGA-generated (random) domains that a bot queries would result in Non-Existent Domain (NXDomain) responses, and that bots from the same botnet (with the same DGA algorithm) would generate similar NXDomain traffic. Our approach uses a combination of clustering and classification algorithms. The clustering algorithm clusters domains based on the similarity in the make-ups of domain names as well as the groups of machines that queried these domains. The classification algorithm is used to assign the generated clusters to models of known DGAs. If a cluster cannot be assigned to a known model, then a new model is produced, indicating a new DGA variant or family. We implemented a prototype system and evaluated it on real-world DNS traffic obtained from large ISPs in North America. We report the discovery of twelve DGAs. Half of them are variants of known (botnet) DGAs, and the other half are brand new DGAs that have never been reported before. Copyright © 2019 21st USENIX Security Symposium. All rights reserved.","Antonakakis M.; Perdisci R.; Nadji Y.; Vasiloglou N.; Abu-Nimeh S.; Lee W.; Dagon D.","454"
"Technique","Domain Generation Algorithm","From throw-away traffic to bots: Detecting the rise of DGA-based malware","","2012","Many botnet detection systems employ a blacklist of known command and control (C&C) domains to detect bots and block their traffic. Similar to signature-based virus detection, such a botnet detection approach is static because the blacklist is updated only after running an external (and often manual) process of domain discovery. As a response, botmasters have begun employing domain generation algorithms (DGAs) to dynamically produce a large number of random domain names and select a small subset for actual C&C use. That is, a C&C domain is randomly generated and used for a very short period of time, thus rendering detection approaches that rely on static domain lists ineffective. Naturally, if we know how a domain generation algorithm works, we can generate the domains ahead of time and still identify and block botnet C&C traffic. The existing solutions are largely based on reverse engineering of the bot malware executables, which is not always feasible. In this paper we present a new technique to detect randomly generated domains without reversing. Our insight is that most of the DGA-generated (random) domains that a bot queries would result in Non-Existent Domain (NXDomain) responses, and that bots from the same botnet (with the same DGA algorithm) would generate similar NXDomain traffic. Our approach uses a combination of clustering and classification algorithms. The clustering algorithm clusters domains based on the similarity in the make-ups of domain names as well as the groups of machines that queried these domains. The classification algorithm is used to assign the generated clusters to models of known DGAs. If a cluster cannot be assigned to a known model, then a new model is produced, indicating a new DGA variant or family. We implemented a prototype system and evaluated it on real-world DNS traffic obtained from large ISPs in North America. We report the discovery of twelve DGAs. Half of them are variants of known (botnet) DGAs, and the other half are brand new DGAs that have never been reported before. Copyright © 2019 21st USENIX Security Symposium. All rights reserved.","Antonakakis M.; Perdisci R.; Nadji Y.; Vasiloglou N.; Abu-Nimeh S.; Lee W.; Dagon D.","454"
"Technique","Convolutional Neural Networks","Deep android malware detection","10.1145/3029806.3029823","2017","In this paper, we propose a novel android malware detection system that uses a deep convolutional neural network (CNN). Malware classification is performed based on static analysis of the raw opcode sequence from a disassembled program. Features indicative of malware are automatically learned by the network from the raw opcode sequence thus removing the need for hand-engineered malware features. The training pipeline of our proposed system is much simpler than existing n-gram based malware detection methods, as the network is trained end-To-end to jointly learn appropriate features and to perform classification, thus removing the need to explicitly enumerate millions of n-grams during training. The network design also allows the use of long n-gram like features, not computationally feasible with existing methods. Once trained, the network can be effeciently executed on a GPU, allowing a very large number of files to be scanned quickly. © 2017 ACM.","McLaughlin N.; Del Rincon J.M.; Kang B.; Yerima S.; Miller P.; Sezer S.; Safaei Y.; Trickel E.; Zhao Z.; Doupe A.; Ahn G.J.","438"
"Technique","Malware Classification","Deep android malware detection","10.1145/3029806.3029823","2017","In this paper, we propose a novel android malware detection system that uses a deep convolutional neural network (CNN). Malware classification is performed based on static analysis of the raw opcode sequence from a disassembled program. Features indicative of malware are automatically learned by the network from the raw opcode sequence thus removing the need for hand-engineered malware features. The training pipeline of our proposed system is much simpler than existing n-gram based malware detection methods, as the network is trained end-To-end to jointly learn appropriate features and to perform classification, thus removing the need to explicitly enumerate millions of n-grams during training. The network design also allows the use of long n-gram like features, not computationally feasible with existing methods. Once trained, the network can be effeciently executed on a GPU, allowing a very large number of files to be scanned quickly. © 2017 ACM.","McLaughlin N.; Del Rincon J.M.; Kang B.; Yerima S.; Miller P.; Sezer S.; Safaei Y.; Trickel E.; Zhao Z.; Doupe A.; Ahn G.J.","438"
"Technique","Feature Engineering","Robust Intelligent Malware Detection Using Deep Learning","10.1109/ACCESS.2019.2906934","2019","Security breaches due to attacks by malicious software (malware) continue to escalate posing a major security concern in this digital age. With many computer users, corporations, and governments affected due to an exponential growth in malware attacks, malware detection continues to be a hot research topic. Current malware detection solutions that adopt the static and dynamic analysis of malware signatures and behavior patterns are time consuming and have proven to be ineffective in identifying unknown malwares in real-time. Recent malwares use polymorphic, metamorphic, and other evasive techniques to change the malware behaviors quickly and to generate a large number of new malwares. Such new malwares are predominantly variants of existing malwares, and machine learning algorithms (MLAs) are being employed recently to conduct an effective malware analysis. However, such approaches are time consuming as they require extensive feature engineering, feature learning, and feature representation. By using the advanced MLAs such as deep learning, the feature engineering phase can be completely avoided. Recently reported research studies in this direction show the performance of their algorithms with a biased training data, which limits their practical use in real-time situations. There is a compelling need to mitigate bias and evaluate these methods independently in order to arrive at a new enhanced method for effective zero-day malware detection. To fill the gap in the literature, this paper, first, evaluates the classical MLAs and deep learning architectures for malware detection, classification, and categorization using different public and private datasets. Second, we remove all the dataset bias removed in the experimental analysis by having different splits of the public and private datasets to train and test the model in a disjoint way using different timescales. Third, our major contribution is in proposing a novel image processing technique with optimal parameters for MLAs and deep learning architectures to arrive at an effective zero-day malware detection model. A comprehensive comparative study of our model demonstrates that our proposed deep learning architectures outperform classical MLAs. Our novelty in combining visualization and deep learning architectures for static, dynamic, and image processing-based hybrid approach applied in a big data environment is the first of its kind toward achieving robust intelligent zero-day malware detection. Overall, this paper paves way for an effective visual detection of malware using a scalable and hybrid deep learning framework for real-time deployments. © 2013 IEEE.","Vinayakumar R.; Alazab M.; Soman K.P.; Poornachandran P.; Venkatraman S.","436"
"Technique","WMI Analysis","Robust Intelligent Malware Detection Using Deep Learning","10.1109/ACCESS.2019.2906934","2019","Security breaches due to attacks by malicious software (malware) continue to escalate posing a major security concern in this digital age. With many computer users, corporations, and governments affected due to an exponential growth in malware attacks, malware detection continues to be a hot research topic. Current malware detection solutions that adopt the static and dynamic analysis of malware signatures and behavior patterns are time consuming and have proven to be ineffective in identifying unknown malwares in real-time. Recent malwares use polymorphic, metamorphic, and other evasive techniques to change the malware behaviors quickly and to generate a large number of new malwares. Such new malwares are predominantly variants of existing malwares, and machine learning algorithms (MLAs) are being employed recently to conduct an effective malware analysis. However, such approaches are time consuming as they require extensive feature engineering, feature learning, and feature representation. By using the advanced MLAs such as deep learning, the feature engineering phase can be completely avoided. Recently reported research studies in this direction show the performance of their algorithms with a biased training data, which limits their practical use in real-time situations. There is a compelling need to mitigate bias and evaluate these methods independently in order to arrive at a new enhanced method for effective zero-day malware detection. To fill the gap in the literature, this paper, first, evaluates the classical MLAs and deep learning architectures for malware detection, classification, and categorization using different public and private datasets. Second, we remove all the dataset bias removed in the experimental analysis by having different splits of the public and private datasets to train and test the model in a disjoint way using different timescales. Third, our major contribution is in proposing a novel image processing technique with optimal parameters for MLAs and deep learning architectures to arrive at an effective zero-day malware detection model. A comprehensive comparative study of our model demonstrates that our proposed deep learning architectures outperform classical MLAs. Our novelty in combining visualization and deep learning architectures for static, dynamic, and image processing-based hybrid approach applied in a big data environment is the first of its kind toward achieving robust intelligent zero-day malware detection. Overall, this paper paves way for an effective visual detection of malware using a scalable and hybrid deep learning framework for real-time deployments. © 2013 IEEE.","Vinayakumar R.; Alazab M.; Soman K.P.; Poornachandran P.; Venkatraman S.","436"
"Technique","Q-Learning","Droiddetector: Android malware characterization and detection using deep learning","10.1109/TST.2016.7399288","2016","Smartphones and mobile tablets are rapidly becoming indispensable in daily life. Android has been the most popular mobile operating system since 2012. However, owing to the open nature of Android, countless malwares are hidden in a large number of benign apps in Android markets that seriously threaten Android security. Deep learning is a new area of machine learning research that has gained increasing attention in artificial intelligence. In this study, we propose to associate the features from the static analysis with features from dynamic analysis of Android apps and characterize malware using deep learning techniques. We implement an online deep-learning-based Android malware detection engine (DroidDetector) that can automatically detect whether an app is a malware or not. With thousands of Android apps, we thoroughly test DroidDetector and perform an indepth analysis on the features that deep learning essentially exploits to characterize malware. The results show that deep learning is suitable for characterizing Android malware and especially effective with the availability of more training data. DroidDetector can achieve 96.76% detection accuracy, which outperforms traditional machine learning techniques. An evaluation of ten popular anti-virus softwares demonstrates the urgency of advancing our capabilities in Android malware detection. © 1996-2012 Tsinghua University Press.","Yuan Z.; Lu Y.; Xue Y.","414"
"Technique","Data Flow Analysis","Amandroid: A precise and general inter-component data flow analysis framework for security vetting of Android apps","10.1145/2660267.2660357","2014","We propose a new approach to conduct static analysis for security vetting of Android apps, and built a general framework, called Amandroid for determining points-to information for all objects in an Android app in a flow and context-sensitive way across Android apps components. We show that: (a) this type of comprehensive analysis is completely feasible in terms of computing resources needed with modern hardware, (b) one can easily leverage the results from this general analysis to build various types of specialized security analyses-in many cases the amount of additional coding needed is around 100 lines of code, and (c) the result of those specialized analyses leveraging Amandroid is at least on par and often exceeds prior works designed for the specific problems, which we demonstrate by comparing Amandroid's results with those of prior works whenever we can obtain the executable of those tools. Since Amandroid's analysis directly handles inter-component control and data ows, it can be used to address security problems that result from interactions among multiple components from either the same or different apps. Amandroid's analysis is sound in that it can provide assurance of the absence of the specified security problems in an app with well-specified and reasonable assumptions on Android runtime system and its library. Copyright 2014 ACM.","Wei F.; Roy S.; Ou X.; Robby","392"
"Technique","Points-To Analysis","Amandroid: A precise and general inter-component data flow analysis framework for security vetting of Android apps","10.1145/2660267.2660357","2014","We propose a new approach to conduct static analysis for security vetting of Android apps, and built a general framework, called Amandroid for determining points-to information for all objects in an Android app in a flow and context-sensitive way across Android apps components. We show that: (a) this type of comprehensive analysis is completely feasible in terms of computing resources needed with modern hardware, (b) one can easily leverage the results from this general analysis to build various types of specialized security analyses-in many cases the amount of additional coding needed is around 100 lines of code, and (c) the result of those specialized analyses leveraging Amandroid is at least on par and often exceeds prior works designed for the specific problems, which we demonstrate by comparing Amandroid's results with those of prior works whenever we can obtain the executable of those tools. Since Amandroid's analysis directly handles inter-component control and data ows, it can be used to address security problems that result from interactions among multiple components from either the same or different apps. Amandroid's analysis is sound in that it can provide assurance of the absence of the specified security problems in an app with well-specified and reasonable assumptions on Android runtime system and its library. Copyright 2014 ACM.","Wei F.; Roy S.; Ou X.; Robby","392"
"Technique","Edge Detection","Apposcopy: Semantics-based detection of android malware through static analysis","10.1145/2635868.2635869","2014","We present Apposcopy, a new semantics-based approach for identifying a prevalent class of Android malware that steals private user information. Apposcopy incorporates (i) a highlevel language for specifying signatures that describe semantic characteristics of malware families and (ii) a static analysis for deciding if a given application matches a malware signature. The signature matching algorithm of Apposcopy uses a combination of static taint analysis and a new form of program representation called Inter-Component Call Graph to efficiently detect Android applications that have certain control- and data-flow properties. We have evaluated Apposcopy on a corpus of real-world Android applications and show that it can effectively and reliably pinpoint malicious applications that belong to certain malware families. Copyright 2014 ACM.","Feng Y.; Anand S.; Dillig I.; Aiken A.","389"
"Technique","Deobfuscation","Asm2Vec: Boosting static representation robustness for binary clone search against code obfuscation and compiler optimization","10.1109/SP.2019.00003","2019","Reverse engineering is a manually intensive but necessary technique for understanding the inner workings of new malware, finding vulnerabilities in existing systems, and detecting patent infringements in released software. An assembly clone search engine facilitates the work of reverse engineers by identifying those duplicated or known parts. However, it is challenging to design a robust clone search engine, since there exist various compiler optimization options and code obfuscation techniques that make logically similar assembly functions appear to be very different. A practical clone search engine relies on a robust vector representation of assembly code. However, the existing clone search approaches, which rely on a manual feature engineering process to form a feature vector for an assembly function, fail to consider the relationships between features and identify those unique patterns that can statistically distinguish assembly functions. To address this problem, we propose to jointly learn the lexical semantic relationships and the vector representation of assembly functions based on assembly code. We have developed an assembly code representation learning model \emph{Asm2Vec}. It only needs assembly code as input and does not require any prior knowledge such as the correct mapping between assembly functions. It can find and incorporate rich semantic relationships among tokens appearing in assembly code. We conduct extensive experiments and benchmark the learning model with state-of-the-art static and dynamic clone search approaches. We show that the learned representation is more robust and significantly outperforms existing methods against changes introduced by obfuscation and optimizations. © 2019 IEEE.","Ding S.H.H.; Fung B.C.M.; Charland P.","363"
"Technique","Active Learning","Machine learning for Android malware detection using permission and API calls","10.1109/ICTAI.2013.53","2013","The Google Android mobile phone platform is one of the most anticipated smartphone operating systems on the market. The open source Android platform allows developers to take full advantage of the mobile operation system, but also raises significant issues related to malicious applications. On one hand, the popularity of Android absorbs attention of most developers for producing their applications on this platform. The increased numbers of applications, on the other hand, prepares a suitable prone for some users to develop different kinds of malware and insert them in Google Android market or other third party markets as safe applications. In this paper, we propose to combine permission and API (Application Program Interface) calls and use machine learning methods to detect malicious Android Apps. In our design, the permission is extracted from each App's profile information and the APIs are extracted from the packed App file by using packages and classes to represent API calls. By using permissions and API calls as features to characterize each Apps, we can learn a classifier to identify whether an App is potentially malicious or not. An inherent advantage of our method is that it does not need to involve any dynamical tracing of the system calls but only uses simple static analysis to find system functions involved in each App. In addition, because permission settings and APIs are alwaysavailable for each App, our method can be generalized to all mobile applications. Experiments on real-world Apps with more than 1200 malware and 1200 benign samples validate the algorithm performance. © 2013 IEEE.","Peiravian N.; Zhu X.","331"
"Technique","Adware Analysis","Machine learning aided Android malware classification","10.1016/j.compeleceng.2017.02.013","2017","The widespread adoption of Android devices and their capability to access significant private and confidential information have resulted in these devices being targeted by malware developers. Existing Android malware analysis techniques can be broadly categorized into static and dynamic analysis. In this paper, we present two machine learning aided approaches for static analysis of Android malware. The first approach is based on permissions and the other is based on source code analysis utilizing a bag-of-words representation model. Our permission-based model is computationally inexpensive, and is implemented as the feature of OWASP Seraphimdroid Android app that can be obtained from Google Play Store. Our evaluations of both approaches indicate an F-score of 95.1% and F-measure of 89% for the source code-based classification and permission-based classification models, respectively. © 2017 Elsevier Ltd","Milosevic N.; Dehghantanha A.; Choo K.-K.R.","290"
"Technique","Worm Analysis","Machine learning aided Android malware classification","10.1016/j.compeleceng.2017.02.013","2017","The widespread adoption of Android devices and their capability to access significant private and confidential information have resulted in these devices being targeted by malware developers. Existing Android malware analysis techniques can be broadly categorized into static and dynamic analysis. In this paper, we present two machine learning aided approaches for static analysis of Android malware. The first approach is based on permissions and the other is based on source code analysis utilizing a bag-of-words representation model. Our permission-based model is computationally inexpensive, and is implemented as the feature of OWASP Seraphimdroid Android app that can be obtained from Google Play Store. Our evaluations of both approaches indicate an F-score of 95.1% and F-measure of 89% for the source code-based classification and permission-based classification models, respectively. © 2017 Elsevier Ltd","Milosevic N.; Dehghantanha A.; Choo K.-K.R.","290"
"Technique","Disassembly","Malware identification using visualization images and deep learning","10.1016/j.cose.2018.04.005","2018","Currently, malware is one of the most serious threats to Internet security. In this paper we propose a malware classification algorithm that uses static features called MCSC (Malware Classification using SimHash and CNN) which converts the disassembled malware codes into gray images based on SimHash and then identifies their families by convolutional neural network. During this process, some methods such as multi-hash, major block selection and bilinear interpolation are used to improve the performance. Experimental results show that MCSC is very effective for malware family classification, even for those unevenly distributed samples. The classification accuracy can be 99.260% at best and 98.862% at average on a malware dataset of 10,805 samples which is higher than other compared algorithms. Moreover, for MCSC, on average, it just takes 1.41 s to recognize a new sample, which can meet the requirements in most of the practical applications. © 2018 Elsevier Ltd","Ni S.; Qian Q.; Zhang R.","264"
"Technique","Memory Forensics","Dynamic malware analysis in the modern era—A state of the art survey","10.1145/3329786","2020","Although malicious software (malware) has been around since the early days of computers, the sophistication and innovation of malware has increased over the years. In particular, the latest crop of ransomware has drawn attention to the dangers of malicious software, which can cause harm to private users as well as corporations, public services (hospitals and transportation systems), governments, and security institutions. To protect these institutions and the public from malware attacks, malicious activity must be detected as early as possible, preferably before it conducts its harmful acts. However, it is not always easy to know what to look for—especially when dealing with new and unknown malware that has never been seen. Analyzing a suspicious file by static or dynamic analysis methods can provide relevant and valuable information regarding a file’s impact on the hosting system and help determine whether the file is malicious or not, based on the method’s predefined rules. While various techniques (e.g., code obfuscation, dynamic code loading, encryption, and packing) can be used by malware writers to evade static analysis (including signature-based anti-virus tools), dynamic analysis is robust to these techniques and can provide greater understanding regarding the analyzed file and consequently can lead to better detection capabilities. Although dynamic analysis is more robust than static analysis, existing dynamic analysis tools and techniques are imperfect, and there is no single tool that can cover all aspects of malware behavior. The most recent comprehensive survey performed in this area was published in 2012. Since that time, the computing environment has changed dramatically with new types of malware (ransomware, cryptominers), new analysis methods (volatile memory forensics, side-channel analysis), new computing environments (cloud computing, IoT devices), new machine-learning algorithms, and more. The goal of this survey is to provide a comprehensive and up-to-date overview of existing methods used to dynamically analyze malware, which includes a description of each method, its strengths and weaknesses, and its resilience against malware evasion techniques. In addition, we include an overview of prominent studies presenting the usage of machine-learning methods to enhance dynamic malware analysis capabilities aimed at detection, classification, and categorization. © 2019 Association for Computing Machinery.","Or-Meir O.; Nissim N.; Elovici Y.; Rokach L.","253"
"Technique","Self-Supervised Learning","Dynamic Android Malware Category Classification using Semi-Supervised Deep Learning","10.1109/DASC-PICom-CBDCom-CyberSciTech49142.2020.00094","2020","Due to the significant threat of Android mobile malware, its detection has become increasingly important. Despite the academic and industrial attempts, devising a robust and efficient solution for Android malware detection and category classification is still an open problem. Supervised machine learning has been used to solve this issue. However, it is far to be perfect because it requires a significant amount of malicious and benign code to be identified and labeled beforehand. Since labeled data is expensive and difficult to get while unlabeled data is abundant and cheap in this context, we resort to a semi-supervised learning technique for deep neural networks, namely pseudo-label, which we train using a set of labeled and unlabeled instances. We use dynamic analysis to craft dynamic behavior profiles as feature vectors. Furthermore, we develop a new dataset, namely CICMalDroid2020, which includes 17,341 most recent samples of five different Android apps categories: Adware, Banking, SMS, Riskware, and Benign. Our offered dataset comprises the most complete captured static and dynamic features among publicly available datasets. We evaluate our proposed model on CICMalDroid2020 and conduct a comparison with Label Propagation (LP), a well-known semi-supervised machine learning technique, and other common machine learning algorithms. The experimental results show that the model can classify Android apps with respect to malware category with F1-Score of 97.84 percent and a false positive rate of 2.76 percent, considerably higher than LP. These results demonstrate the robustness of our model despite the small number of labeled instances. © 2020 IEEE.","Mahdavifar S.; Abdul Kadir A.F.; Fatemi R.; Alhadidi D.; Ghorbani A.A.","251"
"Technique","Semi-Supervised Learning","Dynamic Android Malware Category Classification using Semi-Supervised Deep Learning","10.1109/DASC-PICom-CBDCom-CyberSciTech49142.2020.00094","2020","Due to the significant threat of Android mobile malware, its detection has become increasingly important. Despite the academic and industrial attempts, devising a robust and efficient solution for Android malware detection and category classification is still an open problem. Supervised machine learning has been used to solve this issue. However, it is far to be perfect because it requires a significant amount of malicious and benign code to be identified and labeled beforehand. Since labeled data is expensive and difficult to get while unlabeled data is abundant and cheap in this context, we resort to a semi-supervised learning technique for deep neural networks, namely pseudo-label, which we train using a set of labeled and unlabeled instances. We use dynamic analysis to craft dynamic behavior profiles as feature vectors. Furthermore, we develop a new dataset, namely CICMalDroid2020, which includes 17,341 most recent samples of five different Android apps categories: Adware, Banking, SMS, Riskware, and Benign. Our offered dataset comprises the most complete captured static and dynamic features among publicly available datasets. We evaluate our proposed model on CICMalDroid2020 and conduct a comparison with Label Propagation (LP), a well-known semi-supervised machine learning technique, and other common machine learning algorithms. The experimental results show that the model can classify Android apps with respect to malware category with F1-Score of 97.84 percent and a false positive rate of 2.76 percent, considerably higher than LP. These results demonstrate the robustness of our model despite the small number of labeled instances. © 2020 IEEE.","Mahdavifar S.; Abdul Kadir A.F.; Fatemi R.; Alhadidi D.; Ghorbani A.A.","251"
"Technique","Recurrent Neural Networks","Early-stage malware prediction using recurrent neural networks","10.1016/j.cose.2018.05.010","2018","Static malware analysis is well-suited to endpoint anti-virus systems as it can be conducted quickly by examining the features of an executable piece of code and matching it to previously observed malicious code. However, static code analysis can be vulnerable to code obfuscation techniques. Behavioural data collected during file execution is more difficult to obfuscate, but takes a relatively long time to capture - typically up to 5 min, meaning the malicious payload has likely already been delivered by the time it is detected. In this paper we investigate the possibility of predicting whether or not an executable is malicious based on a short snapshot of behavioural data. We find that an ensemble of recurrent neural networks are able to predict whether an executable is malicious or benign within the first 5 s of execution with 94% accuracy. This is the first time general types of malicious file have been predicted to be malicious during execution rather than using a complete activity log file post-execution, and enables cyber security endpoint protection to be advanced to use behavioural data for blocking malicious payloads rather than detecting them post-execution and having to repair the damage. © 2018 The Authors","Rhode M.; Burnap P.; Jones K.","240"
"Technique","Unpacking","PolyUnpack: Automating the hidden-code extraction of unpack-executing malware","10.1109/ACSAC.2006.38","2006","Modern malware often hide the malicious portion of their program code by making it appear as data at complle-time and transforming it back into executable code at runtime. This obfuscation technique poses obstacles to researchers who want to understand the malicious behavior of new or unknown malware and to practitioners who want to create models of detection and methods of recovery. In this paper we propose a technique for automating the process of extracting the hidden-code bodies of this class of malware. Our approach is based on the observation that sequences of packed or hidden code in a malware instance can be made self-identifying when its runtime execution is checked against its static code model. In deriving our technique, we formally define the unpack-executing behavior that such malware exhibits and devise an algorithm for identifying and extracting its hidden-code. We also provide details of the implementation and evaluation of our extraction technique; the results from our experiments on several thousand malware binaries show our approach can be used to significantly reduce the time required to analyze such malware, and to improve the performance of malware detection tools. © 2006 IEEE.","Royal P.; Halpin M.; Dagon D.; Edmonds R.; Lee W.","229"
"Technique","Naive Bayes Classification","New Android malware detection approach using Bayesian classification","10.1109/AINA.2013.88","2013","Mobile malware has been growing in scale and complexity as smartphone usage continues to rise. Android has surpassed other mobile platforms as the most popular whilst also witnessing a dramatic increase in malware targeting the platform. A worrying trend that is emerging is the increasing sophistication of Android malware to evade detection by traditional signature-based scanners. As such, Android app marketplaces remain at risk of hosting malicious apps that could evade detection before being downloaded by unsuspecting users. Hence, in this paper we present an effective approach to alleviate this problem based on Bayesian classification models obtained from static code analysis. The models are built from a collection of code and app characteristics that provide indicators of potential malicious activities. The models are evaluated with real malware samples in the wild and results of experiments are presented to demonstrate the effectiveness of the proposed approach. © 2013 IEEE.","Suleiman Y.; Sezer S.; McWilliams G.; Muttik I.","222"
"Technique","Machine Learning Classification","DroidSieve: Fast and accurate classification of obfuscated android malware","10.1145/3029806.3029825","2017","With more than two million applications, Android marketplaces require automatic and scalable methods to efficiently vet apps for the absence of malicious threats. Recent techniques have successfully relied on the extraction of lightweight syntactic features suitable for machine learning classification, but despite their promising results, the very nature of such features suggest they would unlikely-on their own-be suitable for detecting obfuscated Android malware. To address this challenge, we propose DroidSieve, an Android malware classifier based on static analysis that is fast, accurate, and resilient to obfuscation. For a given app, DroidSieve first decides whether the app is malicious and, if so, classifies it as belonging to a family of related malware. DroidSieve exploits obfuscation-invariant features and artifacts introduced by obfuscation mechanisms used in malware. At the same time, these purely static features are designed for processing at scale and can be extracted quickly. For malware detection, we achieve up to 99.82% accuracy with zero false positives; for family identification of obfuscated malware, we achieve 99.26% accuracy at a fraction of the computational cost of state-of-The-Art techniques. © 2017 ACM.","Suarez-Tangil G.; Dash S.K.; Ahmadi M.; Kinder J.; Giacinto G.; Cavallaro L.","217"
"Technique","Heap Analysis","AppContext: Differentiating malicious and benign mobile app behaviors using context","10.1109/ICSE.2015.50","2015","Mobile malware attempts to evade detection during app analysis by mimicking security-sensitive behaviors of benign apps that provide similar functionality (e.g., sending SMS messages), and suppressing their payload to reduce the chance of being observed (e.g., executing only its payload at night). Since current approaches focus their analyses on the types of securitysensitive resources being accessed (e.g., network), these evasive techniques in malware make differentiating between malicious and benign app behaviors a difficult task during app analysis. We propose that the malicious and benign behaviors within apps can be differentiated based on the contexts that trigger securitysensitive behaviors, i.e., the events and conditions that cause the security-sensitive behaviors to occur. In this work, we introduce AppContext, an approach of static program analysis that extracts the contexts of security-sensitive behaviors to assist app analysis in differentiating between malicious and benign behaviors. We implement a prototype of AppContext and evaluate AppContext on 202 malicious apps from various malware datasets, and 633 benign apps from the Google Play Store. AppContext correctly identifies 192 malicious apps with 87.7% precision and 95% recall. Our evaluation results suggest that the maliciousness of a security-sensitive behavior is more closely related to the intention of the behavior (reflected via contexts) than the type of the security-sensitive resources that the behavior accesses. © 2015 IEEE.","Yang W.; Xiao X.; Andow B.; Li S.; Xie T.; Enck W.","212"
"Technique","K-Nearest Neighbors","Detecting Android malicious apps and categorizing benign apps with ensemble of classifiers","10.1016/j.future.2017.01.019","2018","Android platform has dominated the markets of smart mobile devices in recent years. The number of Android applications (apps) has seen a massive surge. Unsurprisingly, Android platform has also become the primary target of attackers. The management of the explosively expansive app markets has thus become an important issue. On the one hand, it requires effectively detecting malicious applications (malapps) in order to keep the malapps out of the app market. On the other hand, it needs to automatically categorize a big number of benign apps so as to ease the management, such as correcting an app's category falsely designated by the app developer. In this work, we propose a framework to effectively and efficiently manage a big app market in terms of detecting malapps and categorizing benign apps. We extract 11 types of static features from each app to characterize the behaviors of the app, and employ the ensemble of multiple classifiers, namely, Support Vector Machine (SVM), K-Nearest Neighbor (KNN), Naive Bayes (NB), Classification and Regression Tree (CART) and Random Forest (RF), to detect malapps and to categorize benign apps. An alarm will be triggered if an app is identified as malicious. Otherwise, the benign app will be identified as a specific category. We evaluate the framework on a large app set consisting of 107,327 benign apps as well as 8,701 malapps. The experimental results show that our method achieves the accuracy of 99.39% in the detection of malapps and achieves the best accuracy of 82.93% in the categorization of benign apps. © 2017 Elsevier B.V.","Wang W.; Li Y.; Wang X.; Liu J.; Zhang X.","195"
"Technique","Signature-based Detection","OmniUnpack: Fast, generic, and safe unpacking of malware","10.1109/ACSAC.2007.15","2007","Malicious software (or malware) has become a growing threat as malware writers have learned that signature-based detectors can be easily evaded by ""packing"" the malicious payload in layers of compression or encryption. State-of-the-art malware detectors have adopted both static and dynamic techinques to recover the pay-load of packed malware, but unfortunately such techniques are highly ineffective. In this paper we propose a new technique, called OmniUnpack, to monitor the execution of a program in real-time and to detect when the program has removed the various layers of packing. OmniUnpack aids malware detection by directly providing to the detector the unpacked malicious payload. Experimental results demonstrate the effectiveness of our approach. OmniUnpack is able to deal with both known and unknown packing algorithms and introduces a low overhead (at most 11% for packed benign programs). © 2007 IEEE.","Martignoni L.; Christodorescu M.; Jha S.","194"
"Technique","Opcode Analysis","Rage against the virtual machine: Hindering dynamic analysis of android malware","10.1145/2592791.2592796","2014","Antivirus companies, mobile application marketplaces, and the security research community, employ techniques based on dynamic code analysis to detect and analyze mobile malware. In this paper, we present a broad range of anti-analysis techniques that malware can employ to evade dynamic analysis in emulated Android environments. Our detection heuristics span three different categories based on (i) static properties, (ii) dynamic sensor information, and (iii) VM-related intricacies of the Android Emulator. To assess the effectiveness of our techniques, we incorporated them in real malware samples and submitted them to publicly available Android dynamic analysis systems, with alarming results. We found all tools and services to be vulnerable to most of our evasion techniques. Even trivial techniques, such as checking the value of the IMEI, are enough to evade some of the existing dynamic analysis frameworks. We propose possible countermeasures to improve the resistance of current dynamic analysis tools against evasion attempts. Copyright © 2007 by the Association for Computing Machinery, Inc.","Petsas T.; Voyatzis G.; Athanasopoulos E.; Polychronakis M.; Ioannidis S.","192"
"Technique","Feature Extraction","Integrated static and dynamic analysis for malware detection","10.1016/j.procs.2015.02.149","2015","The number of malware is increasing rapidly regardless of the common use of anti-malware software. Detection of malware continues to be a challenge as attackers device new techniques to evade from the detection methods. Most of the anti-virus software uses signature based detection which is inefficient in the present scenario due to the rapid increase in the number and variants of malware. The signature is a unique identification for a binary file, which is created by analyzing the binary file using static analysis methods. Dynamic analysis uses the behavior and actions while in execution to identify whether the executable is a malware or not. Both methods have its own advantages and disadvantages. This paper proposes an integrated static and dynamic analysis method to analyses and classify an unknown executable file. The method uses machine learning in which known malware and benign programs are used as training data. The feature vector is selected by analyzing the binary code as well as dynamic behavior. The proposed method utilizes the benefits of both static and dynamic analysis thus the efficiency and the classification result are improved. Our experimental results shows an accuracy of 95.8% using static, 97.1% using dynamic and 98.7% using integrated method. Comparing with the standalone dynamic and static methods, our integrated method gives better accuracy. © 2015 The Authors.","Shijo P.V.; Salim A.","186"
"Technique","Fuzzing","IntelliDroid: A Targeted Input Generator for the Dynamic Analysis of Android Malware","10.14722/ndss.2016.23118","2016","While dynamic malware analysis methods generally provide better precision than purely static methods, they have the key drawback that they can only detect malicious behavior if it is executed during analysis. This requires inputs that trigger the malicious behavior to be applied during execution. All current methods, such as hard-coded tests, random fuzzing and concolic testing, can provide good coverage but are inefficient because they are unaware of the specific capabilities of the dynamic analysis tool. In this work, we introduce IntelliDroid, a generic Android input generator that can be configured to produce inputs specific to a dynamic analysis tool, for the analysis of any Android application. Furthermore, IntelliDroid is capable of determining the precise order that the inputs must be injected, and injects them at what we call the device-framework interface such that system fidelity is preserved. This enables it to be paired with full-system dynamic analysis tools such as TaintDroid. Our experiments demonstrate that IntelliDroid requires an average of 72 inputs and only needs to execute an average of 5% of the application to detect malicious behavior. When evaluated on 75 instances of malicious behavior, IntelliDroid successfully identifies the behavior, extracts path constraints, and executes the malicious code in all but 5 cases. On average, IntelliDroid performs these tasks in 138.4 seconds per application. © 2016 Internet Society.","Wong M.Y.; Lie D.","182"
"Technique","String Analysis","IntelliDroid: A Targeted Input Generator for the Dynamic Analysis of Android Malware","10.14722/ndss.2016.23118","2016","While dynamic malware analysis methods generally provide better precision than purely static methods, they have the key drawback that they can only detect malicious behavior if it is executed during analysis. This requires inputs that trigger the malicious behavior to be applied during execution. All current methods, such as hard-coded tests, random fuzzing and concolic testing, can provide good coverage but are inefficient because they are unaware of the specific capabilities of the dynamic analysis tool. In this work, we introduce IntelliDroid, a generic Android input generator that can be configured to produce inputs specific to a dynamic analysis tool, for the analysis of any Android application. Furthermore, IntelliDroid is capable of determining the precise order that the inputs must be injected, and injects them at what we call the device-framework interface such that system fidelity is preserved. This enables it to be paired with full-system dynamic analysis tools such as TaintDroid. Our experiments demonstrate that IntelliDroid requires an average of 72 inputs and only needs to execute an average of 5% of the application to detect malicious behavior. When evaluated on 75 instances of malicious behavior, IntelliDroid successfully identifies the behavior, extracts path constraints, and executes the malicious code in all but 5 cases. On average, IntelliDroid performs these tasks in 138.4 seconds per application. © 2016 Internet Society.","Wong M.Y.; Lie D.","182"
"Technique","Graph Analysis","Scalability, fidelity and stealth in the DRAKVUF dynamic malware analysis system","10.1145/2664243.2664252","2014","Malware is one of the biggest security threats on the Internet today and deploying effective defensive solutions requires the rapid analysis of a continuously increasing number of malware samples. With the proliferation of metamorphic malware the analysis is further complicated as the efficacy of signature-based static analysis systems is greatly reduced. While dynamic malware analysis is an effective alternative, the approach faces significant challenges as the ever increasing number of samples requiring analysis places a burden on hardware resources. At the same time modern malware can both detect the monitoring environment and hide in unmonitored corners of the system. In this paper we present DRAKVUF, a novel dynamic malware analysis system designed to address these challenges by building on the latest hardware virtualization extensions and the Xen hypervisor. We present a technique for improving stealth by initiating the execution of malware samples without leaving any trace in the analysis machine. We also present novel techniques to eliminate blind-spots created by kernel-mode rootkits by extending the scope of monitoring to include kernel internal functions, and to monitor file-system accesses through the kernel s heap allocations. With extensive tests performed on recent malware samples we show that DRAKVUF achieves significant improvements in conserving hardware resources while providing a stealthy, in-depth view into the behavior of modern malware.","Lengyel T.K.; Maresca S.; Payne B.D.; Webster G.D.; Vogl S.; Kiayias A.","177"
"Technique","Reinforcement Learning","Cloud-based malware detection game for mobile devices with offloading","10.1109/TMC.2017.2687918","2017","As accurate malware detection on mobile devices requires fast process of a large number of application traces, cloud-based malware detection can utilize the data sharing and powerful computational resources of security servers to improve the detection performance. In this paper, we investigate the cloud-based malware detection game, in which mobile devices offload their application traces to security servers via base stations or access points in dynamic networks. We derive the Nash equilibrium (NE) of the static malware detection game and present the existence condition of the NE, showing how mobile devices share their application traces at the security server to improve the detection accuracy, and compete for the limited radio bandwidth, the computational and communication resources of the server. We design a malware detection scheme with Q-learning for a mobile device to derive the optimal offloading rate without knowing the trace generation and the radio bandwidth model of other mobile devices. The detection performance is further improved with the Dyna architecture, in which a mobile device learns from the hypothetical experience to increase its convergence rate. We also design a post-decision state learning-based scheme that utilizes the known radio channel model to accelerate the reinforcement learning process in the malware detection. Simulation results show that the proposed schemes improve the detection accuracy, reduce the detection delay, and increase the utility of a mobile device in the dynamic malware detection game, compared with the benchmark strategy. © 2002-2012 IEEE.","Xiao L.; Li Y.; Huang X.; Du X.","174"
"Technique","Meta-Learning","Cloud-based malware detection game for mobile devices with offloading","10.1109/TMC.2017.2687918","2017","As accurate malware detection on mobile devices requires fast process of a large number of application traces, cloud-based malware detection can utilize the data sharing and powerful computational resources of security servers to improve the detection performance. In this paper, we investigate the cloud-based malware detection game, in which mobile devices offload their application traces to security servers via base stations or access points in dynamic networks. We derive the Nash equilibrium (NE) of the static malware detection game and present the existence condition of the NE, showing how mobile devices share their application traces at the security server to improve the detection accuracy, and compete for the limited radio bandwidth, the computational and communication resources of the server. We design a malware detection scheme with Q-learning for a mobile device to derive the optimal offloading rate without knowing the trace generation and the radio bandwidth model of other mobile devices. The detection performance is further improved with the Dyna architecture, in which a mobile device learns from the hypothetical experience to increase its convergence rate. We also design a post-decision state learning-based scheme that utilizes the known radio channel model to accelerate the reinforcement learning process in the malware detection. Simulation results show that the proposed schemes improve the detection accuracy, reduce the detection delay, and increase the utility of a mobile device in the dynamic malware detection game, compared with the benchmark strategy. © 2002-2012 IEEE.","Xiao L.; Li Y.; Huang X.; Du X.","174"
"Technique","Incremental Learning","Cloud-based malware detection game for mobile devices with offloading","10.1109/TMC.2017.2687918","2017","As accurate malware detection on mobile devices requires fast process of a large number of application traces, cloud-based malware detection can utilize the data sharing and powerful computational resources of security servers to improve the detection performance. In this paper, we investigate the cloud-based malware detection game, in which mobile devices offload their application traces to security servers via base stations or access points in dynamic networks. We derive the Nash equilibrium (NE) of the static malware detection game and present the existence condition of the NE, showing how mobile devices share their application traces at the security server to improve the detection accuracy, and compete for the limited radio bandwidth, the computational and communication resources of the server. We design a malware detection scheme with Q-learning for a mobile device to derive the optimal offloading rate without knowing the trace generation and the radio bandwidth model of other mobile devices. The detection performance is further improved with the Dyna architecture, in which a mobile device learns from the hypothetical experience to increase its convergence rate. We also design a post-decision state learning-based scheme that utilizes the known radio channel model to accelerate the reinforcement learning process in the malware detection. Simulation results show that the proposed schemes improve the detection accuracy, reduce the detection delay, and increase the utility of a mobile device in the dynamic malware detection game, compared with the benchmark strategy. © 2002-2012 IEEE.","Xiao L.; Li Y.; Huang X.; Du X.","174"
"Technique","Code Injection","Nozzle: A defense against heap-spraying code injection attacks","","2009","Heap spraying is a security attack that increases the ex-ploitability of memory corruption errors in type-unsafe applications. In a heap-spraying attack, an attacker coerces an application to allocate many objects containing malicious code in the heap, increasing the success rate of an exploit that jumps to a location within the heap. Because heap layout randomization necessitates new forms of attack, spraying has been used in many recent security exploits. Spraying is especially effective in web browsers, where the attacker can easily allocate the malicious objects using JavaScript embedded in a web page. In this paper, we describe NOZZLE, a runtime heap-spraying detector. NOZZLE examines individual objects in the heap, interpreting them as code and performing a static analysis on that code to detect malicious intent. To reduce false positives, we aggregate measurements across all heap objects and define a global heap health metric. We measure the effectiveness of NOZZLE by demonstrating that it successfully detects 12 published and 2,000 synthetically generated heap-spraying exploits. We also show that even with a detection threshold set six times lower than is required to detect published malicious attacks, NOZZLE reports no false positives when run over 150 popular Internet sites. Using sampling and concurrent scanning to reduce overhead, we show that the performance overhead of NOZZLE is less than 7% on average. While NOZZLE currently targets heap-based spraying attacks, its techniques can be applied to any attack that attempts to fill the address space with malicious code objects (e.g., stack spraying [42]). © 2009 Proceedings of the 18th USENIX Security Symposium. All rights reserved.","Ratanaworabhan P.; Livshits B.; Zorn B.","160"
"Technique","Support Vector Machines","Hardware Trojans classification for gate-level netlists based on machine learning","10.1109/IOLTS.2016.7604700","2016","Recently, we face a serious risk that malicious third-party vendors can very easily insert hardware Trojans into their IC products but it is very difficult to analyze huge and complex ICs. In this paper, we propose a hardware-Trojan classification method to identify hardware-Trojan infected nets (or Trojan nets) using a support vector machine (SVM). Firstly, we extract the five hardware-Trojan features in each net in a netlist. Secondly, since we cannot effectively give the simple and fixed threshold values to them to detect hardware Trojans, we represent them to be a five-dimensional vector and learn them by using SVM. Finally, we can successfully classify a set of all the nets in an unknown netlist into Trojan ones and normal ones based on the learned SVM classifier. We have applied our SVM-based hardware-Trojan classification method to Trust-HUB benchmarks and the results demonstrate that our method can much increase the true positive rate compared to the existing state-of-the-art results in most of the cases. In some cases, our method can achieve the true positive rate of 100%, which shows that all the Trojan nets in a netlist are completely detected by our method. © 2016 IEEE.","Hasegawa K.; Oya M.; Yanagisawa M.; Togawa N.","155"
"Technique","Wilcoxon Signed-Rank Test","A novel deep learning-based approach for malware detection","10.1016/j.engappai.2023.106030","2023","Malware detection approaches can be classified into two classes, including static analysis and dynamic analysis. Conventional approaches of the two classes have their respective advantages and disadvantages. For example, static analysis is faster but cannot detect the malware variants generated through code obfuscation, whereas dynamic analysis can effectively detect variants generated through code obfuscation but is slower and requires intensive resources. This paper proposes a novel deep learning-based approach for malware detection. It delivers better performance than conventional approaches by combining static and dynamic analysis advantages. First, it visualises a portable executable (PE) file as a coloured image. Second, it extracts deep features from the colour image using fine-tuned deep learning model. Third, it detects malware based on the deep features using support vector machines (SVM). The proposed method combines deep learning with machine learning and eliminates the need for intensive feature engineering tasks and domain knowledge. The proposed approach is scalable, cost-effective, and efficient. The detection effectiveness of the proposed method is validated through 12 machine learning models and 15 deep learning models. The generalisability of the proposed framework is validated on various benchmark datasets. The proposed approach outperformed with an accuracy of 99.06% on the Malimg dataset. The Wilcoxon signed-rank test is used to show the statistical significance of the proposed framework. The detailed experimental results demonstrate the superiority of the proposed method over the other state-of-the-art approaches, with an average increase in accuracy of 16.56%. Finally, to tackle the problems of imbalanced data and the shortage of publicly available datasets for malware detection, various data augmentation techniques are proposed, which lead to improved performance. It is evident from the results that the proposed framework can be useful to the defence industry, which will be helpful in devising more efficient malware detection solutions. © 2023 Elsevier Ltd","Shaukat K.; Luo S.; Varadharajan V.","150"
"Technique","Transfer Learning","A novel deep learning-based approach for malware detection","10.1016/j.engappai.2023.106030","2023","Malware detection approaches can be classified into two classes, including static analysis and dynamic analysis. Conventional approaches of the two classes have their respective advantages and disadvantages. For example, static analysis is faster but cannot detect the malware variants generated through code obfuscation, whereas dynamic analysis can effectively detect variants generated through code obfuscation but is slower and requires intensive resources. This paper proposes a novel deep learning-based approach for malware detection. It delivers better performance than conventional approaches by combining static and dynamic analysis advantages. First, it visualises a portable executable (PE) file as a coloured image. Second, it extracts deep features from the colour image using fine-tuned deep learning model. Third, it detects malware based on the deep features using support vector machines (SVM). The proposed method combines deep learning with machine learning and eliminates the need for intensive feature engineering tasks and domain knowledge. The proposed approach is scalable, cost-effective, and efficient. The detection effectiveness of the proposed method is validated through 12 machine learning models and 15 deep learning models. The generalisability of the proposed framework is validated on various benchmark datasets. The proposed approach outperformed with an accuracy of 99.06% on the Malimg dataset. The Wilcoxon signed-rank test is used to show the statistical significance of the proposed framework. The detailed experimental results demonstrate the superiority of the proposed method over the other state-of-the-art approaches, with an average increase in accuracy of 16.56%. Finally, to tackle the problems of imbalanced data and the shortage of publicly available datasets for malware detection, various data augmentation techniques are proposed, which lead to improved performance. It is evident from the results that the proposed framework can be useful to the defence industry, which will be helpful in devising more efficient malware detection solutions. © 2023 Elsevier Ltd","Shaukat K.; Luo S.; Varadharajan V.","150"
"Technique","Angr Symbolic Execution","A Systematic Literature Review of Android Malware Detection Using Static Analysis","10.1109/ACCESS.2020.3002842","2020","Android malware has been in an increasing trend in recent years due to the pervasiveness of Android operating system. Android malware is installed and run on the smartphones without explicitly prompting the users or without the user's permission, and it poses great threats to users such as the leakage of personal information and advanced fraud. To address these threats, various techniques are proposed by researchers and practitioners. Static analysis is one of these techniques, which is widely applied to Android malware detection and can detect malware quickly and prohibit malware before installation. To provide a clarified overview of the latest work in Android malware detection using static analysis, we perform a systematic literature review by identifying 98 studies from January 2014 to March 2020. Based on the features of applications, we first divide static analysis in Android malware detection into four categories, which include Android characteristic-based method, opcode-based method, program graph-based method, and symbolic execution-based method. Then we assess the malware detection capability of static analysis, and we compare the performance of different models in Android malware detection by analyzing the results of empirical evidence. Finally, it is concluded that static analysis is effective to detect Android malware. Moreover, there is a preliminary result that neural network model outperforms the non-neural network model in Android malware detection. However, static analysis still faces many challenges. Thus, it is necessary to derive some novel techniques for improving Android malware detection based on the current research community. Moreover, it is essential to establish a unified platform that is used to evaluate the performance of a series of techniques in Android malware detection fairly. © 2013 IEEE.","Pan Y.; Ge X.; Fang C.; Fan Y.","145"
"Technique","Symbolic Execution","A Systematic Literature Review of Android Malware Detection Using Static Analysis","10.1109/ACCESS.2020.3002842","2020","Android malware has been in an increasing trend in recent years due to the pervasiveness of Android operating system. Android malware is installed and run on the smartphones without explicitly prompting the users or without the user's permission, and it poses great threats to users such as the leakage of personal information and advanced fraud. To address these threats, various techniques are proposed by researchers and practitioners. Static analysis is one of these techniques, which is widely applied to Android malware detection and can detect malware quickly and prohibit malware before installation. To provide a clarified overview of the latest work in Android malware detection using static analysis, we perform a systematic literature review by identifying 98 studies from January 2014 to March 2020. Based on the features of applications, we first divide static analysis in Android malware detection into four categories, which include Android characteristic-based method, opcode-based method, program graph-based method, and symbolic execution-based method. Then we assess the malware detection capability of static analysis, and we compare the performance of different models in Android malware detection by analyzing the results of empirical evidence. Finally, it is concluded that static analysis is effective to detect Android malware. Moreover, there is a preliminary result that neural network model outperforms the non-neural network model in Android malware detection. However, static analysis still faces many challenges. Thus, it is necessary to derive some novel techniques for improving Android malware detection based on the current research community. Moreover, it is essential to establish a unified platform that is used to evaluate the performance of a series of techniques in Android malware detection fairly. © 2013 IEEE.","Pan Y.; Ge X.; Fang C.; Fan Y.","145"
"Technique","Input Transformation","Stealth attacks: An extended insight into the obfuscation effects on Android malware","10.1016/j.cose.2015.02.007","2015","In order to effectively evade anti-malware solutions, Android malware authors are progressively resorting to automatic obfuscation strategies. Recent works have shown, on small-scale experiments, the possibility of evading anti-malware engines by applying simple obfuscation transformations on previously detected malware samples. In this paper, we provide a large-scale experiment in which the detection performances of a high number of anti-malware solutions are tested against two different sets of malware samples that have been obfuscated according to different strategies. Moreover, we show that anti-malware engines search for possible malicious content inside assets and entry-point classes. We also provide a temporal analysis of the detection performances of anti-malware engines to verify if their resilience has improved since 2013. Finally, we show how, by manipulating the area of the Android executable that contains the strings used by the application, it is possible to deceive anti-malware engines so that they will identify legitimate samples as malware. On one hand, the attained results show that anti-malware systems have improved their resilience against trivial obfuscation techniques. On the other hand, more complex changes to the application executable have proved to be still effective against detection. Thus, we claim that a deeper static (or dynamic) analysis of the application is needed to improve the robustness of such systems. © 2015 Elsevier Ltd. All rights reserved.","Maiorca D.; Ariu D.; Corona I.; Aresu M.; Giacinto G.","142"
"Technique","Rule-Based Scanning","Analysis of Bayesian classification-based approaches for Android malware detection","10.1049/iet-ifs.2013.0095","2014","Mobile malware has been growing in scale and complexity spurred by the unabated uptake of smartphones worldwide. Android is fast becoming the most popular mobile platform resulting in sharp increase in malware targeting the platform. Additionally, Android malware is evolving rapidly to evade detection by traditional signature-based scanning. Despite current detection measures in place, timely discovery of new malware is still a critical issue. This calls for novel approaches to mitigate the growing threat of zero-day Android malware. Hence, the authors develop and analyse proactive machine-learning approaches based on Bayesian classification aimed at uncovering unknown Android malware via static analysis. The study, which is based on a large malware sample set of majority of the existing families, demonstrates detection capabilities with high accuracy. Empirical results and comparative analysis are presented offering useful insight towards development of effective static-analytic Bayesian classification-based solutions for detecting unknown Android malware. © 2013 The Institution of Engineering and Technology.","Yerima S.Y.; Sezer S.; McWilliams G.","136"
"Technique","N-gram Analysis","DroidRA: Taming reflection to support whole-program analysis of android apps","10.1145/2931037.2931044","2016","Android developers heavily use reflection in their apps for legitimate reasons, but also significantly for hiding malicious actions. Unfortunately, current state-of-the-art static analysis tools for Android are challenged by the presence of reflective calls which they usually ignore. Thus, the results of their security analysis, e.g., for private data leaks, are inconsistent given the measures taken by malware writers to elude static detection. We propose the DroidRA instrumentation-based approach to address this issue in a non-invasive way. With DroidRA, we reduce the resolution of reflective calls to a composite constant propagation problem. We leverage the COAL solver to infer the values of reflection targets and app, and we eventually instrument this app to include the corresponding traditional Java call for each reflective call. Our approach allows to boost an app so that it can be immediately analyzable, including by such static analyzers that were not reflection-aware. We evaluate DroidRA on benchmark apps as well as on real-world apps, and demonstrate that it can allow state-of-the-art tools to provide more sound and complete analysis results. Copyright is held by the owner/author(s). Publication rights licensed to ACM.","Li L.; Bissyandé T.F.; Octeau D.; Klein J.","135"
"Technique","Adversarial Examples","When Malware is Packin' Heat; Limits of Machine Learning Classifiers Based on Static Analysis Features","10.14722/ndss.2020.24310","2020","Machine learning techniques are widely used in addition to signatures and heuristics to increase the detection rate of anti-malware software, as they automate the creation of detection models, making it possible to handle an ever-increasing number of new malware samples. In order to foil the analysis of anti-malware systems and evade detection, malware uses packing and other forms of obfuscation. However, few realize that benign applications use packing and obfuscation as well, to protect intellectual property and prevent license abuse. In this paper, we study how machine learning based on static analysis features operates on packed samples. Malware researchers have often assumed that packing would prevent machine learning techniques from building effective classifiers. However, both industry and academia have published results that show that machine-learning-based classifiers can achieve good detection rates, leading many experts to think that classifiers are simply detecting the fact that a sample is packed, as packing is more prevalent in malicious samples. We show that, different from what is commonly assumed, packers do preserve some information when packing programs that is “useful” for malware classification. However, this information does not necessarily capture the sample's behavior. We demonstrate that the signals extracted from packed executables are not rich enough for machine-learning-based models to (1) generalize their knowledge to operate on unseen packers, and (2) be robust against adversarial examples. We also show that a naïve application of machine learning techniques results in a substantial number of false positives, which, in turn, might have resulted in incorrect labeling of ground-truth data used in past work. © 2020 27th Annual Network and Distributed System Security Symposium, NDSS 2020. All Rights Reserved.","Aghakhani H.; Gritti F.; Mecca F.; Lindorfer M.; Ortolani S.; Balzarotti D.; Vigna G.; Kruegel C.","134"
"Technique","Long Short-Term Memory","Detecting Android malware using Long Short-term Memory (LSTM)","10.3233/JIFS-169424","2018","Long Short-term Memory (LSTM) is a sub set of recurrent neural network (RNN) which is specifically used to train to learn long-term temporal dynamics with sequences of arbitrary length. In this paper, long short-term memory (LSTM) architecture is followed for Android malware detection. The data set for evaluation contains real known benign and malware applications from static and dynamic analysis. To achieve acceptable malware detection rates with low computational cost, various LSTM network topologies with several network parameters are used on all extracted features. A stacked LSTM with 32 memory blocks containing one cell each has performed well on detection of all individual behaviors of malicious applications in comparison to other traditional static machine learning classifier. The architecture quantifies experimental results up to 1000 epochs with learning rate 0.1. This is primarily due to the reason that LSTM has the potential to store long-range dependencies across time-steps and to correlate with successive connection sequences information. The experiment achieved the Android malware detection of 0.939 on dynamic analysis and 0.975 on static analysis on well-known datasets. © 2018 - IOS Press and the authors. All rights reserved.","Vinayakumar R.; Soman K.P.; Poornachandran P.; Sachin Kumar S.","128"
"Technique","BERT for Malware","A Survey of Stealth Malware Attacks, Mitigation Measures, and Steps Toward Autonomous Open World Solutions","10.1109/COMST.2016.2636078","2017","As our professional, social, and financial existences become increasingly digitized and as our government, healthcare, and military infrastructures rely more on computer technologies, they present larger and more lucrative targets for malware. Stealth malware in particular poses an increased threat because it is specifically designed to evade detection mechanisms, spreading dormant, in the wild for extended periods of time, gathering sensitive information or positioning itself for a high-impact zero-day attack. Policing the growing attack surface requires the development of efficient anti-malware solutions with improved generalization to detect novel types of malware and resolve these occurrences with as little burden on human experts as possible. In this paper, we survey malicious stealth technologies as well as existing solutions for detecting and categorizing these countermeasures autonomously. While machine learning offers promising potential for increasingly autonomous solutions with improved generalization to new malware types, both at the network level and at the host level, our findings suggest that several flawed assumptions inherent to most recognition algorithms prevent a direct mapping between the stealth malware recognition problem and a machine learning solution. The most notable of these flawed assumptions is the closed world assumption: that no sample belonging to a class outside of a static training set will appear at query time. We present a formalized adaptive open world framework for stealth malware recognition and relate it mathematically to research from other machine learning domains. © 2016 IEEE.","Rudd E.M.; Rozsa A.; Günther M.; Boult T.E.","128"
"Technique","Gray-Level Co-occurrence Matrix","Malware Visualization for Fine-Grained Classification","10.1109/ACCESS.2018.2805301","2018","Due to the rapid rise of automated tools, the number of malware variants has increased dramatically, which poses a tremendous threat to the security of the Internet. Recently, some methods for quick analysis of malware have been proposed, but these methods usually require a large computational overhead and cannot classify samples accurately for large-scale and complex malware data set. Therefore, in this paper, we propose a new visualization method for characterizing malware globally and locally to achieve fast and effective fine-grained classification. We take a new approach to visualize malware as RGB-colored images and extract global features from the images. Gray-level co-occurrence matrix and color moments are selected to describe the global texture features and color features, respectively, which produces low-dimensional feature data to reduce the complexity of training model. Moreover, a series of special byte sequences are extracted from code sections and data sections of malware and are processed into feature vectors by Simhash as the local features. Finally, we merge the global features and local features to perform malware classification using random forest, K-nearest neighbor, and support vector machine. Experimental results show that our approach obtains the highest accuracy of 97.47% and the highest F-measure of 96.85% of 7087 samples from 15 families. Color features and the local features effectively assist in the classification based on texture features and enhance the F-measure by 3.4% and 1%, respectively. Overall, the combination of global features and local features can realize fine-grained malware classification with low computational cost. © 2013 IEEE.","Fu J.; Xue J.; Wang Y.; Liu Z.; Shan C.","118"
"Technique","Sandboxing","A comprehensive survey on machine learning approaches for malware detection in IoT-based enterprise information system","10.1080/17517575.2021.2023764","2023","The Internet of Things (IoT) is a relatively new technology that has piqued academics’ and business information systems’ attention in recent years. The Internet of Things establishes a network that enables smart devices in an organisational information system to connect to one another and exchange data with the central storage. Android apps are placed on Android apps to enhance the user-friendliness of IoT devices in business information systems, making them more interactive and user-friendly. However, the usage of Android apps makes IoT devices susceptible to all forms of malware attacks, including those that attempt to hack into IoT devices and get access to sensitive information stored in the corporate information system. The researchers offered a variety of attack mitigation approaches for detecting harmful malware embedded in an Android application operating on an IoT device. In this context, machine learning offered the most promising strategies to detect malware attacks in IoT-based enterprise information systems because of its better accuracy and precision. Its capacity to adapt to new forms of malware attacks is a result of its learning capabilities. Therefore, we conduct a detailed survey, which discusses emerging machine learning algorithms for detecting malware in business information systems powered by the Internet of Things. This article reviews all available research on malware detection, including static malware detection, dynamic malware detection, promoted malware detection and hybrid malware detection. © 2022 Informa UK Limited, trading as Taylor & Francis Group.","Gaurav A.; Gupta B.B.; Panigrahi P.K.","116"
"Technique","Autoencoders","Malware detection in mobile environments based on Autoencoders and API-images","10.1016/j.jpdc.2019.11.001","2020","Due to their open nature and popularity, Android-based devices represent one of the main targets for malware attacks that may adversely affect the privacy of their users. Considering the huge Android market share, it is necessary to build effective tools able to reliably detect zero-day malware on these platforms. Therefore, several static and dynamic analysis methods based on Neural Networks and Deep Learning have been proposed in the literature. Despite machine learning can be considered the most promising approach for classifying applications into malware or legitimate ones, its success strongly depends on the choice of the right features used for building the detection model. This is definitely not an easy task that requires a systematic solution. Accordingly, this work represents the sequences of API calls invoked by apps during their execution as sparse matrices looking like images (API-images), which can be used as fingerprints of the apps’ behavior over time. We also used autoencoders to autonomously extract the most representative and discriminating features from these matrices, that, once provided to an artificial neural network-based classifier have shown to be effective in detecting malware, also when the network is trained on a reduced number of samples. Experimental results show that the resulting framework is able to outperform more complex and sophisticated machine learning approaches in malware classification. © 2019 Elsevier Inc.","D'Angelo G.; Ficco M.; Palmieri F.","115"
"Technique","Virtualization Obfuscation","Unpacking virtualization obfuscators","","2009","Nearly every malware sample is sheathed in an executable protection which must be removed before static analyses can proceed. Existing research has studied automatically unpacking certain protections, but has not yet caught up with many modern techniques. Contrary to prior assumptions, protected programs do not always have the property that they are reverted to a fully unprotected state at some point during the course of their execution. This work provides a novel technique for circumventing one of the most problematic features of modern software protections, so-called virtualization obfuscation. The technique enables analysis of heretofore impenetrable malware. © 2009 USENIX Association. All rights reserved.","Rolles R.","111"
"Technique","Mutex Analysis","Deobfuscation of virtualization-obfuscated software: A semantics-based approach","10.1145/2046707.2046739","2011","When new malware are discovered, it is important for researchers to analyze and understand them as quickly as possible. This task has been made more difficult in recent years as researchers have seen an increasing use of virtualization-obfuscated malware code. These programs are difficult to comprehend and reverse engineer, since they are resistant to both static and dynamic analysis techniques. Current approaches to dealing with such code first reverse-engineer the byte code interpreter, then use this to work out the logic of the byte code program. This outside-in approach produces good results when the structure of the interpreter is known, but cannot be applied to all cases. This paper proposes a different approach to the problem that focuses on identifying instructions that affect the observable behavior of the obfuscated code. This inside-out approach requires fewer assumptions, and aims to complement existing techniques by broadening the domain of obfuscated programs eligible for automated analysis. Results from a prototype tool on real-world malicious code are encouraging. © 2011 ACM.","Coogan K.; Lu G.; Debray S.","110"
"Technique","Automated Analysis","Deobfuscation of virtualization-obfuscated software: A semantics-based approach","10.1145/2046707.2046739","2011","When new malware are discovered, it is important for researchers to analyze and understand them as quickly as possible. This task has been made more difficult in recent years as researchers have seen an increasing use of virtualization-obfuscated malware code. These programs are difficult to comprehend and reverse engineer, since they are resistant to both static and dynamic analysis techniques. Current approaches to dealing with such code first reverse-engineer the byte code interpreter, then use this to work out the logic of the byte code program. This outside-in approach produces good results when the structure of the interpreter is known, but cannot be applied to all cases. This paper proposes a different approach to the problem that focuses on identifying instructions that affect the observable behavior of the obfuscated code. This inside-out approach requires fewer assumptions, and aims to complement existing techniques by broadening the domain of obfuscated programs eligible for automated analysis. Results from a prototype tool on real-world malicious code are encouraging. © 2011 ACM.","Coogan K.; Lu G.; Debray S.","110"
"Technique","Thread Analysis","Collusive data leak and more: Large-scale threat analysis of inter-app communications","10.1145/3052973.3053004","2017","Inter-Component Communication (ICC) provides a message passing mechanism for data exchange between Android applications. It has been long believed that inter-app ICCs can be abused by malware writers to launch collusion attacks using two or more apps. However, because of the complexity of performing pairwise program analysis on apps, the scale of existing analyses is too small (e.g., up to several hundred) to produce concrete security evidence. In this paper, we report our findings in the first large-scale detection of collusive and vulnerable apps, based on inter-app ICC data flows among 110,150 real-world apps. Our system design aims to balance the accuracy of static ICC resolution/data-flow analysis and run-time scalability. This large-scale analysis provides real-world evidence and deep insights on various types of inter-app ICC abuse. Besides the empirical findings, we make several technical contributions, including a new open-source ICC resolution tool with improved accuracy over the state-of-the-art, and a large database of inter-app ICCs and their attributes. © 2017 ACM.","Bosu A.; Liu F.; Yao D.D.; Wang G.","107"
"Technique","DLL Injection","Automatically securing permission-based software by reducing the attack surface: An application to android","10.1145/2351676.2351722","2012","In the permission-based security model (used e.g. in Android and Blackberry), applications can be granted more permissions than they actually need, what we call a ""permission gap"". Malware can leverage the unused permissions for achieving their malicious goals, for instance using code injection. In this paper, we present an approach to detecting permission gaps using static analysis. Using our tool on a dataset of Android applications, we found out that a non negligible part of applications suffers from permission gaps, i.e. does not use all the permissions they declare. Copyright 2012 ACM.","Bartel A.; Klein J.; Le Traon Y.; Monperrus M.","106"
"Technique","Deep Belief Networks","Android malware detection based on a hybrid deep learning model","10.1155/2020/8863617","2020","In recent years, the number of malware on the Android platform has been increasing, and with the widespread use of code obfuscation technology, the accuracy of antivirus software and traditional detection algorithms is low. Current state-of-the-art research shows that researchers started applying deep learning methods for malware detection. We proposed an Android malware detection algorithm based on a hybrid deep learning model which combines deep belief network (DBN) and gate recurrent unit (GRU). First of all, analyze the Android malware; in addition to extracting static features, dynamic behavioral features with strong antiobfuscation ability are also extracted. Then, build a hybrid deep learning model for Android malware detection. Because the static features are relatively independent, the DBN is used to process the static features. Because the dynamic features have temporal correlation, the GRU is used to process the dynamic feature sequence. Finally, the training results of DBN and GRU are input into the BP neural network, and the final classification results are output. Experimental results show that, compared with the traditional machine learning algorithms, the Android malware detection model based on hybrid deep learning algorithms has a higher detection accuracy, and it also has a better detection effect on obfuscated malware.  © 2020 Tianliang Lu et al.","Lu T.; Du Y.; Ouyang L.; Chen Q.; Wang X.","99"
"Technique","Control Flow Analysis","DroidNative: Automating and optimizing detection of Android native code malware variants","10.1016/j.cose.2016.11.011","2017","According to the Symantec and F-Secure threat reports, mobile malware development in 2013 and 2014 has continued to focus almost exclusively (~99%) on the Android platform. Malware writers are applying stealthy mutations (obfuscations) to create malware variants, thwarting detection by signature-based detectors. In addition, the plethora of more sophisticated detectors making use of static analysis techniques to detect such variants operate only at the bytecode level, meaning that malware embedded in native code goes undetected. A recent study shows that 86% of the most popular Android applications contain native code, making native code malware a plausible threat vector. This paper proposes DroidNative, an Android malware detector that uses specific control flow patterns to reduce the effect of obfuscations and provides automation. As far as we know, DroidNative is the first system that builds cross-platform (x86 and ARM) semantic-based signatures at the Android native code level, allowing the system to detect malware embedded in either bytecode or native code. When tested with a dataset of 5490 samples, DroidNative achieves a detection rate (DR) of 93.57% and a false positive rate of 2.7%. When tested with traditional malware variants, it achieves a DR of 99.48%, compared to the DRs of academic and commercial tools that range from 8.33% to 93.22%. © 2016 Elsevier Ltd","Alam S.; Qu Z.; Riley R.; Chen Y.; Rastogi V.","99"
"Technique","Blending Methods","Android malware detection based on a hybrid deep learning model","10.1155/2020/8863617","2020","In recent years, the number of malware on the Android platform has been increasing, and with the widespread use of code obfuscation technology, the accuracy of antivirus software and traditional detection algorithms is low. Current state-of-the-art research shows that researchers started applying deep learning methods for malware detection. We proposed an Android malware detection algorithm based on a hybrid deep learning model which combines deep belief network (DBN) and gate recurrent unit (GRU). First of all, analyze the Android malware; in addition to extracting static features, dynamic behavioral features with strong antiobfuscation ability are also extracted. Then, build a hybrid deep learning model for Android malware detection. Because the static features are relatively independent, the DBN is used to process the static features. Because the dynamic features have temporal correlation, the GRU is used to process the dynamic feature sequence. Finally, the training results of DBN and GRU are input into the BP neural network, and the final classification results are output. Experimental results show that, compared with the traditional machine learning algorithms, the Android malware detection model based on hybrid deep learning algorithms has a higher detection accuracy, and it also has a better detection effect on obfuscated malware.  © 2020 Tianliang Lu et al.","Lu T.; Du Y.; Ouyang L.; Chen Q.; Wang X.","99"
"Technique","Principal Component Analysis","SEDMDroid: An Enhanced Stacking Ensemble Framework for Android Malware Detection","10.1109/TNSE.2020.2996379","2021","The popularity of the Android platform in smartphones and other Internet-of-Things devices has resulted in the explosive of malware attacks against it. Malware presents a serious threat to the security of devices and the services they provided, e.g. stealing the privacy sensitive data stored in mobile devices. This work raises a stacking ensemble framework SEDMDroid to identify Android malware. Specifically, to ensure individual's diversity, it adopts random feature subspaces and bootstrapping samples techniques to generate subset, and runs Principal Component Analysis (PCA) on each subset. The accuracy is probed by keeping all the principal components and using the whole dataset to train each base learner Multi-Layer Perception (MLP). Then, Support Vector Machine (SVM) is employed as the fusion classifier to learn the implicit supplementary information from the output of the ensemble members and yield the final prediction result. We show experimental results on two separate datasets collected by static analysis way to prove the effectiveness of the SEDMDroid. The first one extracts permission, sensitive API, monitoring system event and so on that are widely used in Android malwares as the features, and SEDMDroid achieves 89.07% accuracy in term of these multi-level static features. The second one, a public big dataset, extracts the sensitive data flow information as the features, and the average accuracy is 94.92%. Promising experiment results reveal that the proposed method is an effective way to identify Android malware. © 2013 IEEE.","Zhu H.; Li Y.; Li R.; Li J.; You Z.; Song H.","97"
"Technique","K-means Clustering","Defending unknown attacks on cyber-physical systems by semi-supervised approach and available unlabeled data","10.1016/j.ins.2016.09.041","2017","Cyber-physical systems (CPS) are used increasingly in modern industrial systems. These systems currently encounter a significant threat of malicious activities created by malicious software intent on exploiting the fact that the software of such industrial systems is integrated with hardware and network systems. Malicious codes dynamically and continuously change their internal structure and attack patterns using obfuscation techniques, such as polymorphism and metamorphism, in order to bypass and hide from conventional malware detection engines. This requires continuously updating the database of the malware detection engine, which requires periodic effort from manual experts. This could limit the real-time protection of CPS. In addition, this also makes preserving the availability and integrity of the services provided by CPS against malicious code challenging because there is a demand for the development of specialized malware detection techniques for CPS. In this paper, we propose a semi-supervised approach that automatically integrates the knowledge about unknown malware from already available and cheap unlabeled data into the detection system. The novelty of the proposed approach is that it does not require expert effort to update the database of the detection engine. Instead, the dynamic changes in malware attack patterns are extracted by unsupervised clustering from already available unlabeled data. Then the extracted geometric information about the intrinsic attack characteristics of the clusters is integrated into the classification systems of the detection engine, which updates the detection system automatically. The proposed approach uses global K-means clustering with term-frequency (TF), inverse document frequency (IDF), and cosine similarity as a distance measure for extracting the cluster information and adding it to a support vector machine (SVM) classification system. The proposed approach has been tested extensively on a real malware data set for both static and dynamic malware features. The experiment results show that the proposed semi-supervised approach achieves higher accuracy over the existing supervised approaches for all classifiers. We note that the static feature-based semi-supervised approach can improve detection accuracy significantly. While applying the proposed semi-supervised approach with the run-time characteristics of dynamic feature analysis, the combined effect of dynamic analysis and the proposed approach further increases the detection accuracy of all classifiers by up to a 100% for the SVM and the random forest classifiers, thus exceeding the existing supervised approaches with similar features. © 2016 Elsevier Inc.","Huda S.; Miah S.; Mehedi Hassan M.; Islam R.; Yearwood J.; Alrubaian M.; Almogren A.","97"
"Technique","Logistic Regression","A TAN based hybrid model for android malware detection","10.1016/j.jisa.2020.102483","2020","Android devices are very popular because of their availability at reasonable prices. However, there is a rapid rise of malware applications in Android platform in the recent past years due to its security vulnerabilities. The existing static malware detection mechanisms can locate malicious components associated with the source code of an application and dynamic analysis can identify exploits in the runtime environment. Hence, the advantages of both static and dynamic mechanisms need to be combined to form a hybrid analysis mechanism for achieving better accuracy in malware detection. The existing machine learning based hybrid malware analysis mechanisms do not check the interdependency of static and dynamic features used in their machine learning classifiers. This interdependency can lead to multicollinearity problem which can affect the classifier's performance. Hence, in this paper we propose a novel TAN (Tree Augmented naive Bayes) based hybrid malware detection mechanism by employing the conditional dependencies among relevant static and dynamic features (API calls, permissions and system calls) which are required for the functionality of an application. We trained three ridge regularized logistic regression classifiers corresponding to API calls, permission and system calls of an application and modeled their output relationships as a TAN (Tree Augmented naive Bayes) for identifying whether the application is malicious or not. The experimental results show that the proposed mechanism can detect malicious applications over a long period with an accuracy of 0.97. © 2020 Elsevier Ltd","Surendran R.; Thomas T.; Emmanuel S.","96"
"Technique","SMTP Analysis","Combining static and dynamic analysis for the detection of malicious documents","10.1145/1972551.1972555","2011","The widespread adoption of the PDF format for document exchange has given rise to the use of PDF files as a prime vector for malware propagation. As vulnerabilities in the major PDF viewers keep surfacing, effective detection of malicious PDF documents remains an important issue. In this paper we present MDScan, a standalone malicious document scanner that combines static document analysis and dynamic code execution to detect previously unknown PDF threats. Our evaluation shows that MDScan can detect a broad range of malicious PDF documents, even when they have been extensively obfuscated. Copyright © 2011 ACM.","Tzermias Z.; Sykiotakis G.; Polychronakis M.; Markatos E.P.","94"
"Technique","Memory Networks","Static malware detection and attribution in android byte-code through an end-to-end deep system","10.1016/j.future.2019.07.070","2020","Android reflects a revolution in handhelds and mobile devices. It is a virtual machine based, an open source mobile platform that powers millions of smartphone and devices and even a larger no. of applications in its ecosystem. Surprisingly in a short lifespan, Android has also seen a colossal expansion in application malware with 99% of the total malware for smartphones being found in the Android ecosystem. Subsequently, quite a few techniques have been proposed in the literature for the analysis and detection of these malicious applications for the Android platform. The increasing and diversified nature of Android malware has immensely attenuated the usefulness of prevailing malware detectors, which leaves Android users susceptible to novel malware. Here in this paper, as a remedy to this problem, we propose an anti-malware system that uses customized learning models, which are sufficiently deep, and are ’End to End deep learning architectures which detect and attribute the Android malware via opcodes extracted from application bytecode’. Our results show that Bidirectional long short-term memory (BiLSTMs) neural networks can be used to detect static behavior of Android malware beating the state-of-the-art models without using handcrafted features. For our experiments in our system, we also choose to work with distinct and independent deep learning models leveraging sequence specialists like recurrent neural networks, Long Short Term Memory networks and its Bidirectional variation as well as those are more usual neural architectures like a network of all connected layers(fully connected), deep convnets, Diabolo network (autoencoders) and generative graphical models like deep belief networks for static malware analysis on Android. To test our system, we have also augmented a bytecode dataset from three open and independently maintained state-of-the-art datasets. Our bytecode dataset, which is on an order of magnitude large, essentially suffice for our experiments. Our results suggests that our proposed system can lead to better design of malware detectors as we report an accuracy of 0.999 and an F1-score of 0.996 on a large dataset of more than 1.8 million Android applications. © 2019 Elsevier B.V.","Amin M.; Tanveer T.A.; Tehseen M.; Khan M.; Khan F.A.; Anwar S.","93"
"Technique","Similarity Analysis","Malware detection using assembly and API call sequences","10.1007/s11416-010-0141-5","2011","One of the major problems concerning information assurance is malicious code. To evade detection, malware has also been encrypted or obfuscated to produce variants that continue to plague properly defended and patched networks with zero day exploits. With malware and malware authors using obfuscation techniques to generate automated polymorphic and metamorphic versions, anti-virus software must always keep up with their samples and create a signature that can recognize the new variants. Creating a signature for each variant in a timely fashion is a problem that anti-virus companies face all the time. In this paper we present detection algorithms that can help the anti-virus community to ensure a variant of a known malware can still be detected without the need of creating a signature; a similarity analysis (based on specific quantitative measures) is performed to produce a matrix of similarity scores that can be utilized to determine the likelihood that a piece of code under inspection contains a particular malware. Two general malware detection methods presented in this paper are: Static Analyzer for Vicious Executables (SAVE) and Malware Examiner using Disassembled Code (MEDiC). MEDiC uses assembly calls for analysis and SAVE uses API calls (Static API call sequence and Static API call set) for analysis. We show where Assembly can be superior to API calls in that it allows a more detailed comparison of executables. API calls, on the other hand, can be superior to Assembly for its speed and its smaller signature. Our two proposed techniques are implemented in SAVE) and MEDiC. We present experimental results that indicate that both of our proposed techniques can provide a better detection performance against obfuscated malware. We also found a few false positives, such as those programs that use network functions (e. g. PuTTY) and encrypted programs (no API calls or assembly functions are found in the source code) when the thresholds are set 50% similarity measure. However, these false positives can be minimized, for example by changing the threshold value to 70% that determines whether a program falls in the malicious category or not. © 2010 Springer-Verlag France.","Shankarapani M.K.; Ramamoorthy S.; Movva R.S.; Mukkamala S.","90"
"Technique","Entropy Analysis","EntropLyzer: Android Malware Classification and Characterization Using Entropy Analysis of Dynamic Characteristics","10.1109/RDAAPS48126.2021.9452002","2021","The unmatched threat of Android malware has tremendously increased the need for analyzing prominent malware samples. There are remarkable efforts in static and dynamic malware analysis using static features and API calls respectively. Nonetheless, there is a void to classify Android malware by analyzing its behavior using multiple dynamic characteristics. This paper proposes EntropLyzer, an entropy-based behavioral analysis technique for classifying the behavior of 12 eminent Android malware categories and 147 malware families taken from CCCS-CIC-AndMal2020 dataset. This work uses six classes of dynamic characteristics including memory, API, network, logcat, battery, and process to classify and characterize Android malware. Results reveal that the entropy-based analysis successfully determines the behavior of all malware categories and most of the malware families before and after rebooting the emulator.  © 2021 IEEE.","Keyes D.S.; Li B.; Kaur G.; Lashkari A.H.; Gagnon F.; Massicotte F.","90"
"Technique","Normalization","Automatic ransomware detection and analysis based on dynamic API calls flow graph","10.1145/3129676.3129704","2017","In recent cyber incidents, Ransom software (ransomware)causes a major threat to the security of computer systems.Consequently, ransomware detection has become a hot topicin computer security. Unfortunately, current signature-basedand static detection model is often easily evadable by obfuscation,polymorphism, compress, and encryption. For overcomingthe lack of signature-based and static ransomwaredetection approach, we have proposed the dynamic ran-somware detection system using data mining techniques suchas Random Forest (RF), Support Vector Machine (SVM),Simple Logistic (SL) and Naive Bayes (NB) algorithms fordetecting known and unknown ransomware. We monitor theactual (dynamic) behaviors of software to generate API callsow graphs (CFG) and transfer it in a feature space. Thereafter,data normalization and feature selection were appliedto select informative features which are the best for discriminatingbetween various categories of software and benignsoftware. Finally, the data mining algorithms were used forbuilding the detection model for judging whether the softwareis benign software or ransomware. Our experimentalresults show that our proposed system can be more effectiveto improve the performance for ransomware detection.Especially, the accuracy and detection rate of our proposed system with Simple Logistic (SL) algorithm can achieve to98.2% and 97.6%, respectively. Meanwhile, the false positiverate also can be reduced to 1.2%. © 2017 Association for Computing Machinery.","Chen Z.-G.; Kang H.-S.; Yin S.-N.; Kim S.-R.","85"
"Technique","Stacking Techniques","Efficient dynamic malware analysis based on network behavior using deep learning","10.1109/GLOCOM.2016.7841778","2016","Malware authors or attackers always try to evade detection methods to accomplish their mission. Such detection methods are broadly divided into three types: static feature, host-behavior, and network-behavior based. Static feature-based methods are evaded using packing techniques. Host- behavior-based methods also can be evaded using some code injection methods, such as API hook and dynamic link library hook. This arms race regarding static feature-based and host-behavior- based methods increases the importance of network-behavior-based methods. The necessity of communication between infected hosts and attackers makes it difficult to evade network-behavior- based methods. The effectiveness of such methods depends on how we collect a variety of communications by using malware samples. However, analyzing all new malware samples for a long period is infeasible. Therefore, we propose a method for determining whether dynamic analysis should be suspended based on network behavior to collect malware communications efficiently and exhaustively. The key idea behind our proposed method is focused on two characteristics of malware communication: the change in the communication purpose and the common latent function. These characteristics of malware communications resemble those of natural language from the viewpoint of data structure, and sophisticated analysis methods have been proposed in the field of natural language processing. For this reason, we applied the recursive neural network, which has recently exhibited high classification performance, to our proposed method. In the evaluation with 29,562 malware samples, our proposed method reduced 67.1% of analysis time while keeping the coverage of collected URLs to 97.9% of the method that continues full analyses. © 2016 IEEE.","Shibahara T.; Yagi T.; Akiyama M.; Chiba D.; Yada T.","79"
"Technique","Local Binary Patterns","Binary malware image classification using machine learning with local binary pattern","10.1109/BigData.2017.8258512","2017","Malware classification is a critical part in the cyber-security. Traditional methodologies for the malware classification typically use static analysis and dynamic analysis to identify malware. In this paper, a malware classification methodology based on its binary image and extracting local binary pattern (LBP) features is proposed. First, malware images are reorganized into 3 by 3 grids which is mainly used to extract LBP feature. Second, the LBP is implemented on the malware images to extract features in that it is useful in pattern or texture classification. Finally, Tensorflow, a library for machine learning, is applied to classify malware images with the LBP feature. Performance comparison results among different classifiers with different image descriptors such as GIST, a spatial envelop, and the LBP demonstrate that our proposed approach outperforms others. © 2017 IEEE.","Luo J.-S.; Lo D.C.-T.","75"
"Technique","Pattern Recognition","Classification of malware based on string and function feature selection","10.1109/CTC.2010.11","2010","Anti-malware software producers are continually challenged to identify and counter new malware as it is released into the wild. A dramatic increase in malware production in recent years has rendered the conventional method of manually determining a signature for each new malware sample untenable. This paper presents a scalable, automated approach for detecting and classifying malware by using pattern recognition algorithms and statistical methods at various stages of the malware analysis life cycle. Our framework combines the static features of function length and printable string information extracted from malware samples into a single test which gives classification results better than those achieved by using either feature individually. In our testing we input feature information from close to 1400 unpacked malware samples to a number of different classification algorithms. Using k-fold cross validation on the malware, which includes Trojans and viruses, along with 151 clean files, we achieve an overall classification accuracy of over 98%. © 2010 IEEE.","Islam R.; Tian R.; Batten L.; Versteeg S.","72"
"Technique","Hash Function Identification","Aligot: Cryptographic function identification in obfuscated binary programs","10.1145/2382196.2382217","2012","Analyzing cryptographic implementations has important applications, especially for malware analysis where they are an integral part both of the malware payload and the unpacking code that decrypts this payload. These implementations are often based on well-known cryptographic functions, whose description is publicly available. While potentially very useful for malware analysis, the identification of such cryptographic primitives is made difficult by the fact that they are usually obfuscated. Current state-of-the-art identification tools are ineffective due to the absence of easily identifiable static features in obfuscated code. However, these implementations still maintain the input-output (I/O) relationship of the original function. In this paper, we present a tool that leverages this fact to identify cryptographic functions in obfuscated programs, by retrieving their I/O parameters in an implementation-independent fashion, and comparing them with those of known cryptographic functions. In experimental evaluation, we successfully identi fied the cryptographic functions TEA, RC4, AES and MD5 both in synthetic examples protected by a commercial-grade packer (AsProtect), and in several obfuscated malware samples (Sality, Waledac, Storm Worm and SilentBanker). In addition, our tool was able to recognize basic operations done in asymmetric ciphers such as RSA. Copyright © 2012 ACM.","Calvet J.; Fernandez J.M.; Marion J.-Y.","72"
"Technique","Rootkit Detection","Detecting kernel-level rootkits using data structure invariants","10.1109/TDSC.2010.38","2011","Rootkits affect system security by modifying kernel data structures to achieve a variety of malicious goals. While early rootkits modified control data structures, such as the system call table and values of function pointers, recent work has demonstrated rootkits that maliciously modify noncontrol data. Most prior techniques for rootkit detection have focused solely on detecting control data modifications and, therefore, fail to detect such rootkits. This paper presents a novel technique to detect rootkits that modify both control and noncontrol data. The main idea is to externally observe the execution of the kernel during an inference phase and hypothesize invariants on kernel data structures. A rootkit detection phase uses these invariants as specifications of data structure integrity. During this phase, violation of invariants indicates an infection. We have implemented Gibraltar, a prototype tool that infers kernel data structure invariants and uses them to detect rootkits. Experiments show that Gibraltar can effectively detect previously known rootkits, including those that modify noncontrol data structures. © 2011 IEEE.","Baliga A.; Ganapathy V.; Iftode L.","72"
"Technique","Gradient Boosting","Hybrid-Based Malware Analysis for Effective and Efficiency Android Malware Detection","10.1109/ICIMCIS51567.2020.9354315","2020","In the last decade, Android is the most widely used operating system. Despite this rapidly increasing popularity, Android is also a target for the spread of malware. Android admits the installation of applications from other unauthorized markets. This fact allows malware developers to place malicious apps and engage Android devices. So far, malware analysis and detection systems have been developed to use both static analysis and dynamic analysis. However, existing research is still lagging in the performance of detecting malware efficiently and accurately. For accurate malware detection, it often utilizes many resources from resource-limited mobile devices. Therefore, this research proposes a solution by developing and testing an efficient and accurate machine learning and deep learning model for this problem. We used the malware genome dataset and the Drebin project for static analysis and used the CICMalDroid dataset for dynamic analysis. From these two datasets, we extract 261 combined features of the hybrid analysis. To test the model that was built, we took 311 application samples consisting of 165 benign apps from the play store and 146 malicious apps from VirusShare. The test results show that the hybrid analysis model can increase detection by about 5%. Further testing also revealed that the extreme gradient boosting (XGB) assemble model is the best accuracy and efficiency model. © 2020 IEEE.","Hadiprakoso R.B.; Kabetta H.; Buana I.K.S.","69"
"Technique","Section Analysis","Artificial Intelligence-Based Malware Detection, Analysis, and Mitigation","10.3390/sym15030677","2023","Malware, a lethal weapon of cyber attackers, is becoming increasingly sophisticated, with rapid deployment and self-propagation. In addition, modern malware is one of the most devastating forms of cybercrime, as it can avoid detection, make digital forensics investigation in near real-time impossible, and the impact of advanced evasion strategies can be severe and far-reaching. This makes it necessary to detect it in a timely and autonomous manner for effective analysis. This work proposes a new systematic approach to identifying modern malware using dynamic deep learning-based methods combined with heuristic approaches to classify and detect five modern malware families: adware, Radware, rootkit, SMS malware, and ransomware. Our symmetry investigation in artificial intelligence and cybersecurity analytics will enhance malware detection, analysis, and mitigation abilities to provide resilient cyber systems against cyber threats. We validated our approach using a dataset that specifically contains recent malicious software to demonstrate that the model achieves its goals and responds to real-world requirements in terms of effectiveness and efficiency. The experimental results indicate that the combination of behavior-based deep learning and heuristic-based approaches for malware detection and classification outperforms the use of static deep learning methods. © 2023 by the authors.","Djenna A.; Bouridane A.; Rubab S.; Marou I.M.","68"
"Technique","Concept Drift Detection","An Adaptive Behavioral-Based Incremental Batch Learning Malware Variants Detection Model Using Concept Drift Detection and Sequential Deep Learning","10.1109/ACCESS.2021.3093366","2021","Malware variants are the major emerging threats that face cybersecurity due to the potential damage to computer systems. Many solutions have been proposed for detecting malware variants. However, accurate detection is challenging due to the constantly evolving nature of the malware variants that cause concept drift. Existing malware detection solutions assume that the mapping learned from historical malware features will be valid for new and future malware. The relationship between input features and the class label has been considered stationary, which doesn't hold for the ever-evolving nature of malware variants. Malware features change dynamically due to code obfuscations, mutations, and the modification made by malware authors to change the features' distribution and thus evade the detection rendering the detection model obsolete and ineffective. This study presents an Adaptive behavioral-based Incremental Batch Learning Malware Variants Detection model using concept drift detection and sequential deep learning (AIBL-MVD) to accommodate the new malware variants. Malware behaviors were extracted using dynamic analysis by running the malware files in a sandbox environment and collecting their Application Programming Interface (API) traces. According to the malware first-time appearance, the malware samples were sorted to capture the malware variants' change characteristics. The base classifier was then trained based on a subset of historical malware samples using a sequential deep learning model. The new malware samples were mixed with a subset of old data and gradually introduced to the learning model in an adaptive batch size incremental learning manner to address the catastrophic forgetting dilemma of incremental learning. The statistical process control technique has been used to detect the concept drift as an indication for incrementally updating the model as well as reducing the frequency of model updates. Results from extensive experiments show that the proposed model is superior in terms of detection rate and efficiency compared with the static model, periodic retraining approaches, and the fixed batch size incremental learning approach. The model maintains an average of 99.41% detection accuracy of new and variants malware with a low updating frequency of 1.35 times per month. © 2013 IEEE.","Darem A.A.; Ghaleb F.A.; Al-Hashmi A.A.; Abawajy J.H.; Alanazi S.M.; Al-Rezami A.Y.","66"
"Technique","Alias Analysis","MalScan: Fast market-wide mobile malware scanning by social-network centrality analysis","10.1109/ASE.2019.00023","2019","Malware scanning of an app market is expected to be scalable and effective. However, existing approaches use either syntax-based features which can be evaded by transformation attacks or semantic-based features which are usually extracted by performing expensive program analysis. Therefor, in this paper, we propose a lightweight graph-based approach to perform Android malware detection. Instead of traditional heavyweight static analysis, we treat function call graphs of apps as social networks and perform social-network-based centrality analysis to represent the semantic features of the graphs. Our key insight is that centrality provides a succinct and fault-tolerant representation of graph semantics, especially for graphs with certain amount of inaccurate information (e.g., inaccurate call graphs). We implement a prototype system, MalScan, and evaluate it on datasets of 15,285 benign samples and 15,430 malicious samples. Experimental results show that MalScan is capable of detecting Android malware with up to 98% accuracy under one second which is more than 100 times faster than two state-of-the-art approaches, namely MaMaDroid and Drebin. We also demonstrate the feasibility of MalScan on market-wide malware scanning by performing a statistical study on over 3 million apps. Finally, in a corpus of dataset collected from Google-Play app market, MalScan is able to identify 18 zero-day malware including malware samples that can evade detection of existing tools. © 2019 IEEE.","Wu Y.; Li X.; Zou D.; Yang W.; Zhang X.; Jin H.","62"
"Technique","Debugging","Malware Forensics: Investigating and Analyzing Malicious Code","10.1016/B978-1-59749-268-3.X0001-1","2008","Malware Forensics: Investigating and Analyzing Malicious Code covers the emerging and evolving field of ""live forensics,"" where investigators examine a computer system to collect and preserve critical live data that may be lost if the system is shut down. Unlike other forensic texts that discuss ""live forensics"" on a particular operating system, or in a generic context, this book emphasizes a live forensics and evidence collection methodology on both Windows and Linux operating systems in the context of identifying and capturing malicious code and evidence of its effect on the compromised system. Malware Forensics: Investigating and Analyzing Malicious Code also devotes extensive coverage of the burgeoning forensic field of physical and process memory analysis on both Windows and Linux platforms. This book provides clear and concise guidance as to how to forensically capture and examine physical and process memory as a key investigative step in malicious code forensics. Prior to this book, competing texts have described malicious code, accounted for its evolutionary history, and in some instances, dedicated a mere chapter or two to analyzing malicious code. Conversely, Malware Forensics: Investigating and Analyzing Malicious Code emphasizes the practical ""how-to"" aspect of malicious code investigation, giving deep coverage on the tools and techniques of conducting runtime behavioral malware analysis (such as file, registry, network and port monitoring) and static code analysis (such as file identification and profiling, strings discovery, armoring/packing detection, disassembling, debugging), and more. © 2008 Elsevier Inc. All rights reserved.","Aquilina J.M.; Casey E.; Malin C.H.","62"
"Technique","Packing Detection","Malware Forensics: Investigating and Analyzing Malicious Code","10.1016/B978-1-59749-268-3.X0001-1","2008","Malware Forensics: Investigating and Analyzing Malicious Code covers the emerging and evolving field of ""live forensics,"" where investigators examine a computer system to collect and preserve critical live data that may be lost if the system is shut down. Unlike other forensic texts that discuss ""live forensics"" on a particular operating system, or in a generic context, this book emphasizes a live forensics and evidence collection methodology on both Windows and Linux operating systems in the context of identifying and capturing malicious code and evidence of its effect on the compromised system. Malware Forensics: Investigating and Analyzing Malicious Code also devotes extensive coverage of the burgeoning forensic field of physical and process memory analysis on both Windows and Linux platforms. This book provides clear and concise guidance as to how to forensically capture and examine physical and process memory as a key investigative step in malicious code forensics. Prior to this book, competing texts have described malicious code, accounted for its evolutionary history, and in some instances, dedicated a mere chapter or two to analyzing malicious code. Conversely, Malware Forensics: Investigating and Analyzing Malicious Code emphasizes the practical ""how-to"" aspect of malicious code investigation, giving deep coverage on the tools and techniques of conducting runtime behavioral malware analysis (such as file, registry, network and port monitoring) and static code analysis (such as file identification and profiling, strings discovery, armoring/packing detection, disassembling, debugging), and more. © 2008 Elsevier Inc. All rights reserved.","Aquilina J.M.; Casey E.; Malin C.H.","62"
"Technique","Homogeneous Ensemble","A system call-based android malware detection approach with homogeneous & heterogeneous ensemble machine learning","10.1016/j.cose.2023.103277","2023","The enormous popularity of Android in the smartphone market has gained the attention of malicious actors as well. Also, considering its open system architecture, malicious attacks don't seem to wane anytime soon. Cybercriminals use deceptive attack strategies like obfuscation or dynamic code loading to evade the system. A conventional static analysis approach fails to identify such attacks. Mitigating a wide range of evasive attacks requires excogitating savvy dynamic analysis framework. This paper proposes a precise dynamic analysis approach to identify a slew of malicious attacks. The proposed method focus on behavioral analysis of malware that requires reconstructing the behavior of Android malware. The dynamic behavior features used include system calls, binders, and complex Android objects (composite behavior). For efficient malware detection and classification, a feature selection method is used to remove extraneous features. For classification, we use homogeneous and heterogeneous ensemble machine learning algorithms. The stacking approach has the best classification results with an accuracy rate of 98.08%. The rigorous experimental results show the effectiveness and superiority of the model. © 2023 Elsevier Ltd","Bhat P.; Behal S.; Dutta K.","59"
"Technique","Heterogeneous Ensemble","A system call-based android malware detection approach with homogeneous & heterogeneous ensemble machine learning","10.1016/j.cose.2023.103277","2023","The enormous popularity of Android in the smartphone market has gained the attention of malicious actors as well. Also, considering its open system architecture, malicious attacks don't seem to wane anytime soon. Cybercriminals use deceptive attack strategies like obfuscation or dynamic code loading to evade the system. A conventional static analysis approach fails to identify such attacks. Mitigating a wide range of evasive attacks requires excogitating savvy dynamic analysis framework. This paper proposes a precise dynamic analysis approach to identify a slew of malicious attacks. The proposed method focus on behavioral analysis of malware that requires reconstructing the behavior of Android malware. The dynamic behavior features used include system calls, binders, and complex Android objects (composite behavior). For efficient malware detection and classification, a feature selection method is used to remove extraneous features. For classification, we use homogeneous and heterogeneous ensemble machine learning algorithms. The stacking approach has the best classification results with an accuracy rate of 98.08%. The rigorous experimental results show the effectiveness and superiority of the model. © 2023 Elsevier Ltd","Bhat P.; Behal S.; Dutta K.","59"
"Technique","Network Traffic Analysis","NTPDroid: A Hybrid Android Malware Detector Using Network Traffic and System Permissions","10.1109/TrustCom/BigDataSE.2018.00115","2018","Two kinds of techniques, namely Static and Dynamic Analysis, have been proposed in the literature to detect Android malware. Permissions and Network Traffic are the widely used detection attributes. Malicious apps download malware at run-time and evade static permissions based detection while they can be detected by the network traffic. The malware that do not require network connectivity evade network traffic based detection which can be detected by permissions analysis. Therefore, we believe that combining the network traffic and system permissions will enhance the detection rate. Hence, in this work, we combine both the attributes and propose a hybrid detection model named NTPDroid, that extracts Network Traffic features and Permissions from the applications. To the best of our knowledge, this is the first attempt towards combining these important sources of Android malware detection. We train and test the proposed model using the FP-Growth algorithm to generate the frequent patterns consisting of traffic features and permissions. Experimental results demonstrate a detection accuracy of 94.25%, better than frequent patterns obtained independently. © 2018 IEEE.","Arora A.; Peddoju S.K.","58"
"Technique","Attention Mechanisms","Scalable Framework for Cyber Threat Situational Awareness Based on Domain Name Systems Data Analysis","10.1007/978-981-10-8476-8_6","2018","There are myriad of security solutions that have been developed to tackle the Cyber Security attacks and malicious activities in digital world. They are firewalls, intrusion detection and prevention systems, anti-virus systems, honeypots etc. Despite employing these detection measures and protection mechanisms, the number of successful attacks and the level of sophistication of these attacks keep increasing day-by-day. Also, with the advent of Internet-of-Things, the number of devices connected to Internet has risen dramatically. The inability to detect attacks on these devices are due to (1) the lack of computational power for detecting attacks, (2) the lack of interfaces that could potentially indicate a compromise on this devices and (3) the lack of the ability to interact with the system to execute diagnostic tools. This warrants newer approaches such as Tier-1 Internet Service Provider level view of attack patterns to provide situational awareness of Cyber Security threats. We investigate and explore the event data generated by the Internet protocol Domain Name Systems (DNS) for the purpose of Cyber threat situational awareness. Traditional methods such as Static and Binary analysis of Malware are sometimes inadequate to address the proliferation of Malware due to the time taken to obtain and process the individual binaries in order to generate signatures. By the time the Anti-Malware signature is available, there is a chance that a significant amount of damage might have happened. The traditional Anti-Malware systems may not identify malicious activities. However, it may be detected faster through DNS protocol by analyzing the generated event data in a timely manner. As DNS was not designed with security in mind (or suffers from vulnerabilities), we explore how the vast amount of event data generated by these systems can be leveraged to create Cyber threat situational awareness. The main contributions of the book chapter are two-fold: (1). A scalable framework that can perform web scale analysis in near real-time that provide situational awareness. (2). Detect early warning signals before large scale attacks or malware propagation occurs. We employ deep learning approach to classify and correlate malicious events that are perceived from the protocol usage. To our knowledge this is the first time, a framework that can analyze and correlate the DNS usage information at continent scale or multiple Tier-1 Internet Service Provider scale has been studied and analyzed in real-time to provide situational awareness. Merely using a commodity hardware server, the developed framework is capable of analyzing more than 2 Million events per second and it could detect the malicious activities within them in near real-time. The developed framework can be scaled out to analyze even larger volumes of network event data by adding additional computing resources. The scalability and real-time detection of malicious activities from early warning signals makes the developed framework stand out from any system of similar kind. © 2018, Springer Nature Singapore Pte Ltd.","Vinayakumar R.; Poornachandran P.; Soman K.P.","58"
"Technique","Virus Analysis","A study on malicious software behaviour analysis and detection techniques: Taxonomy, current trends and challenges","10.1016/j.future.2021.11.030","2022","There has been an increasing trend of malware release, which raises the alarm for security professionals worldwide. It is often challenging to stay on top of different types of malware and their detection techniques, which are essential, particularly for researchers and the security community. Analysing malware to get insights into what it intends to perform on the victim's system is one of the crucial steps towards malware detection. Malware analysis can be performed through static analysis, code analysis, dynamic analysis, memory analysis and hybrid analysis techniques. The next step to malware analysis is the detection model's design using malware's extracted patterns from the analysis. Machine learning and deep learning methods have drawn attention to researchers, owing to their ability to implement sophisticated malware detection models that can deal with known and unknown malicious activities. Therefore, this survey presents a comprehensive study and analysis of current malware and detection techniques using the snowball approach. It presents a comprehensive study on malware analysis testbeds, dynamic malware analysis and memory analysis, the taxonomy of malware behaviour analysis tools, datasets repositories, feature selection, machine learning and deep learning techniques. Moreover, comparisons of behaviour-based malware detection techniques have been grouped by categories of machine learning and deep learning techniques. This study also looks at various performance evaluation metrics, current research challenges in this area and possible future direction of research. © 2021 Elsevier B.V.","Maniriho P.; Mahmood A.N.; Chowdhury M.J.M.","57"
"Technique","Information Gain","IPDroid: Android malware detection using intents and permissions","10.1109/WorldS450073.2020.9210414","2020","With the increasing popularity of Android smart-phones over the years, the number of malware attacks on Android has also increased. Around 26 million malware samples were detected on the Android platform in the year 2018 and those samples pose serious threats such as financial loss and information leakage. Hence, stronger security solutions need to be developed to detect such threats. Several static Android malware detection techniques exist in the literature that analyze manifest file components such as permissions or intents. However, to the best of our knowledge, none of them have aimed to find the best set of permissions and intents combined that could give better accuracy. In this paper, we use Information Gain to rank the permissions and intents intending to find the best set of permissions and intents that can detect Android malware with better accuracy. We propose a novel algorithm to find the best set by applying several machine learning algorithms such as Random Forest, SVM, and Naive Bayes. The experimental results demonstrate that the best set consisted of 37 features, i.e., 20 intents and 17 permissions, and Random Forest classifier gave the best accuracy of 94.73%. © 2020 IEEE.","Khariwal K.; Singh J.; Arora A.","57"
"Technique","Statistical Analysis","Cross-method-based analysis and classification of malicious behavior by API calls extraction","10.3390/app9020239","2019","Data-driven public security networking and computer systems are always under threat from malicious codes known as malware; therefore, a large amount of research and development is taking place to find effective countermeasures. These countermeasures are mainly based on dynamic and statistical analysis. Because of the obfuscation techniques used by the malware authors, security researchers and the anti-virus industry are facing a colossal issue regarding the extraction of hidden payloads within packed executable extraction. Based on this understanding, we first propose a method to de-obfuscate and unpack the malware samples. Additional, cross-method-based big data analysis to dynamically and statistically extract features from malware has been proposed. The Application Programming Interface (API) call sequences that reflect the malware behavior of its code have been used to detect behavior such as network traffic, modifying a file, writing to stderr or stdout, modifying a registry value, creating a process. Furthermore, we include a similarity analysis and machine learning algorithms to profile and classify malware behaviors. The experimental results of the proposed method show that malware detection accuracy is very useful to discover potential threats and can help the decision-maker to deploy appropriate countermeasures. © 2019 by the authors.","Ndibanje B.; Kim K.H.; Kang Y.J.; Kim H.H.; Kim T.Y.; Lee H.J.","56"
"Technique","Structural Similarity Index","Mitigating adversarial evasion attacks of ransomware using ensemble learning","10.1016/j.compeleceng.2022.107903","2022","Ransomware continues to pose a significant threat to cybersecurity by extorting money from users by locking their devices and personal data. The attackers force the payment of a ransom in order to restore access to personal files. Because of the structural similarity, detection of ransomware and benign applications becomes vulnerable to evasion attacks. Ensemble learning can provide countermeasures, while attackers can use the same technique to improve the effectiveness of their respective attacks. This motivates us to investigate whether the distinct ensemble method can achieve better performance when combined with the voting-based method. This research proposes a hybrid approach that examines permissions, text, and network-based features both statically and dynamically by monitoring memory usage, system call logs, and CPU usage. Ensemble machine learning analyzers on static and dynamic features extracted from Android malware applications (ransomware and non-ransomware) are then trained in the designed model. Our experimental results show that the proposed ensemble classification and detection technique can classify unknown static and dynamic ransomware behavior to mitigate adversarial evasion attacks. © 2022 The Author(s)","Ahmed U.; Lin J.C.-W.; Srivastava G.","56"
"Technique","Particle Swarm Optimization","VMShield: Memory Introspection-Based Malware Detection to Secure Cloud-Based Services against Stealthy Attacks","10.1109/TII.2020.3048791","2021","With the rapid evolution of the industrial Internet, cloud service has emerged as a next-generation industrial standard that has the potential to revolutionize and transform the enterprise industry. In recent years, numerous enterprises have acknowledged the benefits of cloud-based service models. However, the security issues are a major concern, such as stealthy malware attacks against virtual domains. In this article, we propose an introspection based security approach, called VMShield for securing virtual domains in a cloud based service platform, which is designed to detect malware in cloud infrastructure. VMShield performs virtual memory introspection from the hypervisor (trusted-domain) to collect the run-time behavior of processes, making it impossible for the malware to evade the security tool. The use of introspection makes the proposed approach a better choice over traditional static and dynamic state-of-the-art techniques which fail to detect stealthy attacks. The VMShield extracts the system call features using Bag of n-gram approach and selects important features using the meta-heuristic algorithm, binary particle swarm optimization. Random Forest (RF) classifier is used to classify the monitored programs into benign and malign processes, making it capable of detecting the variants of malware thus, an advantage over the typical signature-matching approach. The University of New Mexico (UNM) Dataset and Bare cloud Dataset (University of California) has been used for the demonstration and validation of VMShield. The results prove that VMShield achieves a higher attack detection rate and reduced storage compared to previously proposed techniques. © 2005-2012 IEEE.","Mishra P.; Aggarwal P.; Vidyarthi A.; Singh P.; Khan B.; Alhelou H.H.; Siano P.","55"
"Technique","Chi-Square Test","A Bayesian probability model for Android malware detection","10.1016/j.icte.2021.09.003","2022","The unprecedented growth of mobile technology has generated an increase in malware and raised concerns over malware threats. Different approaches have been adopted to overcome the malware attacks yet this spread is still increasing. To combat this issue, this study proposes an Android malware detection system based on permission features using Bayesian classification. The permission features were extracted via the static analysis technique. The 10,000 samples for the judgement were obtained from AndroZoo and Drebin databases. The experiment was then conducted using two algorithms for feature selection: information gain and chi-square. The best accuracy rate of detection of permission features achieved was 91.1%. © 2021 The Author(s)","Mat S.R.T.; Razak M.F.A.; Kahar M.N.M.; Arif J.M.; Firdaus A.","51"
"Technique","Image Classification Models","Malicious URLs detection using decision tree classifiers and majority voting technique","10.2478/cait-2018-0002","2018","Researchers all over the world have provided significant and effective solutions to detect malicious URLs. Still due to the ever changing nature of cyber-attacks, there are many open issues. In this paper, we have provided an effective hybrid methodology with new features to deal with this problem. To evaluate our approach, we have used state-of-the-arts supervised decision tree learning classifications models. We have performed our experiments on the balanced dataset. The experimental results show that, by inclusion of new features all the decision tree learning classifiers work well on our labeled dataset, achieving 98- 99% detection accuracy with very low False Positive Rate (FPR) and False Negative Rate (FNR). Also we have achieved 99.29% detection accuracy with very low FPR and FNR using majority voting technique, which is better than the well-known anti-virus and anti-malware solutions. © 2001-2018 Institute of Information and Communication Technologies at Bulgarian Academy of Sciences.","Patil D.R.; Patil J.B.","48"
"Technique","Abstract Interpretation","Abstract interpretation: Past, present and future","10.1145/2603088.2603165","2014","interpretation is a theory of abstraction and constructive approximation of the mathematical structures used in the formal description of complex or infinite systems and the inference or verification of their combinatorial or undecidable properties. Developed in the late seventies, it has been since then used, implicitly or explicitly, to many aspects of computer science (such as static analysis and verification, contract inference, type inference, termination inference, model-checking, abstraction/refinement, program transformation (including watermarking, obfuscation, etc), combination of decision procedures, security, malware detection, database queries, etc) and more recently, to system biology and SAT/SMT solvers. Production-quality verification tools based on abstract interpretation are available and used in the advanced software, hardware, transportation, communication, and medical industries. The talk will consist in an introduction to the basic notions of abstract interpretation and the induced methodology for the systematic development of sound abstract interpretation-based tools. Examples of abstractions will be provided, from semantics to typing, grammars to safety, reachability to potential/definite termination, numerical to protein-protein abstractions, as well as applications (including those in industrial use) to software, hardware and system biology. This paper is a general discussion of abstract interpretation, with selected publications, which unfortunately are far from exhaustive both in the considered themes and the corresponding references. Copyright © 2014 ACM.","Cousot P.; Cousot R.","46"
"Technique","Anomaly-Based Detection","Static enforcement of web application integrity through strong typing","","2009","Security vulnerabilities continue to plague web applications, allowing attackers to access sensitive data and co-opt legitimate web sites as a hosting ground for malware. Accordingly, researchers have focused on various approaches to detecting and preventing common classes of security vulnerabilities in web applications, including anomaly-based detection mechanisms, static and dynamic analyses of server-side web application code, and client-side security policy enforcement. This paper presents a different approach to web application security. In this work, we present a web application framework that leverages existing work on strong type systems to statically enforce a separation between the structure and content of both web documents and database queries generated by a web application, and show how this approach can automatically prevent the introduction of both server-side cross-site scripting and SQL injection vulnerabilities. We present an evaluation of the framework, and demonstrate both the coverage and correctness of our sanitization functions. Finally, experimental results suggest that web applications developed using this framework perform competitively with applications developed using traditional frameworks. © 2009 Proceedings of the 18th USENIX Security Symposium. All rights reserved.","Robertson W.; Vigna G.","46"
"Technique","Template Matching","Binary function clustering using semantic hashes","10.1109/ICMLA.2012.70","2012","The ability to identify semantically-related functions, in large collections of binary executables, is important for malware detection. Intuitively, two pieces of code are similar if they have the same effect on a machine's state. Current state-of-the-art tools employ a variety of pair wise comparisons (e.g., template matching using SMT solvers, Value-Set analysis at critical program points, API call matching, etc.) However, these methods are unshakable for clustering large datasets, of size N, since they require O(No2) comparisons. In this paper, we present an alternative approach based upon 'hashing'. We propose a scheme that captures the semantics of functions as semantic hashes. Our approach treats a function as a set of features, each of which represent the input-output behavior of a basic block. Using a form of locality-sensitive hashing known as Min Hashing, functions with many common features can be quickly identified, and the complexity of clustering is reduced to O(N). Experiments on functions extracted from the CERT malware catalog indicate that we are able to cluster closely related code with a low false positive rate. © 2012 IEEE.","Jin W.; Chaki S.; Cohen C.; Gurfinkel A.; Havrilla J.; Hines C.; Narasimhan P.","46"
"Technique","AutoML for Malware","Automated machine learning for deep learning based malware detection","10.1016/j.cose.2023.103582","2024","Deep learning (DL) has proven to be effective in detecting sophisticated malware that is constantly evolving. Even though deep learning has alleviated the feature engineering problem, finding the most optimal DL model's architecture and set of hyper-parameters, remains a challenge that requires domain expertise. In addition, many of the proposed state-of-the-art models are very complex and may not be the best fit for different datasets. A promising approach, known as Automated Machine Learning (AutoML), can reduce the domain expertise required to develop custom DL models by automating the ML pipeline key components, namely hyperparameter optimization and neural architecture search (NAS). AutoML reduces the amount of human trial-and-error involved in designing DL models, and in more recent implementations can find new model architectures with relatively low computational overhead. Research on the feasibility of using AutoML for malware detection is very limited. This work provides a comprehensive analysis and insights on using AutoML for both static and online malware detection. For static, our analysis is performed on two widely used malware datasets: SOREL-20M to demonstrate efficacy on large datasets; and EMBER-2018, a smaller dataset specifically curated to hinder the performance of machine learning models. In addition, we show the effects of tuning the NAS process parameters on finding a more optimal malware detection model on these static analysis datasets. Further, we also demonstrate that AutoML is performant in online malware detection scenarios using Convolutional Neural Networks (CNNs) for cloud IaaS. We compare an AutoML technique to six existing state-of-the-art CNNs using a newly generated online malware dataset with and without other applications running in the background during malware execution. We show that the AutoML technique is more performant than the state-of-the-art CNNs with little overhead in finding the architecture. In general, our experimental results show that the performance of AutoML based static and online malware detection models are on par or even better than state-of-the-art models or hand-designed models presented in literature. © 2023 Elsevier Ltd","Brown A.; Gupta M.; Abdelsalam M.","44"
"Technique","Mutual Information","SysDroid: a dynamic ML-based android malware analyzer using system call traces","10.1007/s10586-019-03045-6","2020","Android is a popular open-source operating system highly susceptible to malware attacks. Researchers have developed machine learning models, learned from attributes extracted using static/dynamic approaches to identify malicious applications. However, such models suffer from low detection accuracy, due to the presence of noisy attributes, extracted from conventional feature selection algorithms. Hence, in this paper, a new feature selection mechanism known as selection of relevant attributes for improving locally extracted features using classical feature selectors (SAILS), is proposed. SAILS, targets on discovering prominent system calls from applications, and is built on the top of conventional feature selection methods, such as mutual information, distinguishing feature selector and Galavotti–Sebastiani–Simi. These classical attribute selection methods are used as local feature selectors. Besides, a novel global feature selection method known as, weighted feature selection is proposed. Comprehensive analysis of the proposed feature selectors, is conducted with the traditional methods. SAILS results in improved values for evaluation metrics, compared to the conventional feature selection algorithms for distinct machine learning models, developed using Logistic Regression, CART, Random Forest, XGBoost and Deep Neural Networks. Our evaluations observe accuracies ranging between 95 and 99% for dropout rate and learning rate in the range 0.1–0.8 and 0.001–0.2, respectively. Finally, the security evaluation of malware classifiers on adversarial examples are thoroughly investigated. A decline in accuracy with adversarial examples is observed. Also, SAILS recall rate of classifier subjected to such examples estimate in the range of 24.79–92.2%. However, prior to the attack, the true positive rate obtained by the classifier is reported between 95.2 and 99.79%. The results suggest that the hackers can bypass detection, by discovering the classifier blind spots, on augmenting a small number of legitimate attributes. © 2020, Springer Science+Business Media, LLC, part of Springer Nature.","Ananya A.; Aswathy A.; Amal T.R.; Swathy P.G.; Vinod P.; Mohammad S.","43"
"Technique","Adversarial Training","AIMED: Evolving malware with genetic programming to evade detection","10.1109/TrustCom/BigDataSE.2019.00040","2019","Genetic Programming (GP) has previously proved to achieve valuable results on the fields of image processing and arcade learning. Similarly, it can be used as an adversarial learning approach to evolve malware samples until static learning classifiers are no longer able to detect it. While the implementation is relatively simple compared with other Machine Learning approaches, results proved that GP can be a competitive solution to find adversarial malware examples comparing with similar methods. Thus, AIMED - Automatic Intelligent Malware Modifications to Evade Detection - was designed and imple-mented using genetic algorithms to evade malware classifiers. Our experiments suggest that the time to achieve adversarial malware samples can be reduced up to 50% compared to classic random approaches. Moreover, we implemented AIMED to generate adversarial examples using individual malware scanners as target and tested the evasive files against further classifiers from both research and industry. The generated examples achieved up to 82% of cross-evasion rates among the classifiers. © 2019 IEEE.","Castro R.L.; Schmitt C.; Dreo G.","41"
"Technique","Genetic Programming","AIMED: Evolving malware with genetic programming to evade detection","10.1109/TrustCom/BigDataSE.2019.00040","2019","Genetic Programming (GP) has previously proved to achieve valuable results on the fields of image processing and arcade learning. Similarly, it can be used as an adversarial learning approach to evolve malware samples until static learning classifiers are no longer able to detect it. While the implementation is relatively simple compared with other Machine Learning approaches, results proved that GP can be a competitive solution to find adversarial malware examples comparing with similar methods. Thus, AIMED - Automatic Intelligent Malware Modifications to Evade Detection - was designed and imple-mented using genetic algorithms to evade malware classifiers. Our experiments suggest that the time to achieve adversarial malware samples can be reduced up to 50% compared to classic random approaches. Moreover, we implemented AIMED to generate adversarial examples using individual malware scanners as target and tested the evasive files against further classifiers from both research and industry. The generated examples achieved up to 82% of cross-evasion rates among the classifiers. © 2019 IEEE.","Castro R.L.; Schmitt C.; Dreo G.","41"
"Technique","Multi-Modal Learning","Multi-scale learning based malware variant detection using spatial pyramid pooling network","10.1109/INFOCOMWKSHPS50562.2020.9162661","2020","Due to the enormous growth of the Internet, cyberspace faces ever-increasing threats. Therefore, the role of a security framework to handle malware threats is essential in the current era. Some malware files are capable of forming a network of infected systems that are exploited by the attackers to perform many cyber attacks like distributed denial of service (DDOS), Phishing, etc. Malware is also employed to steal critical information from the host systems. Apart from the traditional approaches like static and dynamic analysis that suffer from various challenges such as sensitivity to obfuscation methods and computational overhead, image-based malware detection approaches are also studied by many researchers. The existing approaches need a fixed size image input. Instead, a multi-scale learning method can be utilized to enhance the performance of the detection model. Hence, in this work, spatial pyramid pooling (SPP) based malware variant detection models are proposed and their performance is compared with the existing relevant works. The experiments reveal that the proposed technique produces an accuracy of 99% and it outperforms the existing relevant works. © 2020 IEEE.","Sriram S.; Vinayakumar R.; Sowmya V.; Alazab M.; Soman K.P.","40"
"Technique","Registry Key Extraction","Multilayer ransomware detection using grouped registry key operations, file entropy and file signature monitoring","10.3233/JCS-191346","2020","The last few years have come with a sudden rise in ransomware attack incidents, causing significant financial losses to individuals, institutions and businesses. In reaction to these attacks, ransomware detection has become an important topic for research in recent years. Currently, there are two broad categories of ransomware detection techniques: signature-based and behaviour-based analyses. On the one hand, signature-based detection, which mainly relies on a static analysis, can easily be evaded by code-obfuscation and encryption techniques. On the other hand, current behaviour-based models, which rely mainly on a dynamic analysis, face difficulties in accurately differentiating between user-triggered encryption from ransomware-triggered encryption. In the current paper, we present an upgraded behavioural ransomware detection model that reinforces the existing feature space with a new set of features based on grouped registry key operations, introducing a monitoring model based on combined file entropy and file signature. We analyze the new feature model by exploring and comparing three different linear machine learning techniques: SVM, logistic regression and random forest. The proposed approach helps achieve improved detection accuracy and provides the ability to detect novel ransomware. Furthermore, the proposed approach helps differentiate user-triggered encryption from ransomware-triggered encryption, allowing saving as many files as possible during an attack. To conduct our study, we use a new public ransomware detection dataset collected in our lab, which consists of 666 ransomware and 103 benign binaries. Our experimental results show that our proposed approach achieves relatively high accuracy in detecting both previously seen and novel ransomware samples. © 2020 - IOS Press and the authors. All rights reserved.","Jethva B.; Traoré I.; Ghaleb A.; Ganame K.; Ahmed S.","40"
"Technique","Progressive Neural Networks","Data mining methods for malware detection using instruction sequences","","2008","Malicious programs pose a serious threat to computer security. Traditional approaches using signatures to detect malicious programs pose little danger to new and unseen programs whose signatures are not available. The focus of the research is shifting fromusing signature patterns to identify a specific malicious program and/or its variants to discover the general malicious behavior in the programs. This paper presents a novel idea of automatically identifying critical instruction sequences that can classify between malicious and clean programs using data mining techniques. Based upon general statistics gathered from these instruction sequences we formulated the problem as a binary classification problem and built logistic regression, neural networks and decision tree models. Our approach showed 98.4% detectionrate on new programs whose data was not used in the model building process.","Siddiqui M.; Wang M.C.; Lee J.","38"
"Technique","Simulated Annealing","Improved call graph comparison using simulated annealing","10.1145/1982185.1982509","2011","The amount of suspicious binary executables submitted to Anti-Virus (AV) companies are in the order of tens of thousands per day. Current hash-based signature methods are easy to deceive and are inefficient for identifying known malware that have undergone minor changes. Examining malware executables using their call graphs view is a suitable approach for overcoming the weaknesses of hash-based signatures. Unfortunately, many operations on graphs are of high computational complexity. One of these is the Graph Edit Distance (GED) between pairs of graphs, which seems a natural choice for static comparison of malware. We demonstrate how Simulated Annealing can be used to approximate the graph edit distance of call graphs, while outperforming previous approaches both in execution time and solution quality. Additionally, we experiment with opcode mnemonic vectors to reduce the problem size and examine how Simulated Annealing is affected. © 2011 ACM.","Kostakis O.; Kinable J.; Mahmoudi H.; Mustonen K.","37"
"Technique","Matthews Correlation Coefficient","An Enhanced Deep Learning Neural Network for the Detection and Identification of Android Malware","10.1109/JIOT.2022.3194881","2023","Android-based mobile devices have attracted a large number of users because they are easy to use and possess a wide range of capabilities. Because of its popularity, Android has become one of the most important platforms for attackers to launch their nefarious schemes. Due to the rising sophistication of Android malware obfuscation and detection avoidance tactics, many traditional malware detection approaches have become impractical due to their limited representation capabilities. Inspired by the success of deep learning in representation learning, this article presents an effective improved deep neural network to safeguard Android devices from malicious apps called AMDI-Droid. The presented approach contains three enhancements: 1) from the ensemble classifier perspective, we propose a new architecture based on a deep neural network, where the predictive outputs obtained from all hidden layers are blended to produce a final prediction; 2) the first hidden layer learns an effective feature representation from the original data through multiple subnetworks; and 3) a loss function is formulated by combining the predictive loss of each base classifier connected to the corresponding hidden layer. The superior performance of the proposed model is verified via intensive evaluations against state-of-the-art techniques in terms of the accuracy, precision, recall, $F1$ -score, and Matthews correlation coefficient (MCC) metrics.  © 2014 IEEE.","Musikawan P.; Kongsorot Y.; You I.; So-In C.","36"
"Technique","P2P Analysis","Android inter-app communication threats and detection techniques","10.1016/j.cose.2017.07.002","2017","With the digital breakthrough, smart phones have become very essential component for many routine tasks like shopping, paying bills, transferring money, instant messaging, emails etc. Mobile devices are very attractive attack surface for cyber thieves as they hold personal details (accounts, locations, contacts, photos) and have potential capabilities for eavesdropping (with cameras/microphone, wireless connections). Android, being the most popular, is the target of malicious hackers who are trying to use Android app as a tool to break into and control device. Android malware authors use many anti-analysis techniques to hide from analysis tools. Academic researchers and commercial anti-malware companies are putting great effort to detect such malicious apps. They are making use of the combinations of static, dynamic and behavior-based analysis techniques. Despite of all the security mechanisms provided by Android, apps can carry out malicious actions through inter-app communication. One such inter-app communication threats is collusion. In collusion, malicious functionality is divided across multiple apps. Each participating app accomplishes its part and communicate information to another app through Inter Component Communication (ICC). ICC does not require any special permissions. Also there is no compulsion to inform user about the communication. Each participating app needs to request a minimal set of privileges, which may make it appear benign to current state-of-the-art techniques that analyze one app at a time. There are many surveys on app analysis techniques in Android; however they focus on single-app analysis. This survey highlights several inter-app communication threats, in particular collusion among multiple-apps. In this paper, we present Android vulnerabilities that may be exploited for carrying privilege escalation attacks, privacy leakage and collusion attacks. We cover the existing threat analysis, scenarios, and a detailed comparison of tools for intra- and inter-app analysis. To the best of our knowledge this is the first survey on inter-app communication threats, app collusion and state-of-the-art detection tools in Android. © 2017 Elsevier Ltd","Bhandari S.; Jaballah W.B.; Jain V.; Laxmi V.; Zemmari A.; Gaur M.S.; Mosbah M.; Conti M.","35"
"Technique","HTTP Analysis","Analysis of Anomaly detection of Malware using KNN","10.1109/ICIPTM54933.2022.9754044","2022","Computer malware development has grown rapidly in the last decade. Nowadays, malicious software (malware) is widely used by cybercriminals to attack computer systems. Malware detection techniques are most effective when they extract discriminative features from the malware, various static and dynamic tools can be used to set up analysis environments. Using traditional methods to classify malware may have worked in the past, but using machine learning algorithms may be more effective in the future as they are designed to keep up with the complexity and speed of malware development. A comprehensive study of anomaly detection of malware based on machine learning algorithms is presented here. This paper also explains about the implementation of k-nearest neighbors of anomaly detection and discusses the challenges associated with implementing malware classifiers. In the final section, we discuss future directives regarding developing an effective malware detection system. © 2022 IEEE.","Rani S.; Tripathi K.; Arora Y.; Kumar A.","33"
"Technique","Process Hollowing","Malware Analysis and Detection Engineering: A Comprehensive Approach to Detect and Analyze Modern Malware","10.1007/978-1-4842-6193-4","2020","Discover how the internals of malware work and how you can analyze and detect it. You will learn not only how to analyze and reverse malware, but also how to classify and categorize it, giving you insight into the intent of the malware. Malware Analysis and Detection Engineering is a one-stop guide to malware analysis that simplifies the topic by teaching you undocumented tricks used by analysts in the industry. You will be able to extend your expertise to analyze and reverse the challenges that malicious software throws at you. The book starts with an introduction to malware analysis and reverse engineering to provide insight on the different types of malware and also the terminology used in the anti-malware industry. You will know how to set up an isolated lab environment to safely execute and analyze malware. You will learn about malware packing, code injection, and process hollowing plus how to analyze, reverse, classify, and categorize malware using static and dynamic tools. You will be able to automate your malware analysis process by exploring detection tools to modify and trace malware programs, including sandboxes, IDS/IPS, anti-virus, and Windows binary instrumentation. The book provides comprehensive content in combination with hands-on exercises to help you dig into the details of malware dissection, giving you the confidence to tackle malware that enters your environment. What You Will Learn Analyze, dissect, reverse engineer, and classify malware Effectively handle malware with custom packers and compilers Unpack complex malware to locate vital malware components and decipher their intent Use various static and dynamic malware analysis tools Leverage the internals of various detection engineering tools to improve your workflow Write Snort rules and learn to use them with Suricata IDS Who This Book Is For Security professionals, malware analysts, SOC analysts, incident responders, detection engineers, reverse engineers, and network security engineers ""This book is a beast! If you're looking to master the ever-widening field of malware analysis, look no further. This is the definitive guide for you."" Pedram Amini, CTO Inquest; Founder Open RCE.org and Zero Day Initiative. © 2020 by Abhijit Mohanta, Anoop Saldanha.","Mohanta A.; Saldanha A.","33"
"Technique","Ensemble Methods","BigRC-EML: big-data based ransomware classification using ensemble machine learning","10.1007/s10586-022-03569-4","2022","Ransomware is a subcategory of malware whose specific goal is to hold the victim’s data by using encryption techniques until a ransom is paid. With mainstream usage of the Windows platform, Windows-based ransomware has become a great threat. With the rise of new malware categories and the huge volume of big data emerging, it has now become difficult to identify ransomware from benign applications. At the same time, ransomware detection and classification play a crucial role in computer security. Therefore, it is essential to analyze the behavior of ransomware samples to know their malicious nature that differs from clean applications. Due to the shortcomings of static analysis, we propose BigRC-EML for ransomware detection and classification based on several static and dynamic features. We use ensemble machine learning methods on big data to enhance the accuracy of the ransomware detection. Although, many machine learning models have been used in the detection of ransomware, yet, the evaluation of ensemble methods has not been investigated. Moreover, a new feature selection approach based on Principle Component Analysis (PCA) is presented to decrease the dimensions of the features. The datasets employed in the study comprised of two types: the first one is dynamic that comprises of 582 ransomware and 942 clean applications while the second one is hybrid that comprises of 500 applications. The classification models used are SVM, Random Forests, KNN, XGBoost, and Neural Network. Our experimental results show that Neural Network outperforms the other models and that BigRC-EML achieves an accuracy of 98% as well as can work under all types of data i.e. balanced, imbalanced, static, and dynamic. The experimental results successfully validate the effectiveness of the proposed approach by improving the classification accuracy of new ransomware. © 2022, The Author(s), under exclusive licence to Springer Science+Business Media, LLC, part of Springer Nature.","Aurangzeb S.; Anwar H.; Naeem M.A.; Aleem M.","32"
"Technique","Virtual Machine Detection","Measuring virtual machine detection in malware using DSD tracer","10.1007/s11416-008-0096-y","2010","Most methods for detecting that a process is running inside a virtual environment such as VMWare or Microsoft Virtual PC are well known and the paper briefly discusses the most common methods measured during the research. The measurements are conducted over a representative set of malicious files, with special regards to packer code. The results are broken down with respect to malware category, families and various commercial and non-commercial packers and presented in a graphical and tabular format. The extent of virtual machine detection problem is estimated based on the results of the research. The main subject of the paper is measurement of actual usage of Virtual machine detection methods in current malware. The research uses DSD Tracer, a dynamic-static tracing system based on an instrumented Bochs virtual machine. The system employs tracing to produce traces of execution that can be scripted or used as a basis for disassembly/emulation in IDA Pro when combined with a customised version of IDAEmul (emulator). The paper gives an overview of design and usage of DSD Tracer. © 2008 Springer-Verlag France.","Lau B.; Svajcer V.","32"
"Technique","Linear Discriminant Analysis","Static, dynamic and intrinsic features based android malware detection using machine learning","10.1007/978-3-030-29407-6_4","2020","Android is one of the smartest and advanced operating systems in the mobile phone market in the current era. The number of smartphone users based on the Android platform is rising swiftly which increases its popularity all over the world. The rising fame of this technology attracts everyone toward it and invites more number of hackers in Android platform. These hackers spread malicious application in the market and lead to the high chance of data leakage, financial loss and other damages. Therefore, malware detection techniques should be implemented to detect the malware smartly. Different techniques have been proposed using permission-based or system call-based approaches. In this paper, a hybrid approach of static, dynamic and intrinsic features based malware detection using k-nearest neighbors (k-NN) and logistic regression machine learning algorithms. The intrinsic feature contribution has also been evaluated. Furthermore, linear discriminant analysis technique has been implemented to evaluate the impact on the detection rate. The calculation uses a publicly available dataset of Androtrack. Based on the estimation results, both the k-nearest neighbors (k-NN) and logistic regression classifiers produced accuracy of 97.5%. © 2020, Springer Nature Switzerland AG.","Mantoo B.A.; Khurana S.S.","30"
"Technique","Ransomware Analysis","AI-Powered Ransomware Detection Framework","10.1109/SSCI47803.2020.9308387","2020","Ransomware attacks are taking advantage of the ongoing pandemics and attacking the vulnerable systems in business, health sector, education, insurance, bank, and government sectors. Various approaches have been proposed to combat ransomware, but the dynamic nature of malware writers often bypasses the security checkpoints. There are commercial tools available in the market for ransomware analysis and detection, but their performance is questionable. This paper aims at proposing an AI-based ransomware detection framework and designing a detection tool (AIRaD) using a combination of both static and dynamic malware analysis techniques. Dynamic binary instrumentation is done using PIN tool, function call trace is analyzed leveraging Cuckoo sandbox and Ghidra. Features extracted at DLL, function call, and assembly level are processed with NLP, association rule mining techniques and fed to different machine learning classifiers. Support vector machine and Adaboost with J48 algorithms achieved the highest accuracy of 99.54% with 0.005 false-positive rates for a multi-level combined term frequency approach.  © 2020 IEEE.","Poudyal S.; Dasgupta D.","30"
"Technique","Analysis Tool Detection","HADM: Hybrid Analysis for Detection of Malware","10.1007/978-3-319-56991-8_51","2018","Android is the most popular mobile operating system with a market share of over 80% [1]. Due to its popularity and also its open source nature, Android is now the platform most targeted by malware, creating an urgent need for effective defense mechanisms to protect Android-enabled devices. In this paper, we propose a novel Android malware classification method called HADM, Hybrid Analysis for Detection of Malware. We first extract static and dynamic information, and convert this information into vector-based representations. It has been shown that combining advanced features derived by deep learning with the original features provides significant gains [2]. Therefore, we feed both the original dynamic and static feature vector sets to a Deep Neural Network (DNN) which outputs a new set of features. These features are then concatenated with the original features to construct DNN vector sets. Different kernels are then applied onto the DNN vector sets. We also convert the dynamic information into graph-based representations and apply graph kernels onto the graph sets. Learning results from various vector and graph feature sets are combined using hierarchical Multiple Kernel Learning (MKL) [3] to build a final hybrid classifier. © Springer International Publishing AG 2018.","Xu L.; Zhang D.; Jayasena N.; Cavazos J.","30"
"Technique","Shape Analysis","Android malware detection: An eigenspace analysis approach","10.1109/SAI.2015.7237302","2015","The battle to mitigate Android malware has become more critical with the emergence of new strains incorporating increasingly sophisticated evasion techniques, in turn necessitating more advanced detection capabilities. Hence, in this paper we propose and evaluate a machine learning based approach based on eigenspace analysis for Android malware detection using features derived from static analysis characterization of Android applications. Empirical evaluation with a dataset of real malware and benign samples show that detection rate of over 96% with a very low false positive rate is achievable using the proposed method. © 2015 IEEE.","Yerima S.Y.; Sezer S.; Muttik I.","29"
"Technique","Sparse Analysis","Android malware detection: An eigenspace analysis approach","10.1109/SAI.2015.7237302","2015","The battle to mitigate Android malware has become more critical with the emergence of new strains incorporating increasingly sophisticated evasion techniques, in turn necessitating more advanced detection capabilities. Hence, in this paper we propose and evaluate a machine learning based approach based on eigenspace analysis for Android malware detection using features derived from static analysis characterization of Android applications. Empirical evaluation with a dataset of real malware and benign samples show that detection rate of over 96% with a very low false positive rate is achievable using the proposed method. © 2015 IEEE.","Yerima S.Y.; Sezer S.; Muttik I.","29"
"Technique","LIME Explanation","MsDroid: Identifying Malicious Snippets for Android Malware Detection","10.1109/TDSC.2022.3168285","2023","Machine learning has shown promise for improving the accuracy of Android malware detection in the literature. However, it is challenging to (1) stay robust towards real-world scenarios and (2) provide interpretable explanations for experts to analyse. In this article, we propose MsDroid, an Android malware detection system that makes decisions by identifying malicious snippets with interpretable explanations. We mimic a common practice of security analysts, i.e., filtering APIs before looking through each method, to focus on local snippets around sensitive APIs instead of the whole program. Each snippet is represented with a graph encoding both code attributes and domain knowledge and then classified by Graph Neural Network (GNN). The local perspective helps the GNN classifier to concentrate on code highly correlated with malicious behaviors, and the information contained in graphs benefit in better understanding of the behaviors. Hence, MsDroid is more robust and interpretable in nature. To identify malicious snippets, we present a semi-supervised learning approach that only requires app labeling. The key insight is that malicious snippets only exist in malwares and appear at least once in a malware. To make malicious snippets less opaque, we design an explanation mechanism to show the importance of control flows and to retrieve similarly implemented snippets from known malwares. A comprehensive comparison with 5 baseline methods is conducted on a dataset of more than 81K apps in 3 real-world scenarios, including zero-day, evolution, and obfuscation. The experimental results show that MsDroid is more robust than state-of-the-art systems in all cases, with 5.37% to 49.52% advantage in F1-score. Besides, we demonstrate that the provided explanations are effective and illustrate how the explanations facilitate malware analysis. © 2004-2012 IEEE.","He Y.; Li Y.; Wu L.; Yang Z.; Ren K.; Qin Z.","28"
"Technique","Histogram Equalization","Malware-on-the-Brain: Illuminating Malware Byte Codes With Images for Malware Classification","10.1109/TC.2022.3160357","2023","Malware is a piece of software that was written with the intent of doing harm to data, devices, or people. Since a number of new malware variants can be generated by reusing codes, malware attacks can be easily launched and thus become common in recent years, incurring huge losses in businesses, governments, financial institutes, health providers, etc. To defeat these attacks, malware classification is employed, which plays an essential role in anti-virus products. However, existing works that employ either static analysis or dynamic analysis have major weaknesses in complicated reverse engineering and time-consuming tasks. In this paper, we propose a visualized malware classification framework called VisMal, which provides highly efficient categorization with acceptable accuracy. VisMal converts malware samples into images and then applies a contrast-limited adaptive histogram equalization algorithm to enhance the similarity between malware image regions in the same family. We provided a proof-of-concept implementation and carried out an extensive evaluation to verify the performance of our framework. The evaluation results indicate that VisMal can classify a malware sample within 4.0 ms and have an average accuracy of 96.0%. Moreover, VisMal provides security engineers with a simple visualization approach to further validate its performance.  © 1968-2012 IEEE.","Zhong F.; Chen Z.; Xu M.; Zhang G.; Yu D.; Cheng X.","28"
"Technique","Deep Ensembles","Deep-Ensemble and Multifaceted Behavioral Malware Variant Detection Model","10.1109/ACCESS.2022.3168794","2022","Every day, hundreds of thousands of new malware programs are developed and spread worldwide in cyberspace. Most of these malware programs are malware variants such as polymorphic and metamorphic malware, which are created from older versions of malware and able to change their structures and function flows to circumvent security solutions. The accuracy of malware variant detection is a crucial challenge. Many existing malware variant detections use static features extracted from the physical structure of malware file, such as opcodes and function flows. Unfortunately, the static features are subject to obfuscation and code shelling using simple obfuscation techniques. Although a malware variant can change its structure and function flows, it is widely believed that the malware variant cannot hide its malicious behavioral patterns during the runtime. Accordingly, dynamic, or behavioral analysis-based features were suggested by many studies to detect malware variants accurately. However, most of these studies are solely dependent on application-programmable interface calls (or API calls), which is not enough to accurately distinguish between malware and benign due to API-based obfuscation techniques. Therefore, a malware variant detection model that combines different behavioral activities can improve detection accuracy while reducing the false-negative rate. To this end, this study proposed a Deep-Ensemble and Multifaceted Behavioral Malware Variant Detection Model using Sequential Deep Learning and Extreme Gradient Boosting Techniques. Different behavioral features were extracted from the dynamic analysis environment. Then, a feature extraction algorithm that can automatically extract effective representative patterns has been designed and developed to extract the hidden representative features of the malware variants using a sequential deep learning model. These features have been fed into a developed extreme gradient boosting-based classifier for decision making. Extensive experiments have been carried out to validate the proposed scheme. The results were compared to the other related techniques in the field. The results show that the proposed model is reliable, as it improves the detection rate while reducing the false-negative rate.  © 2013 IEEE.","Al-Hashmi A.A.; Ghaleb F.A.; Al-Marghilani A.; Yahya A.E.; Ebad S.A.; Muhammad Saqib M.S.; Darem A.A.","28"
"Technique","Opcode Frequency Analysis","An OpCODE sequences analysis method for unknown malware detection","10.1145/3318236.3318255","2019","One of the main challenges in security today is defending against unknown malware attacks which have the potential to harm a computer or network. Hence, detecting malware has become one of the most important challenges for the security of computer systems. The known malware detection methods based on the appearance of opcode sequences has to construct a matrix from programs of different architectures to extract high-level features. In order to resolve high dimensional inputs vector and differences assembly instruction, this paper proposes a novel method for detecting static characteristics of 32-bit and 64-bit malicious Portable Executable (PE) Windows files by opcode sequences analysis. By compute the frequency of occurrence of each opcode sequence and distinguishing different types of 32-bit and 64-bit PE files, the proposed method shows promising results with less complexity in comparison with previous studies, which is beneficial to train machine learning model such as k-nearest neighbor (KNN) and back-propagation neural network (BP). Our method is evaluated on more than 20,000 samples, and experimental results show that our system can effectively detect and classify unknown malware. © 2019 Association for Computing Machinery.","Sun Z.; Rao Z.; Chen J.; Xu R.; He D.; Yang H.; Liu J.","27"
"Technique","Bagging Techniques","Imaging and evaluating the memory access for malware","10.1016/j.fsidi.2019.200903","2020","Malware analysis is a forensic process. After infection and the damage represented itself with the full scale, then the analysis of the attack, the structure of the executable and the aim of the malware can be discovered. These discoveries are converted into analysis reports and malware signatures and shared among antivirus databases and threat intelligence exchange platforms. This highly valuable information is then utilized in the detection mechanisms to prevent further dissemination and infections of malware. The types of analysis of the malware sample in this process can be grouped into two categories: static analysis and dynamic analysis. In static analysis, the executable file is reverted to the source code through disassemblers and reverse engineering software and analyzed whereas dynamic analysis includes running the sample in an isolated environment and analyzing its behavior. Both static and dynamic analysis have limitations such as packing, obfuscation, dead code insertion, sandbox detection, and anti-debugging techniques. Memory operations, on the other hand, are not possible to hide by these limitations and inevitable for any software since the inventions of the computational models. Therefore, in this research, memory operations and access patterns for the malicious acts are examined, and a contribution of a novel approach for extracting of memory access images is presented. In addition to extraction, methods of how these images can be used for detection and comparison is introduced through an image comparison technique. © 2020 Elsevier Ltd","Yücel Ç.; Koltuksuz A.","27"
"Technique","Image Segmentation","Data-Driven Malware Detection for 6G Networks: A Survey From the Perspective of Continuous Learning and Explainability via Visualisation","10.1109/OJVT.2022.3219898","2023","5G is inherently prone to security vulnerabilities. We witness that many today's networks contain 5G security flaws due to their reliance on the existing 4G network core. A lack of security standards for 5G IoT devices means network breaches and malware threats might run uncontrolled. The future 6G network is predicted to be implemented with artificial intelligence-driven communication via machine learning, enhanced edge computing, post-quantum cryptography and so forth. With the activation of edge computing, the computing power available at supercomputing servers is to be integrated directly into the devices at the entry point of a network in a distributed manner (e.g., antennas, routers, IoT sensors, etc). This feature brings an equal quality of service everywhere including remote regions (a.k.a service everywhere) which will trigger an exponential growth of associated applications. In this intricate environment, malware attacks are becoming more challenging to detect. This paper thus reviews the theoretical and experimental data-driven malware detection literature, in the large-scale data-intensive field, relating to: (1) continuous learning, including new concepts in multi-domain to multi-target learning and the challenges associated with unseen/unknown data, imbalance data and data scarcity, and (2) new explainability via visualisation concepts with a multi-labelling approach which allows identifying malware by their recipes while improving the interpretability of its decision process.  © 2020 IEEE.","Uysal D.T.; Yoo P.D.; Taha K.","27"
"Technique","Memory Allocation Analysis","Imaging and evaluating the memory access for malware","10.1016/j.fsidi.2019.200903","2020","Malware analysis is a forensic process. After infection and the damage represented itself with the full scale, then the analysis of the attack, the structure of the executable and the aim of the malware can be discovered. These discoveries are converted into analysis reports and malware signatures and shared among antivirus databases and threat intelligence exchange platforms. This highly valuable information is then utilized in the detection mechanisms to prevent further dissemination and infections of malware. The types of analysis of the malware sample in this process can be grouped into two categories: static analysis and dynamic analysis. In static analysis, the executable file is reverted to the source code through disassemblers and reverse engineering software and analyzed whereas dynamic analysis includes running the sample in an isolated environment and analyzing its behavior. Both static and dynamic analysis have limitations such as packing, obfuscation, dead code insertion, sandbox detection, and anti-debugging techniques. Memory operations, on the other hand, are not possible to hide by these limitations and inevitable for any software since the inventions of the computational models. Therefore, in this research, memory operations and access patterns for the malicious acts are examined, and a contribution of a novel approach for extracting of memory access images is presented. In addition to extraction, methods of how these images can be used for detection and comparison is introduced through an image comparison technique. © 2020 Elsevier Ltd","Yücel Ç.; Koltuksuz A.","27"
"Technique","Macro Analysis","Longitudinal performance analysis of machine learning based Android malware detectors","10.1109/CyberSecPODS.2019.8885384","2019","This paper presents a longitudinal study of the performance of machine learning classifiers for Android malware detection. The study is undertaken using features extracted from Android applications first seen between 2012 and 2016. The aim is to investigate the extent of performance decay over time for various machine learning classifiers trained with static features extracted from date-labelled benign and malware application sets. Using date-labelled apps allows for true mimicking of zero-day testing, thus providing a more realistic view of performance than the conventional methods of evaluation that do not take date of appearance into account. In this study, all the investigated machine learning classifiers showed progressive diminishing performance when tested on sets of samples from a later time period. Overall, it was found that false positive rate (misclassifying benign samples as malicious) increased more substantially compared to the fall in True Positive rate (correct classification of malicious apps) when older models were tested on newer app samples. © 2019 IEEE.","Yerima S.Y.; Khan S.","25"
"Technique","Heuristic Analysis","Analysis of Fileless Malware and its Evasive Behavior","10.1109/ICCWS48432.2020.9292376","2020","Malware is any software that causes harm to the user information, computer systems or network. Modern computing and internet systems are facing increase in malware threats from the internet. It is observed that different malware follows the same patterns in their structure with minimal alterations. The type of threats has evolved, from file-based malware to fileless malware, such kind of threats are also known as Advance Volatile Threat (AVT). Fileless malware is complex and evasive, exploiting pre-installed trusted programs to infiltrate information with its malicious intent. Fileless malware is designed to run in system memory with a very small footprint, leaving no artifacts on physical hard drives. Traditional antivirus signatures and heuristic analysis are unable to detect this kind of malware due to its sophisticated and evasive nature. This paper provides information relating to detection, mitigation and analysis for such kind of threat.  © 2020 IEEE.","Afreen A.; Aslam M.; Ahmed S.","24"
"Technique","Random Forest Classification","A multi-tiered feature selection model for android malware detection based on Feature discrimination and Information Gain","10.1016/j.jksuci.2021.11.004","2022","With the rise in popularity and its open system architecture, Android has become vulnerable to malicious attacks. There are several malware detection approaches available to fortify the Android operating system from such attacks. These malware detectors classify target applications based on the patterns found in the features present in the Android applications. As the analytics data continues to grow, it negatively impacts the Android defense mechanism. A large number of irrelevant features has become the performance bottleneck of the detection mechanism. This paper presents a multi-tiered feature selection model, which can discover relevant and significant features for improving the accuracy of malware detection approaches. The proposed method applies five machine learning classification techniques to the selected feature set. This work presents the Optimal Static Feature Set (OSFS) and, Most Important Features (MIFs) discovered with each machine learning approach. Rigorous testing and analysis show that Random Forest classification achieves the highest Accuracy rate of 96.28%. © 2021 The Authors","Bhat P.; Dutta K.","24"
"Technique","Email Analysis","Multimodal information fusion for android malware detection using lazy learning","10.1007/s11042-021-10749-8","2022","Android has a large number of users that are accumulating with each passing day. Security of the Android ecosystem is a major concern for these users with the provision of quality services. In this paper, multimodal analysis of malware apps has been presented. We exploit static, dynamic, and visual features of apps to predict the malicious apps using information fusion. The proposed study applies case-based reasoning; for catalyzing the process of training and validation over renowned datasets with enriched feature-set. Our proposed semi-supervised technique uses benign and malicious apps to predict and classify malware. The prediction process uses a hybrid analysis of malware. The proposed approach, due to the efficient and adaptive nature of CBR, outperforms prevalent approaches. Our approach has an accuracy of 95% and reduced rate of false negative rate and a better precision metric, which beat the state-of-the-art techniques. © 2021, The Author(s), under exclusive licence to Springer Science+Business Media, LLC, part of Springer Nature.","Qaisar Z.H.; Li R.","23"
"Technique","Graph Neural Networks","JStrong: Malicious JavaScript detection based on code semantic representation and graph neural network","10.1016/j.cose.2022.102715","2022","Web development technology has experienced significant progress. The creation of JavaScript has highly enriched the interactive ability of the client. However, the attacker uses the dynamic characteristics of the JavaScript language to embed malicious code into web pages to achieve the purpose of smuggling, redirection, and so on. Traditional methods based on static feature detection are therefore difficult to detect malicious code after confusion, and the method based on dynamic analysis is inefficient. To meet these challenges, this paper proposes a static detection model JStrong based on graph neural network. The model first generates an abstract syntax tree from the JavaScript source code, and then adds data flow and control flow information into the program dependency graph. In addition, we embed the nodes and edges of the graph into the feature vector and fully learn the features of the whole graph through the graph neural network. We take advantage of a real-world dataset collected from the top website and GitHub to evaluate JStrong and compare it to the state-of-the-art method. Experimental results show that JStrong achieves near-perfect classification performance and is superior to the state-of-the-art method. © 2022 Elsevier Ltd","Fang Y.; Huang C.; Zeng M.; Zhao Z.; Huang C.","23"
"Technique","Payload Extraction","Obfuscation-resilient executable payload extraction from packed malware","","2021","Over the past two decades, packed malware is always a veritable challenge to security analysts. Not only is determining the end of the unpacking increasingly difficult, but also advanced packers embed a variety of anti-analysis tricks to impede reverse engineering. As malware's APIs provide rich information about malicious behavior, one common anti-analysis strategy is API obfuscation, which removes the metadata of imported APIs from malware's PE header and complicates API name resolution from API callsites. In this way, even when security analysts obtain the unpacked code, a disassembler still fails to recognize imported API names, and the unpacked code cannot be successfully executed. Recently, generic binary unpacking has made breakthrough progress with noticeable performance improvement. However, reconstructing unpacked code's import tables, which is vital for further malware static/dynamic analyses, has largely been overlooked. Existing approaches are far from mature: they either can be easily evaded by various API obfuscation schemes (e.g., stolen code), or suffer from incomplete API coverage. In this paper, we aim to achieve the ultimate goal of Windows malware unpacking: recovering an executable malware program from the packed and obfuscated binary code. Based on the process memory when the original entry point (OEP) is reached, we develop a hardware-assisted tool, API-Xray, to reconstruct import tables. Import table reconstruction is challenging enough in its own right. Our core technique, API Micro Execution, explores all possible API callsites and executes them without knowing API argument values. At the same time, we take advantage of hardware tracing via Intel Branch Trace Store and NX bit to resolve API names and finally rebuild import tables. Compared with the previous work, API-Xray has a better resistance against various API obfuscation schemes and more coverage on resolved Windows API names. Since July 2019, we have tested API-Xray in practice to assist security professionals in malware analysis: We have successfully rebuilt 155,811 executable malware programs and substantially improved the detection rate for 7,514 unknown or new malware variants. © 2021 by The USENIX Association. All rights reserved.","Cheng B.; Ming J.; Leal E.A.; Zhang H.; Fu J.; Peng G.; Marion J.-Y.","23"
"Technique","Multi-View Learning","Clustering-Aided Multi-View Classification: A Case Study on Android Malware Detection","10.1007/s10844-020-00598-6","2020","Recognizing malware before its installation plays a crucial role in keeping an android device safe. In this paper we describe a supervised method that is able to analyse multiple information (e.g. permissions, api calls and network addresses) that can be retrieved through a broad static analysis of android applications. In particular, we propose a novel multi-view machine learning approach to malware detection, which couples knowledge extracted via both clustering and classification. In an assessment, we evaluate the effectiveness of the proposed method using benchmark Android applications and established machine learning metrics. © 2020, Springer Science+Business Media, LLC, part of Springer Nature.","Appice A.; Andresini G.; Malerba D.","23"
"Technique","Independent Component Analysis","Automatic extraction and integration of behavioural indicators of malware for protection of cyber–physical networks","10.1016/j.future.2019.07.005","2019","Conventional isolated cyber–physical systems (CPS) based industrial networks are increasingly being integrated with modern corporate information technology (IT) network. Therefore, cyber-attacks on CPS are increasing enormously and this could result in a massive damage to the machines themselves or the humans who interact with them. Malware has been one of the major source of attacks and threats to the CPS networks and computer systems. The high growth and the variety of malware variants such as Internet worms, Trojan horses and computer viruses requires periodic update of the database. Traditional malware system fulfil this requirement by manual effort from the experts though signature generation. However manual update could result into potential drawback for integrity and availability of services provided by CPS systems and protection in real-time. Machine learning technique is a natural choice to address the malware challenge for CPSs, since it can easily model and discover the underlying patterns from large-scale data sets. This paper introduces intelligent models and algorithms that can extract behavioural features and inherent attack patterns from the existing malware data, then integrates the behavioural indicators into the detection system. The main contribution of the paper is that the proposed models do not require periodic manual effort to update the database of the detection engine. We have introduced semi-supervised models using unsupervised learning including independent component analysis (ICA), global K-means clustering and multivariate exponentially weighted moving average (MEWMA) for extracting behavioural indicators which clusters the malware. Then the extracted geometric information of the clusters and hoteling T2 of the behavioural indicators from MEWMA are incorporated into the database of existing detection system which are used with support vector machine (SVM) based supervised system. This enables the detection system to update the dynamic behavioural patterns of new malware automatically. The performances of developed semi-supervised models have been verified using malware data for both static and dynamic characteristics of malware. The summary of our experimental results demonstrate that the combination of unsupervised and supervised learning can successfully extracts behavioural indicators automatically from new malware. Performance comparison from experimental results summarize that the semi-supervised models can detect more accurately than the existing supervised models where accuracies are increased up to 100% for SVM and random forest based semi-supervised models. © 2019 Elsevier B.V.","Huda S.; Abawajy J.; Al-Rubaie B.; Pan L.; Hassan M.M.","23"
"Technique","Hierarchical Clustering","Based on multi-features and clustering ensemble method for automatic malware categorization","10.1109/Trustcom/BigDataSE/ICESS.2017.222","2017","Automatic malware categorization plays an important role in combating the current large volume of malware and aiding the corresponding forensics. Generally, there are lot of sample information could be extracted with the static tools and dynamic sandbox for malware analysis. Combine these obtained features effectively for further analysis would provides us a better understanding. On the other hand, most current works on malware analysis are based on single category of machine learning algorithm to categorize samples. However, different clustering algorithms have their own strengths and weaknesses. And then, how to combine the merits of the multiple categories of features and algorithms to further improve the analysis result is very critical. In this paper, we propose a novel scalable malware analysis framework to exploit the complementary nature of different features and algorithms to optimally integrate their results. By using the concept of clustering ensemble, our system combines partitions from individual category of feature and algorithm to obtain better quality and robustness. Our system composed of the following three parts: (1) extract multiple categories of static and dynamic features; (2) use the k-means and hierarchical clustering algorithms to construct the base clustering; (3) proposed an efficient method based on mixture model clustering ensemble to conduct an effective clustering analysis. We have evaluated our method on two malware datasets, namely the Microsoft malware dataset and our own malware dataset which contained 10868 and 53760 samples respectively. Our experiment results show that our method could categorize malware with better quality and robustness. Also, our method has certain advantages in the system run time and memory consumption compared with the state-of-The art malware analysis works. © 2017 IEEE.","Zhang Y.; Rong C.; Huang Q.; Wu Y.; Yang Z.; Jiang J.","21"
"Technique","API Hooking","StaDART: Addressing the problem of dynamic code updates in the security analysis of android applications","10.1016/j.jss.2019.07.088","2020","Dynamic code update techniques (Android Studio – support for dynamic delivery), such as dynamic class loading and reflection, enable Android apps to extend their functionality at runtime. At the same time, these techniques are misused by malware developers to transform a seemingly benign app into a malware, once installed on a real device. Among the corpus of evasive techniques used in modern real-world malware, evasive usage of dynamic code updates plays a key role. First, we demonstrate the ineffectiveness of existing tools to analyze apps in the presence of dynamic code updates using our test apps, i.e., Reflection-Bench and InboxArchiver. Second, we present StaDART, combining static and dynamic analysis of Android apps to reveal the concealed behavior of malware. StaDART performs dynamic code interposition using a vtable tampering technique for API hooking to avoid modifications to the Android framework. Furthermore, we integrate it with a triggering solution, DroidBot, to make it more scalable and fully automated. We present our evaluation results with a dataset of 2000 real world apps; containing 1000 legitimate apps and 1000 malware samples. The evaluation results with this dataset and Reflection-Bench show that StaDART reveals suspicious behavior that is otherwise hidden to static analysis tools. © 2019","Ahmad M.; Costamagna V.; Crispo B.; Bergadano F.; Zhauniarovich Y.","20"
"Technique","Debugger Detection","Malware analysis with multiple features","10.1109/UKSim.2012.40","2012","Malware analysis process is being categorized into static analysis and dynamic analysis. Both static and dynamic analysis have their own strengths and weaknesses. In this paper, we present a tool written in Python programming language called as pingaji, which could assist the work of malware analyst to get the static features of malware. pingaji contains several modules - Application Programming Interface (API) calls extractor, binary entropy information, anti virtual machine and anti debugger detector and XOR encrypted strings decrypt or. pingaji was developed in order to assist our work in getting malware features. pingaji is focusing on ripping Microsoft Windows executable binaries' malicious features. © 2012 IEEE.","Zabidi M.N.A.; Maarof M.A.; Zainal A.","19"
"Technique","Ant Colony Optimization","Swarm Optimization and Machine Learning Applied to PE Malware Detection towards Cyber Threat Intelligence","10.3390/electronics12020342","2023","Cyber threat intelligence includes analysis of applications and their metadata for potential threats. Static malware detection of Windows executable files can be done through the analysis of Portable Executable (PE) application file headers. Benchmark datasets are available with PE file attributes; however, there is scope for updating the data and also to research novel attribute reduction and performance improvement algorithms. The existing benchmark dataset contains non-PE header attributes, and few ignored attributes. In this work, a critical analysis was conducted to develop a new dataset called SOMLAP (Swarm Optimization and Machine Learning Applied to PE Malware Detection) with a value addition to the existing benchmark dataset. The SOMLAP data contains 51,409 samples that include both benign and malware files, with a total of 108 pure PE file header attributes. Further research was carried out to improve the performance of the Malware Detection System (MDS) by feature minimization using swarm optimization tools, viz., Ant Colony Optimization (ACO), Cuckoo Search Optimization (CSO), and Grey Wolf Optimization (GWO) wrapped with machine learning tools. The dataset was evaluated, and an accuracy of 99.37% with an optimized set of 12 features (ACO) proves the efficiency of the dataset, its attributes, and the algorithms used. © 2023 by the authors.","Kattamuri S.J.; Penmatsa R.K.V.; Chakravarty S.; Madabathula V.S.P.","18"
"Technique","DNS Analysis","Swarm Optimization and Machine Learning Applied to PE Malware Detection towards Cyber Threat Intelligence","10.3390/electronics12020342","2023","Cyber threat intelligence includes analysis of applications and their metadata for potential threats. Static malware detection of Windows executable files can be done through the analysis of Portable Executable (PE) application file headers. Benchmark datasets are available with PE file attributes; however, there is scope for updating the data and also to research novel attribute reduction and performance improvement algorithms. The existing benchmark dataset contains non-PE header attributes, and few ignored attributes. In this work, a critical analysis was conducted to develop a new dataset called SOMLAP (Swarm Optimization and Machine Learning Applied to PE Malware Detection) with a value addition to the existing benchmark dataset. The SOMLAP data contains 51,409 samples that include both benign and malware files, with a total of 108 pure PE file header attributes. Further research was carried out to improve the performance of the Malware Detection System (MDS) by feature minimization using swarm optimization tools, viz., Ant Colony Optimization (ACO), Cuckoo Search Optimization (CSO), and Grey Wolf Optimization (GWO) wrapped with machine learning tools. The dataset was evaluated, and an accuracy of 99.37% with an optimized set of 12 features (ACO) proves the efficiency of the dataset, its attributes, and the algorithms used. © 2023 by the authors.","Kattamuri S.J.; Penmatsa R.K.V.; Chakravarty S.; Madabathula V.S.P.","18"
"Technique","Timing Analysis","Evaluating analysis tools for android apps: Status Quo and robustness against obfuscation","10.1145/2857705.2857737","2016","The recent past has shown that Android smartphones became the most popular target for malware authors. Malware families offer a variety of features that allow, among the others, to steal arbitrary data and to cause significant monetary losses. This circumstances led to the development of many different analysis methods that are aimed to assess the absence of potential harm or malicious behavior in mobile apps. In return, malware authors devised more sophisticated methods to write mobile malware that attempt to thwart such analyses. In this work, we briefly describe assumptions analysis tools rely on to detect malicious content and behavior. We then present results of a new obfuscation framework that aims to break such assumptions, thus modifying Android apps to avoid them being analyzed by the targeted systems. We use our framework to evaluate the robustness of static and dynamic analysis systems for Android apps against such transformations.","Hoffmann J.; Rytilahti T.; Maiorca D.; Winandy M.; Giacinto G.; Holz T.","18"
"Technique","Area Under Curve","Identification of Significant Permissions for Efficient Android Malware Detection","10.1007/978-3-030-68737-3_3","2021","Since Google unveiled Android OS for smartphones, malware are thriving with 3Vs, i.e. volume, velocity and variety. A recent report indicates that one out of every five business/industry mobile application leaks sensitive personal data. Traditional signature/heuristic based malware detection systems are unable to cope up with current malware challenges and thus threaten the Android ecosystem. Therefore recently researchers have started exploring machine learning and deep learning based malware detection systems. In this paper, we performed a comprehensive feature analysis to identify the significant Android permissions and propose an efficient Android malware detection system using machine learning and deep neural network. We constructed a set of 16 permissions (8 % of the total set) derived from variance threshold, auto-encoders, and principal component analysis to build a malware detection engine which consumes less train and test time without significant compromise on the model accuracy. Our experimental results show that the Android malware detection model based on the random forest classifier is most balanced and achieves the highest area under curve score of 97.7 %, which is better than the current state-of-art systems. We also observed that deep neural networks attain comparable accuracy to the baseline results but with a massive computational penalty. © 2021, ICST Institute for Computer Sciences, Social Informatics and Telecommunications Engineering.","Rathore H.; Sahay S.K.; Rajvanshi R.; Sewak M.","18"
"Technique","Generative Adversarial Networks","Defending IT systems against intelligent malware","10.1109/DESSERT.2018.8409169","2018","The increasing amount of malware variants seen in the wild is causing problems for Antivirus Software vendors, unable to keep up by creating signatures for each. The methods used to develop a signature, static and dynamic analysis, have various limitations. Machine learning has been used by Antivirus vendors to detect malware based on the information gathered from the analysis process. However, adversarial examples can cause machine learning algorithms to miss-classify new data. In this paper we describe a method for malware analysis by converting malware binaries to images and then preparing those images for training within a Generative Adversarial Network. These unsupervised deep neural networks are not susceptible to adversarial examples. The conversion to images from malware binaries should be faster than using dynamic analysis and it would still be possible to link malware families together. Using the Generative Adversarial Network, malware detection could be much more effective and reliable. © 2018 IEEE.","Kargaard J.; Drange T.; Kor A.-L.; Twafik H.; Butterfield E.","17"
"Technique","Adaptive Learning","A Real-Time and Adaptive-Learning Malware Detection Method Based on API-Pair Graph","10.1109/ACCESS.2020.3038453","2020","The detection of malware have developed for many years, and the appearance of new machine learning and deep learning techniques have improved the effect of detectors. However, most of current researches have focused on the general features of malware and ignored the development of the malware themselves, so that the features could be useless with the time passed as well as the advance of malware techniques. Besides, the detection methods based on machine learning are mainly static detection and analysis, while the study of real-time detection of malware is relatively rare. In this article, we proposed a new model that could detect malware real-time in principle and learn new features adaptively. Firstly, a new data structure of API-Pair was adopted, and the constructed data was trained with Maximum Entropy model, which could satisfy the goal of weighting and adaptive learning. Then a clustering was practised to filter relatively unrelated and confusing features. Moreover, a detector based on Lont Short Term Memory Network (LSTM) was devised to achieve the goal of real-time detection. Finally, a series of experiments were designed to verify our method. The experimental results showed that our model could obtain the highest accuracy of 99.07% in general tests and keep the accuracies above 97% with the development of malware; the results also proved the feasibility of our model in real-time detection through the simulation experiment, and robustness against a typical adversarial attack.  © 2013 IEEE.","Yang S.; Li S.; Chen W.; Liu Y.","16"
"Technique","Differential Privacy","AI-powered malware detection with Differential Privacy for zero trust security in Internet of Things networks","10.1016/j.adhoc.2024.103523","2024","The widespread usage of Android-powered devices in the Internet of Things (IoT) makes them susceptible to evolving cybersecurity threats. Most healthcare devices in IoT networks, such as smart watches, smart thermometers, biosensors, and more, are powered by the Android operating system, where preserving the privacy of user-sensitive data is of utmost importance. Detecting Android malware is thus vital for protecting sensitive information and ensuring the reliability of IoT networks. This article focuses on AI-enabled Android malware detection for improving zero trust security in IoT networks, which requires Android applications to be verified and authenticated before providing access to network resources. The zero trust security model requires strict identity verification for every entity trying to access resources on a private network, regardless of whether they are inside or outside the network perimeter. Our proposed solution, DP-RFECV-FNN, an innovative approach to Android malware detection that employs Differential Privacy (DP) within a Feedforward Neural Network (FNN) designed for IoT networks under the zero trust model. By integrating DP, we ensure the confidentiality of data during the detection process, setting a new standard for privacy in cybersecurity solutions. By combining the strengths of DP and zero trust security with the powerful learning capacity of the FNN, DP-RFECV-FNN demonstrates the ability to identify both known and novel malware types and achieves higher accuracy while maintaining strict privacy controls compared with recent papers. DP-RFECV-FNN achieves an accuracy ranging from 97.78% to 99.21% while utilizing static features and 93.49% to 94.36% for dynamic features of Android applications to detect whether it is malware or benign. These results are achieved under varying privacy budgets, ranging from ϵ=0.1 to ϵ=1.0. Furthermore, our proposed feature selection pipeline enables us to outperform the state-of-the-art by significantly reducing the number of selected features and training time while improving accuracy. To the best of our knowledge, this is the first work to categorize Android malware based on both static and dynamic features through a privacy-preserving neural network model. © 2024 The Authors","Nawshin F.; Unal D.; Hammoudeh M.; Suganthan P.N.","15"
"Technique","System Call Monitoring","HM3alD: Polymorphic malware detection using program behavior-aware hidden Markov model","10.3390/app8071044","2018","Malware have been tremendously growing in recent years. Most malware use obfuscation techniques for evasion and hiding purposes, but they preserve the functionality and malicious behavior of original code. Although most research work has been mainly focused on program static analysis, some recent contributions have used program behavior analysis to detect malware at run-time. Extracting the behavior of polymorphic malware is one of the major issues that affects the detection result. In this paper, we propose HM3alD, a novel program behavior-aware hidden Markov model for polymorphic malware detection. The main idea is to use an effective clustering scheme to partition the program behavior of malware instances and then apply a novel hidden Markov model (called program behavior-aware HMM) on each cluster to train the corresponding behavior. Low-level program behavior, OS-level system call sequence, is mapped to high-level action sequence and used as transition triggers across states in program behavior-aware HMM topology. Experimental results show that HM3alD outperforms all current dynamic and static malware detection methods, especially in term of FAR, while using a large dataset of 6349 malware. © 2018 by the authors.","Tajoddin A.; Jalili S.","15"
"Technique","Discrete Cosine Transform","Malware detection using frequency domain-based image visualization and deep learning","","2021","We propose a novel method to detect and visualize malware through image classification. The executable binaries are represented as grayscale images obtained from the count of N-grams (N=2) of bytes in the Discrete Cosine Transform (DCT) domain and a neural network is trained for malware detection. A shallow neural network is trained for classification, and its accuracy is compared with deep-network architectures such as ResNet that are trained using transfer learning. Neither dis-assembly nor behavioral analysis of malware is required for these methods. Motivated by the visual similarity of these images for different malware families, we compare our deep neural network models with standard image features like GIST descriptors to evaluate the performance. A joint feature measure is proposed to combine different features using error analysis to get an accurate ensemble model for improved classification performance. A new dataset called MaleX1 which contains around 1 million malware and benign Windows executable samples is created for large-scale malware detection and classification experiments. Experimental results are quite promising with 96% binary classification accuracy on MaleX. The proposed model is also able to generalize well on larger unseen malware samples and the results compare favorably with state-of-the-art static analysis-based malware detection algorithms. © 2021 IEEE Computer Society. All rights reserved.","Mohammed T.M.; Nataraj L.; Chikkagoudar S.; Chandrasekaran S.; Manjunath B.S.","14"
"Technique","Optical Character Recognition","An app based on static analysis for android ransomware","10.1109/ICCCNT.2017.8204124","2017","Ransomware is the most threatening malware which expects payment at the stake of your personal files/folders. Ransomware has been found in Windows, IOS, Android and even in Linux too. And none of them was able to protect its users from its threat. Many detection techniques and analysis tools have been developed to detect ransomware virus. According to the Verizon named American company's report, ransomware hit financial services, healthcare and public sector the most. Verizon also found that small and medium-sized businesses are now the main target of cyber criminals. So, in this paper, we have provided an extension to static text analysis so as to make it powerful. Ransomware attack its users by either by either blocking the screen or by encrypting user data. We try and provide leverage to the user by providing hardware interaction that allows the users to uninstall harmful applications by pressing the power button multiple times. To overcome data encryption, we allow the user to select the directories that contain important data, and as soon as new file is added to any of these directories, we upload the file on an online server, thus enabling the user to maintain a safe copy of all important data. © 2017 IEEE.","Kanwal M.; Thakur S.; Lashkari R.","14"
"Technique","Boosting Algorithms","Detection of ransomware in static analysis by using Gradient Tree Boosting Algorithm","10.1109/ICSCAN49426.2020.9262315","2020","Ransomware is the type of malware that encrypts the user data which cannot be accessed then the ransom demands to pay for decrypting key. Many organizations lose their data and money; lose their reputation as small organizations. So, detect the ransomware which affected the system before execution. Later, detection of ransomware was done by the decision tree algorithm method. In this work, we use a static detection of ransomware which extracts the features to classify whether it is ransomware, malware or benign before execution on the system by using gradient tree boosting algorithm. In the previous method, the detection of ransomware by using a decision tree method which achieved 98.98% with a detection rate of 0.2%, which ends with False Positive Rate (FPR) and the result is efficient for small dataset. Our proposed method the detection of the ransomware achieves 99.997% with a detection rate of 0.1% false positive rate again it results with less than 0.01% false positive rates with 98.3% of detection rate based on the 700,000 training and 400,000 testing samples from the dataset. Our method achieves more accuracy than the later algorithm while increasing the dataset for detecting the ransomware and also to identify the type of malware. © 2020 IEEE.","Martina Jose Mary M.; Usharani S.; Manju Bala P.; Sandhya S.G.","13"
"Technique","Cross-Validation Techniques","Malware detection by text and data mining","10.1109/ICCIC.2013.6724229","2013","Cyber frauds are a major security threat to the banking industry worldwide. Malware is one of the manifestations of cyber frauds. Malware authors use Application Programming Interface (API) calls to perpetrate these crimes. In this paper, we propose a static analysis method to detect Malware based on API call sequences using text and data mining in tandem. We analyzed the dataset available at CSMINING group. First, we employed text mining to extract features from the dataset consisting a series of API calls. Further, mutual information is invoked for feature selection. Then, we resorted to over-sampling to balance the data set. Finally, we employed various data mining techniques such as Decision Tree (DT), Multi Layer Perceptron (MLP), Support Vector Machine (SVM), Probabilistic Neural Network (PNN) and Group Method for Data Handling (GMDH). We also applied One Class SVM (OCSVM). Throughout the paper, we used 10-fold cross validation technique for testing the techniques. We observed that SVM and OCSVM achieved 100% sensitivity after balancing the dataset. © 2013 IEEE.","Sundarkumar G.G.; Ravi V.","13"
"Technique","Instruction Overlapping","A new instruction overlapping technique for anti-disassembly and obfuscation of x86 binaries","10.1109/WATeR.2013.6707878","2013","The problem of correctly recovering assembly instructions from a binary has received much attention and both malware and license validation code often relies on various anti-disassembly techniques in order to complicate analysis. One well-known anti-disassembly technique is to use overlapping code such that the disassembler starts decoding from an incorrect byte, but still recovers valid code. The actual code which is supposed to be executed is instead hidden inside a decoy instruction, and is overlapped with the disassembled code. We propose and investigate a new novel anti-disassembly method that allows for exceptional flexibility in the hidden instructions, while at the same time providing a disassembled main path that is executable. This allows the approach to be very efficient against static linear sweep disassembly, but also to be more difficult to detect using dynamic analysis methods. The idea is to utilize highly redundant instructions, e.g., multibyte no-operation instructions, and embed the hidden code in the configurable portions of those instructions. By carefully selecting wrapping instructions, providing overlaps, the hidden execution path can be crafted with great flexibility. We also provide a detection-algorithm, together with testing results, for testing software such that the hidden execution path can be identified. © 2013 IEEE.","Jamthagen C.; Lantz P.; Hell M.","13"
"Technique","Header Analysis","A heuristics-based static analysis approach for detecting packed PE binaries","10.14257/ijsia.2013.7.5.24","2013","Malware authors evade the signature based detection by packing the original malware using custom packers. In this paper, we present a static heuristics based approach for the detection of packed executables. We present 1) the PE heuristics considered for analysis and taxonomy of heuristics; 2) a method for computing the score using power distance based on weights and risks assigned to the defined heuristics; and 3) classification of packed executable based on the threshold obtained with the training data set, and the results achieved with the test data set. The experimental results show that our approach has a high detection rate of 99.82% with a low false positive rate of 2.22%. We also bring out difficulties in detecting packed DLL, CLR and Debug mode executables via header analysis. © 2013 SERSC.","Arora R.; Singh A.; Pareek H.; Edara U.R.","12"
"Technique","Adversarial Patches","MalPatch: Evading DNN-Based Malware Detection with Adversarial Patches","10.1109/TIFS.2023.3333567","2024","Static analysis is a crucial protection layer that enables modern antivirus systems to address the rampant proliferation of malware. These systems are increasingly relying on deep neural networks (DNNs) to automatically extract reliable features and achieve outstanding detection accuracy. Since DNNs are known to be vulnerable to adversarial examples, several studies have proposed practical evasion attacks to generate adversarial perturbations that can evade malware detectors. These attacks, however, require specific designs for the given input sample, prohibiting them from large-scale deployment. Therefore, it is more practical to generate sample-agnostic perturbations that do not involve recalculations regardless of the input malware sample. To this end, we leverage an adversarial patch attack, which is a special type of adversarial attack that dose not know the sample being modified during the attack construction process. In particular, we propose a new adversarial attack against malware detection systems called MalPatch. It locates the nonfunctional part of malware for adversarial patch injection to protect its executability while generating adversarial examples based on different strategies. The generated patch can be injected into any malware sample, fooling the detector into classifying it as benign. Experimental results demonstrate that MalPatch is effective under different attack settings. In the white-box setting, MalPatch achieves 69%-78% success rates against DNN detectors based on raw byte features and 47%-96% success rates against four grayscale detectors based on image features. In the black-box setting, the success rates of MalPatch against the same models reach 54%-74% and 27%-42%, respectively. We conclude by discussing several of its potential countermeasures and the generality of our approach.  © 2005-2012 IEEE.","Zhan D.; Duan Y.; Hu Y.; Li W.; Guo S.; Pan Z.","12"
"Technique","Universal Adversarial Perturbations","MalPatch: Evading DNN-Based Malware Detection with Adversarial Patches","10.1109/TIFS.2023.3333567","2024","Static analysis is a crucial protection layer that enables modern antivirus systems to address the rampant proliferation of malware. These systems are increasingly relying on deep neural networks (DNNs) to automatically extract reliable features and achieve outstanding detection accuracy. Since DNNs are known to be vulnerable to adversarial examples, several studies have proposed practical evasion attacks to generate adversarial perturbations that can evade malware detectors. These attacks, however, require specific designs for the given input sample, prohibiting them from large-scale deployment. Therefore, it is more practical to generate sample-agnostic perturbations that do not involve recalculations regardless of the input malware sample. To this end, we leverage an adversarial patch attack, which is a special type of adversarial attack that dose not know the sample being modified during the attack construction process. In particular, we propose a new adversarial attack against malware detection systems called MalPatch. It locates the nonfunctional part of malware for adversarial patch injection to protect its executability while generating adversarial examples based on different strategies. The generated patch can be injected into any malware sample, fooling the detector into classifying it as benign. Experimental results demonstrate that MalPatch is effective under different attack settings. In the white-box setting, MalPatch achieves 69%-78% success rates against DNN detectors based on raw byte features and 47%-96% success rates against four grayscale detectors based on image features. In the black-box setting, the success rates of MalPatch against the same models reach 54%-74% and 27%-42%, respectively. We conclude by discussing several of its potential countermeasures and the generality of our approach.  © 2005-2012 IEEE.","Zhan D.; Duan Y.; Hu Y.; Li W.; Guo S.; Pan Z.","12"
"Technique","Dropper Analysis","CSCdroid: Accurately Detect Android Malware via Contribution-Level-Based System Call Categorization","10.1109/Trustcom/BigDataSE/ICESS.2017.237","2017","The detection of the malicious application or malware on Android platform is a very concerned issue. Many studies have demonstrated their effect from static property analysis and dynamic analysis. However, their accuracy and efficacy still cannot satisfy the demand. In this paper, we propose CSCdroid, an accurate malware detection approach for Android via contribution-level-based system call (SC) categorization. Different from existing works, which use all SCs to construct feature vectors so as to determine the security of applications, CSCdroid first introduces a concept named contribution to quantitatively evaluate SCs relevance for malware identification. Based on the contribution level, CSCdroid can categorize SCs into two types, determinate SCs and normal SCs. Eventually, CSCdroid builds a Markov chain by replacing all normal SCs with one specific SC in the SC sequence. Then it constructs the target feature vector from the probability matrix and use the Support Vector Machine (SVM) to detect Android malware. Such way can effectively reduce the state number of Markov chains, and cut down the dimension of the feature vectors into the SVM classifier. Our evaluation confirms our approach possesses the malware detection ability with a high accuracy rate. © 2017 IEEE.","Zhang S.; Xiao X.","12"
"Technique","Exponential Moving Average","HARD-Lite: A Lightweight Hardware Anomaly Realtime Detection Framework Targeting Ransomware","10.1109/TCSI.2023.3299532","2023","Recent years have witnessed a surge in ransomware attacks. Especially, many new variants of ransomware have continued to emerge, employing more advanced techniques to distribute the payload while avoiding detection. This renders the traditional static ransomware detection mechanism ineffective. In this paper, we present our Hardware Anomaly Realtime Detection-Lightweight (HARD-Lite) framework that employs a semi-supervised machine learning method to detect ransomware using low-level hardware information. By using an LSTM network with a weighted majority voting ensemble and exponential moving average, we are able to take into consideration the temporal aspect of hardware-level information formed as time series in order to detect deviation in system behavior, thereby increasing the detection accuracy whilst reducing the number of false positives. Testing against various ransomware families across multiple hardware platforms, HARD-Lite has demonstrated remarkable effectiveness, detecting all cases tested successfully. What's more, by having a separate machine for the classifier while the user machine is under monitoring, it allows the classifier machine to enforce strict protection and offload the heavy-weight classification work, without impeding the functionality of the user machine. This hierarchical design enables good scalability for the proposed framework.  © 2004-2012 IEEE.","Woralert C.; Liu C.; Blasingame Z.","11"
"Technique","Byte Histogram","A Wolf in Sheep's Clothing: Query-Free Evasion Attacks Against Machine Learning-Based Malware Detectors with Generative Adversarial Networks","10.1109/EuroSPW59978.2023.00052","2023","Malware detectors based on machine learning (ML) have been shown to be susceptible to adversarial malware examples. However, current methods to generate adversarial malware examples still have their limits. They either rely on detailed model information (gradient-based attacks), or on detailed outputs of the model - such as class probabilities (score-based attacks), neither of which are available in real-world scenarios. Alternatively, adversarial examples might be crafted using only the label assigned by the detector (label-based attack) to train a substitute network or an agent using reinforcement learning. Nonetheless, label-based attacks might require querying a black-box system from a small number to thousands of times, depending on the approach, which might not be feasible against malware detectors.This work presents a novel query-free approach to craft adversarial malware examples to evade ML-based malware detectors. To this end, we have devised a GAN-based framework to generate adversarial malware examples that look similar to benign executables in the feature space. To demonstrate the suitability of our approach we have applied the GAN-based attack to three common types of features usually employed by static ML-based malware detectors: (1) Byte histogram features, (2) API-based features, and (3) String-based features. Results show that our model-agnostic approach performs on par with MalGAN, while generating more realistic adversarial malware examples without requiring any query to the malware detectors. Furthermore, we have tested the generated adversarial examples against state-of-the-art multimodal and deep learning malware detectors, showing a decrease in detection performance, as well as a decrease in the average number of detections by the antimalware engines in VirusTotal.  © 2023 IEEE.","Gibert D.; Planes J.; Le Q.; Zizzo G.","11"
"Technique","Data Augmentation","Data Augmented Hardware Trojan Detection Using Label Spreading Algorithm Based Transductive Learning for Edge Computing-Assisted IoT Devices","10.1109/ACCESS.2022.3209705","2022","IoT devices handle a large amount of information including sensitive information pertaining to the deployed application. Such a scenario, makes IoT devices susceptible to various attacks. In addition to securing IoT devices, it is equally important to secure communication among devices and with the outside world. RS232 is a common communication protocol used in IoT and embedded devices. Hence ensuring, Trojan detection in RS232 plays a major role in providing secured communication among edge assisted IoT devices. The inclusion of malicious circuits known as hardware Trojans can occur at any stage of the IC design and manufacturing. Existing pre-silicon detection schemes with static features is limited by the number of features that are learned by the detection scheme. In contrast, machine learning allows enhanced Trojan space exploration. Existing machine learning-based Trojan detection consists primarily of supervised algorithms that rely on high-quality labeled datasets for efficient Trojan detection. Unsupervised methods, on the other hand, underperform due to limited training data and severe imbalance within the available data. To handle such a situation, a semi-supervised hardware Trojan detection has been proposed. In this work, permutation importance guided principal component analysis, correlation aware data augmentation, and hyper-parameter optimization using genetic algorithm aid in optimal dataset and model generation. Pseudo label generation using semi-supervised schemes is utilized to handle partially labeled datasets. For the Trust-HUB benchmarks, the proposed methodology achieves an average of 88.48% true positive rate and 95.77% true negative rate which, clearly indicates the effectiveness and feasibility of semi-supervised hardware Trojan detection.  © 2013 IEEE.","Sankar V.; Nirmala Devi M.; Jayakumar M.","10"
"Technique","Hyperparameter Optimization","Data Augmented Hardware Trojan Detection Using Label Spreading Algorithm Based Transductive Learning for Edge Computing-Assisted IoT Devices","10.1109/ACCESS.2022.3209705","2022","IoT devices handle a large amount of information including sensitive information pertaining to the deployed application. Such a scenario, makes IoT devices susceptible to various attacks. In addition to securing IoT devices, it is equally important to secure communication among devices and with the outside world. RS232 is a common communication protocol used in IoT and embedded devices. Hence ensuring, Trojan detection in RS232 plays a major role in providing secured communication among edge assisted IoT devices. The inclusion of malicious circuits known as hardware Trojans can occur at any stage of the IC design and manufacturing. Existing pre-silicon detection schemes with static features is limited by the number of features that are learned by the detection scheme. In contrast, machine learning allows enhanced Trojan space exploration. Existing machine learning-based Trojan detection consists primarily of supervised algorithms that rely on high-quality labeled datasets for efficient Trojan detection. Unsupervised methods, on the other hand, underperform due to limited training data and severe imbalance within the available data. To handle such a situation, a semi-supervised hardware Trojan detection has been proposed. In this work, permutation importance guided principal component analysis, correlation aware data augmentation, and hyper-parameter optimization using genetic algorithm aid in optimal dataset and model generation. Pseudo label generation using semi-supervised schemes is utilized to handle partially labeled datasets. For the Trust-HUB benchmarks, the proposed methodology achieves an average of 88.48% true positive rate and 95.77% true negative rate which, clearly indicates the effectiveness and feasibility of semi-supervised hardware Trojan detection.  © 2013 IEEE.","Sankar V.; Nirmala Devi M.; Jayakumar M.","10"
"Technique","Behavioral Clustering","FITS: Inferring Intermediate Taint Sources for Effective Vulnerability Analysis of IoT Device Firmware","10.1145/3623278.3624759","2023","Finding vulnerabilities in firmware is vital as any firmware vulnerability may lead to cyberattacks to the physical IoT devices. Taint analysis is one promising technique for finding firmware vulnerabilities thanks to its high coverage and scalability. However, sizable closed-source firmware makes it extremely difficult to analyze the complete data-flow paths from taint sources (i.e., interface library functions such as recv) to sinks. We observe that certain custom functions in binaries can be used as intermediate taint sources (ITSs). Compared to interface library functions, using custom functions as taint sources can significantly shorten the data-flow paths for analysis. However, inferring ITSs is challenging due to the complexity and customization of firmware. Moreover, the debugging information and symbol table of binaries in firmware are stripped; therefore, prior techniques of inferring taint sources are not applicable except laborious manual analysis. To this end, this paper proposes FITS to automatically infer ITSs. Specifically, FITS represents each function with a novel behavioral feature representation that captures the static and dynamic properties of the function, and ranks custom functions as taint sources through behavioral clustering and similarity scoring. We evaluated FITS on 59 large, real-world firmware samples. The inference results of FITS are accurate: at least one of top-3 ranked custom functions can be used as an ITS with 89% precision. ITSs helped Karonte find 15 more bugs and helped the static taint engine find 339 more bugs. More importantly, 21 bugs have been awarded CVE IDs and rated high severity with media coverage. © 2023 Copyright held by the owner/author(s).","Liu P.; Zheng Y.; Sun C.; Qin C.; Fang D.; Liu M.; Sun L.","10"
"Technique","Gabor Filtering","Adaptive Mitigation of Multi-Virus Propagation: A Passivity-Based Approach","10.1109/TCNS.2016.2633791","2018","Malware propagation poses a growing threat to networked systems, such as computer networks and cyberphysical systems. Current approaches to defend against malware propagation are based on patching or filtering susceptible nodes at a fixed rate. When the propagation dynamics are unknown or uncertain, however, the static rate that is chosen may be either insufficient to remove all viruses or too high, incurring additional performance cost. In this paper, we formulate adaptive strategies for mitigating multiple malware epidemics when the propagation rate is unknown, using patching and filtering-based defense mechanisms. In order to identify conditions for ensuring that all viruses are asymptotically removed, we show that the malware propagation, patching, and filtering processes can be modeled as coupled passive dynamical systems. We prove that the patching rate required to remove all viruses is bounded above by the passivity index of the coupled system, and formulate the problem of selecting the minimum-cost mitigation strategy. Our results are evaluated through a numerical study. © 2014 IEEE.","Lee P.; Clark A.; Alomair B.; Bushnell L.; Poovendran R.","10"
"Technique","Binary Visualization","Ransomware Clustering and Classification using Similarity Matrix","10.1109/MIUCC55081.2022.9781655","2022","Ransomwares are amongst the most dangerous malwares that face and affect any business by restricting data access or leaking sensitive information over the internet. Ransomwares binary analysis can provide a way to define the relationships between distinct features employed by ransomware families. Malware classification and clustering systems offer an effective malware indexing with search functionalities, similarity checking, samples classification and clustering. Most studies focus on the static and dynamic features extraction, machine and deep learning or visualization techniques used to minimize the false positive detections. However, there are gaps in malware tracking and classification. In this paper, we focus on the static features extraction and calculate the absolute Jaccard Index. The main objective is to identify the suitable static feature to decrease the ransomware sample detection time and the accuracy of ransomware's family tracking and clustering using similarity matrix. © 2022 IEEE.","Yamany B.; Azer M.A.; Abdelbaki N.","9"
"Technique","Rowhammer Mitigation","BreakHammer: Enhancing RowHammer Mitigations by Carefully Throttling Suspect Threads","10.1109/MICRO61859.2024.00072","2024","RowHammer is a major read disturbance mechanism in DRAM where repeatedly accessing (hammering) a row of DRAM cells (DRAM row) induces bitflips in other physically nearby DRAM rows. RowHammer solutions perform preventive actions (e.g., refresh neighbor rows of the hammered row) that mitigate such bitflips to preserve memory isolation, a fundamental building block of security and privacy in modern computing systems. However, preventive actions induce non-negligible memory request latency and system performance overheads as they interfere with memory requests. As shrinking technology node size over DRAM chip generations exacerbates RowHammer, the overheads of RowHammer solutions become prohibitively expensive. As a result, a malicious program can effectively hog the memory system and deny service to benign applications by causing many RowHammer-preventive actions. In this work, we tackle the performance overheads of RowHammer solutions by tracking and throttling the generators of memory accesses that trigger RowHammer solutions. To this end, we propose BreakHammer. BreakHammer 1) observes the time-consuming RowHammer-preventive actions of existing RowHammer mitigation mechanisms, 2) identifies hardware threads that trigger many of these actions, and 3) reduces the memory bandwidth usage of each identified thread. As such, BreakHammer significantly reduces the number of RowHammer-preventive actions performed, thereby improving 1) system performance and DRAM energy, and 2) reducing the maximum slowdown induced on a benign application, with near-zero area overhead. Our extensive evaluations demonstrate that BreakHammer effectively reduces the negative performance, energy, and fairness effects of eight RowHammer mitigation mechanisms. To foster further research we open-source our BreakHammer implementation and scripts at https://github.com/CMU-SAFARI/BreakHammer. © 2024 IEEE.","Canpolat O.; Yaglikci A.G.; Olgun A.; Yuksel I.E.; Tugrul Y.C.; Kanellopoulos K.; Ergin O.; Mutlu O.","8"
"Technique","Privilege Analysis","Mobile app security analysis with the MAVeriC static analysis","","2014","The success of the mobile application model is mostly due to the ease with which new applications are uploaded by developers, distributed through the application markets (e.g. Google Play), and installed by users. Yet, the very same model is cause of serious security concerns, since users have no or little means to ascertain the trustworthiness of the applications they install on their devices. Such concerns grow up when dealing with professional scenarios like the use of mobile devices within organisations. To protect their customers, Poste Italiane has defined the Mobile Application Verification Cluster (MAVeriC), a process for the systematic security analysis of third-party mobile apps leveraging their online services (e.g. home banking, parcel tracking). MAVeriC is an ongoing project that will be completed in the next few years. At the core of the MAVeriC project lies the Static Analysis Module (SAM), a toolkit that supports automatic static analysis of mobile applications by automating a number of operations including reverse engineering, privilege analysis and automatic verification of security properties. In this paper we present the SAM that has been fully developed and tested. We introduce the functionalities of SAM through a demonstration of the platform applied to real Android applications. © 2014 Innovative Information Science and Technology Research Group. All rights reserved.","Armando A.; Bocci G.; Chiarelli G.; Costa G.; De Maglie G.; Mammoliti R.; Merlo A.","7"
"Technique","Bayesian Optimization","Bayesian Hyper-Parameter Optimisation for Malware Detection","10.3390/electronics11101640","2022","Malware detection is a major security concern and has been the subject of a great deal of research and development. Machine learning is a natural technology for addressing malware detection, and many researchers have investigated its use. However, the performance of machine learning algorithms often depends significantly on parametric choices, so the question arises as to what parameter choices are optimal. In this paper, we investigate how best to tune the parameters of machine learning algorithms—a process generally known as hyper-parameter optimisation—in the context of malware detection. We examine the effects of some simple (model-free) ways of parameter tuning together with a state-of-the-art Bayesian model-building approach. Our work is carried out using Ember, a major published malware benchmark dataset of Windows Portable Execution metadata samples, and a smaller dataset from kaggle.com (also comprising Windows Portable Execution metadata). We demonstrate that optimal parameter choices may differ significantly from default choices and argue that hyper-parameter optimisation should be adopted as a ‘formal outer loop’ in the research and development of malware detection systems. We also argue that doing so is essential for the development of the discipline since it facilitates a fair comparison of competing machine learning algorithms applied to the malware detection problem. © 2022 by the authors. Licensee MDPI, Basel, Switzerland.","Algorain F.T.; Clark J.A.","6"
"Technique","Domain Adaptation","Unsupervised Domain Adaptation for Static Malware Detection based on Gradient Boosting Trees","10.1145/3459637.3482400","2021","Static malware detection is important for protection against malware by allowing for malicious files to be detected prior to execution. It is also especially suitable for machine learning-based approaches. Recently, gradient boosting decision trees (GBDT) models, e.g., LightGBM (a popular implementation of GBDT), have shown outstanding performance for malware detection. However, as malware programs are known to evolve rapidly, malware classification models trained on the (source) training data often fail to generalize to the target domain, i.e., the deployed environment. To handle the underlying data distribution drifts, unsupervised domain adaptation techniques have been proposed for machine learning models including deep learning models. However, unsupervised domain adaptation for GBDT has remained challenging. In this paper, we adapt the adversarial learning framework for unsupervised domain adaptation to enable GBDT learn domain-invariant features and alleviate performance degradation in the target domain. In addition, to fully exploit the unlabelled target data, we merge them into the training dataset after pseudo-labelling. We propose a new weighting scheme integrated into GBDT for sampling instances in each boosting round to reduce the negative impact of wrongly labelled target instances. Experiments on two large malware datasets demonstrate the superiority of our proposed method. © 2021 Owner/Author.","Qi P.; Wang W.; Zhu L.; Ng S.K.","6"
"Technique","Federated Learning","Federated Learning with Heterogeneous Models for On-device Malware Detection in IoT Networks","10.23919/DATE56975.2023.10137288","2023","IoT devices have been widely deployed in many applications to facilitate smart technology, increased portability, and seamless connectivity. Despite being widely adopted, security in IoT devices is often considered an afterthought due to resource and cost constraints. Among multiple security threats, malware attacks are observed to be a pivotal threat to IoT devices. Considering the spread of IoT devices and the threats they experience over time, deploying a static malware detector trained offline seems ineffective. On the other hand, on-device learning is an expensive or infeasible option due to the limited available resources on IoT devices. To overcome these challenges, this work employs 'Federated Learning' (FL) which enables timely updates to the malware detection models for increased security while mitigating the high communication or data storage overhead of centralized cloud approaches. Federated learning allows training machine learning models with decentralized data while preserving its privacy by design. However, one of the challenges with the FL is that the on-device models are required to be homogeneous, which may not be true in the case of networked IoT systems. As a panacea, we introduce a methodology to unify the models in the cloud with minimal overheads and an impact on on-device malware detection. We evaluate the proposed technique against homogeneous models in networked IoT systems encompassing Raspberry Pi devices. The experimental results and system efficiency analysis indicate that end-to-end training time is just 1.12× higher than traditional FL, testing latency is 1.63× faster, and malware detection performance is improved by 7% to 13% for resource-constrained IoT devices. © 2023 EDAA.","Shukla S.; Rafatirad S.; Homayoun H.; Dinakarrao S.M.P.","5"
"Technique","Tokenization","Android mobile malware classification using tokenization approach based on system call sequence","","2017","The increasing number of smartphone over the last few years reflects an impressive growth in the number of advanced malicious applications targeting the smartphone users. Recently, Android has become the most popular operating system opted by users and the most targeted platform for smartphone malware attack. Besides, current mobile malware classification and detection approaches are relatively immature as the new advanced malware exploitation and threats are difficult to be detected. Therefore, an efficient approach is proposed to improve the performance of the mobile malware classification and detection. In this research, a new system call classification with call logs exploitation for mobile attacks has been developed using tokenization approach. The experiment was conducted using static and dynamic-based analysis approach in a controlled lab. System calls with call logs exploitation from 5560 Drebin samples were extracted and further examined. This research paper aims to find the best n value and classifier in classifying the dataset based on the new patterns produced. Naïve Bayes classifier has successfully achieved accuracy of 99.86% which gives the best result among other classifiers. This new system call classification can be used as a guidance and reference for other researchers in the same field for security against mobile malware attacks targeted to call logs exploitation. © Copyright International Association of Engineers.","Ahmad I.N.; Ridzuan F.; Saudi M.M.; Pitchay S.A.; Basir N.; Nabila N.F.","5"
"Technique","Canny Edge Detection","Toward a general defense against kernel queue hooking attacks","10.1016/j.cose.2011.12.007","2012","Kernel queue hooking (KQH) attacks achieve stealthy malicious function execution by embedding malicious hooks in dynamic kernel schedulable queues (K-Queues). Because they keep kernel code and persistent hooks intact, they can evade detection of state-of-the-art kernel integrity monitors. Moreover, they have been used by advanced malware such as the Rustock spam bot to achieve malicious goals. In this paper, we present a systematic defense against such novel attacks. We propose the Precise Lookahead Checking of function Pointers approach that checks the legitimacy of pending K-Queue callback requests by proactively checking function pointers that may be invoked by the callback function. To facilitate the derivation of specifications for any K-Queue, we build a unified static analysis framework and a toolset that can derive from kernel source code properties of legitimate K-Queue requests and turn them into source code for the runtime checker. We implement proof-of-concept runtime checkers for four K-Queues in Linux and perform a comprehensive experimental evaluation of these checkers, which shows that our defense is effective against KQH attacks. © 2011 Elsevier Ltd. All rights reserved.","Wei J.; Pu C.","5"
"Technique","Spyware Analysis","Ransomware Analysis Using Reverse Engineering","10.1007/978-981-13-9942-8_18","2019","Ransomware threat continues to grow over years. The existing defense techniques for detecting malicious malware will never be sufficient because of Malware Persistence Techniques. Packed malware makes analysis harder & also it may sound like a trusted executable for evading modern antivirus. This paper focuses on the analysis part of few ransomware samples using different reverse engineering tools & techniques. There are many automated tools available for performing malware analysis, but reversing it manually helped to write two different patches for Wannacry ransomware. Execution of patched ransomware will not encrypt the user machine. Due to new advanced evading techniques like Anti-Virtual Machine (VM) & Anti-debugging, automated malware analysis tools will be less useful. The Application Programming Interface (API) calls which we used to create patch, were used to create Yara rule for detecting different variants of the same malware as well. © 2019, Springer Nature Singapore Pte Ltd.","Naveen S.; Gireesh Kumar T.","5"
"Technique","Online Learning","WISE: A Lightweight Intelligent Swarm Attestation Scheme for the Internet of Things","10.1145/3386688","2020","The Internet of Things (IoT) is shaped by increasing number of low-cost Internet-connected embedded devices that are becoming ubiquitous in every aspect of modern life, including safety- and privacy-critical application scenarios. Such devices offer limited or no security features, creating a large new attack surface. One key component in securing these devices is software integrity checking, which is typically attained with Remote Attestation (RA). RA is a security service that helps in detecting malware-infected IoT devices through remotely verifying their internal state by a trusted party. In the vast majority of IoT application domains, IoT devices operate in swarms or groups to achieve common tasks. Existing swarm attestation techniques are still rigid and not smart enough to address heterogeneity and adapt the different requirements of various IoT devices connected to a swarm, thus triggering the need for more efficient swarm attestation schemes. In this article, we present WISE, the first intelligent swarm attestation scheme that takes into account the various characteristics, differences, and requirements of connected devices in a swarm, aiming at minimizing the communication overhead while preserving an adequate level of security. WISE depends on a resource-efficient smart broadcast authentication scheme where devices are organized in fine-grained multi-clusters, and whenever needed, the most likely compromised devices are attested. The candidate devices are selected intelligently taking into account the attestation history and diverse characteristics and constraints of each device in the swarm. We show that WISE is suitable for resource-constrained embedded devices, highly efficient and scalable in static and dynamic heterogeneous IoT networks, and offers an adjustable level of security. © 2020 ACM.","Ammar M.; Crispo B.","5"
"Technique","Sandbox Evasion Code","Malware Sandbox Evasion Detection Based on Code Evolution; [基于代码进化的恶意代码沙箱规避检测技术研究]","10.11999/JEIT180257","2019","In order to resist the malware sandbox evasion behavior, improve the efficiency of malware analysis, a code-evolution-based sandbox evasion technique for detecting the malware behavior is proposed. The approach can effectively accomplish the detection and identification of malware by first extracting the static and dynamic features of malware software and then differentiating the variations of such features during code evolution using sandbox evasion techniques. With the proposed algorithm, 240 malware samples with sandbox-bypassing behaviors can be uncovered successfully from 7 malware families. Compared with the JOE analysis system, the proposed algorithm improves the accuracy by 12.5% and reduces the false positive to 1%, which validates the proposed correctness and effectiveness. © 2019, Science Press. All right reserved.","Liang G.; Pang J.; Shan Z.","5"
"Technique","Context-Sensitive Analysis","Malicious hidden-code extracting based on environment-sensitive analysis","10.3724/SP.J.1016.2012.00693","2012","Code packing is an obfuscation technique to protect against reverse engineering, but it is commonly used to hide malicious code from virus detection as well. Environment-sensitive packing techniques are able to check whether the run-time environment is suspicious, then malware can dynamically change the unpacking behaviors according to the environment. While many unpacking tools were proposed, such as static unpackers and dynamic unpackers, the existing solutions are either unable to handle unknown packing techniques, or vulnerable to various environment-sensitive techniques. In this paper, we propose a new unpacking approach based on environment-sensitive analysis. Our approach precisely tracks the flow of environment-sensitive data, then symbolically evaluates the recorded trace and gathers path constraints on environment-sensitive data. Using the collected path constraints, we can deduce the dependence of the packed malware's control flow on run-time environment then remove the environmental sensitivity of the malware. To demonstrate its effectiveness, we present a prototype system, called MalUnpack, and apply it to 321 in the wild packed malware samples. The experimental results show that MalUnpack can effectively identify and unpack 89.1% of the malware samples, while the number of using dynamic unpackers without environment-sensitive analysis is 35.5%, and the number of using signature-based unpacker is only 28.0%.","Wang Z.; Jia C.-F.; Lu K.","5"
"Technique","Few-Shot Learning","FAMCF: A few-shot Android malware family classification framework","10.1016/j.cose.2024.104027","2024","Android malware is a major cyber threat to the popular Android platform which may influence millions of end users. To battle against Android malware, a large number of machine learning-based approaches have been developed, and have achieved promising results. However, the vast majority of the existing work relies on a large number of labeled samples which are unfortunately not available for the newly reported Android malware families. This poses a critical challenge to classify such few-shot Android malware families. In this paper, we propose FAMCF, a novel few-shot learning-based classification pipeline to solve the problem. Faced with insufficient labeled samples from few-shot malware families, we learn how to extract features by training on another base dataset which is of a much larger scale but has disjoint label space with the few-shot families. We consider three types of features based on static analysis, namely permissions, API calls, and opcodes. We train a classifier for each type of features, utilizing a metric-based few-shot learning approach, and get an ensemble decision. Specifically, for each classifier, given a query sample to be classified, we propose to compare it to the prototypes of all the families, which are generated in a query-dependent way. We compared the classification performance of FAMCF to that of the existing solutions of multiple categories, including those traditional machine learning-based approaches, few-shot Android malware classification approaches, and also state-of-the-art few-shot learning methods from other fields. We also analyzed robustness of FAMCF against multiple popular obfuscation techniques. The extensive experiments on the popular Drebin and CICInvesAndMal2019 datasets confirm the effectiveness and robustness of FAMCF in classifying few-shot Android malware families, e.g., we achieve at least 4.86% improvement on classification accuracy for Drebin and successfully kept the decrease in accuracy within 1% under the seven common types of obfuscation techniques. © 2024 Elsevier Ltd","Zhou F.; Wang D.; Xiong Y.; Sun K.; Wang W.","4"
"Technique","API Sequence Analysis","Linux IoT Malware Variant Classification Using Binary Lifting and Opcode Entropy","10.3390/electronics13122381","2024","Binary function analysis is fundamental in understanding the behavior and genealogy of malware. The detection, classification, and analysis of Linux IoT malware and its variants present significant challenges due to the wide range of architectures supported by the Linux IoT platform. This study concentrates on static analysis using binary lifting techniques to extract and analyze Intermediate Representation (IR) opcode sequences. We introduce a set of statistical entropy-based features derived from these IR opcode sequences, establishing a practical and straightforward methodology for machine learning classification models. By exclusively analyzing function metadata and opcode entropy, our architecture-agnostic approach not only efficiently detects malware but also classifies its variants with a high degree of accuracy, achieving an F1 score of 97%. The proposed approach offers a robust alternative for enhancing malware detection and variant identification frameworks for IoT devices. © 2024 by the authors.","Ramamoorthy J.; Gupta K.; Shashidhar N.K.; Varol C.","4"
"Technique","Siamese Networks","Malware Detection Using Dual Siamese Network Model","10.32604/cmes.2024.052403","2024","This paper proposes a new approach to counter cyberattacks using the increasingly diverse malware in cyber security. Traditional signature detection methods that utilize static and dynamic features face limitations due to the continuous evolution and diversity of new malware. Recently, machine learning-based malware detection techniques, such as Convolutional Neural Networks (CNN) and Recurrent Neural Networks (RNN), have gained attention. While these methods demonstrate high performance by leveraging static and dynamic features, they are limited in detecting new malware or variants because they learn based on the characteristics of existing malware. To overcome these limitations, malware detection techniques employing One-Shot Learning and Few-Shot Learning have been introduced. Based on this, the Siamese Network, which can effectively learn from a small number of samples and perform predictions based on similarity rather than learning the characteristics of the input data, enables the detection of new malware or variants. We propose a dual Siamese network-based detection framework that utilizes byte images converted from malware binary data to grayscale, and opcode frequency-based images generated after extracting opcodes and converting them into 2-gram frequencies. The proposed framework integrates two independent Siamese network models, one learning from byte images and the other from opcode frequency-based images. The detection models trained on the different kinds of images generated separately apply the L1 distance measure to the output vectors the models generate, calculate the similarity, and then apply different weights to each model. Our proposed framework achieved a malware detection accuracy of 95.9% and 99.83% in the experiments using different malware datasets. The experimental results demonstrate that our malware detection model can effectively detect malware by utilizing two different types of features and employing the dual Siamese network-based model. © 2024 The Authors.","An B.; Yang J.; Kim S.; Kim T.","4"
"Technique","Voting Classifiers","Ensemble Model Ransomware Classification: A Static Analysis-based Approach","10.1007/978-981-16-6723-7_12","2022","The growth of malware attacks has been phenomenal in the recent past. The COVID-19 pandemic has contributed to an increase in the dependence of a larger than usual workforce on digital technology. This has forced the anti-malware communities to build better software to mitigate malware attacks by detecting it before they wreak havoc. The key part of protecting a system from a malware attack is to identify whether a given file/software is malicious or not. Ransomware attacks are time-sensitive as they must be stopped before the attack manifests as the damage will be irreversible once the attack reaches a certain stage. Dynamic analysis employs a great many methods to decipher the way ransomware files behave when given a free rein. But, there still exists a risk of exposing the system to malicious code while doing that. Ransomware that can sense the analysis environment will most certainly elude the methods used in dynamic analysis. We propose a static analysis method along with machine learning for classifying the ransomware using opcodes extracted by disassemblers. By selecting the most appropriate feature vectors through the tf-idf feature selection method and tuning the parameters that better represent each class, we can increase the efficiency of the ransomware classification model. The ensemble learning-based model implemented on top of N-gram sequence of static opcode data was found to improve the performance significantly in comparison to RF, SVN, LR, and GBDT models when tested against a dataset consisting of live encrypting ransomware samples that had evasive technique to dodge dynamic malware analysis. © 2022, The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd.","Johnson S.; Gowtham R.; Nair A.R.","4"
"Technique","Randomized Smoothing","Certified Robustness of Static Deep Learning-based Malware Detectors against Patch and Append Attacks","10.1145/3605764.3623914","2021","Machine learning-based (ML) malware detectors have been shown to be susceptible to adversarial malware examples. Given the vulnerability of deep learning detectors to small changes on the input file, we propose a practical and certifiable defense against patch and append attacks on malware detection. Our defense is inspired by the concept of (de)randomized smoothing, a certifiable defense against patch attacks on image classifiers, which we adapt by: (1) presenting a novel chunk-based smoothing scheme that operates on subsequences of bytes within an executable; (2) deriving a certificate that measures the robustness against patch attacks and append attacks. Our approach works as follows: (i) during the training phase, a base classifier is trained to make classifications on a subset of continguous bytes or chunk of bytes from an executable; (ii) at test time, an executable is divided into non-overlapping chunks of fixed size and our detection system classifies the original executable as the majority vote over the predicted classes of the chunks. Leveraging the fact that patch and append attacks can only influence a certain number of chunks, we derive meaningful large robustness certificates against both attacks. To demonstrate the suitability of our approach we have trained a classifier with our chunk-based scheme on the BODMAS dataset. We show that the proposed chunk-based smoothed classifier is more robust against the benign injection attack and state-of-The-Art evasion attacks in comparison to a non-smoothed classifier.  © 2023 Owner/Author.","Gibert D.; Zizzo G.; Le Q.","4"
"Technique","Corner Detection","Malicious code clone detection technology based on deep learning; [一种基于深度学习的恶意代码克隆检测技术]","10.13700/j.bh.1001-5965.2020.0400","2022","Malicious code clone detection has become an effective way to analyze malicious code homology and advanced persistent threat (APT) attacks. In this paper, we collect samples of different APT organizations from public threat intelligence, and propose a deep learning based malicious code clone detection framework to detect the similarity between the functions in newly discovered malicious code and the malicious code in known APT organizational resources in order to efficiently analyze malware and quickly identify the source of APT attacks. We perform static analysis of malicious code through disassembly technology, use its key function call graph and disassembly code as the features of the malicious code, and then classify the malicious code in the APT organization library according to the neural network model. Through extensive evaluation and comparison with our previous models (MCrab), the improved model is better than the previous model, which can effectively detect and classify malicious code clones and obtain higher detection rate. © 2022, Editorial Board of JBUAA. All right reserved.","Shen Y.; Yan H.; Xia C.; Han Z.","4"
"Technique","Rogue Security Software","An automated virtual security testing platform for android mobile apps","10.1109/MOBISECSERV.2015.7072877","2015","This paper proposes an automated virtual security testing platform for Android mobile apps. The testing platform includes three key components: customizing Android OS to include mobile app trace information, creating a virtual testing platform using the customized OS, and developing static and dynamic analyzing techniques for mobile malware detection. The proposed testing platform is a server-side malware detection solution. It can utilize both static and dynamic analysis and is a good compensation to the client-side mobile security software. © 2015 IEEE.","Wang Y.","4"
"Technique","Capsule Networks","A Malware Classification Method Based on the Capsule Network","10.1007/978-3-030-62223-7_4","2020","Malware has become a serious threat to network security. Traditional static analysis methods usually cannot effectively detect packers, obfuscations, and variants. Dynamic analysis is not efficient when dealing with large amounts of malware. Aiming at the shortcomings of the existing methods, this paper proposes a method for analyzing malware based on the capsule network. It uses a supervised learning method to train the capsule network with a large number of malware samples with existing category labels. In the process of constructing features, this paper adopts a method of combining static features and dynamic features to extract the operation code information based on static analysis, and extract the API call sequence information based on general analysis. Both characteristics can well represent the structure and behavior of malware. Then use N-Gram to construct sequence features, visualize the N-Gram sequence, generate malware images, and finally use the capsule network for classification detection. In addition, this paper improves the original capsule network and verifies the effect of the improved model. © 2020, Springer Nature Switzerland AG.","Wang Z.; Han W.; Lu Y.; Xue J.","4"
"Technique","Multi-Head Architecture","Android Malware Detection Using Deep Learning","10.1007/978-3-031-15030-2_10","2022","This chapter investigates the potential of deep learning architectures for Android malware detection, specifically convolutional neural networks (CNNs) using natural language processing (NLP) concepts. The proposed solution is based on static analysis of raw opcode sequences from disassembled programs and other complementary features such as API calls and permissions, with features indicative of malware automatically learned by the network. This removes the need for hand-engineered malware features while performing classification. Using the Drebin and AMD benchmark datasets, the benefits of this multi-view architecture to combine multiple feature sources are demonstrated in our findings. We conclude the use of deep learning architectures enables state-of-art results in automatic malware detection, while reducing the dependency on feature engineering and domain expertise. Using multi-view compared to single-view architectures improves performance through exposure to simultaneous sources of information, learning a more effective set of features. The model achieves state-of-the art detection performance in a challenging zero-day scenario, reducing false positives by 77% in relative terms on average, an important metric for potential real-world deployment. © The Author(s), under exclusive license to Springer Nature Switzerland AG 2023.","Millar S.; McLaughlin N.; del Rincon J.M.; Miller P.","4"
"Technique","Box Counting Method","An Android Malware Detection System using a Knowledge-based Permission Counting Method","10.30630/joiv.6.1.859","2022","— As the number of damage cases caused by malicious apps increases, accurate detection is required through various detection conditions, not just detection using simple techniques. This paper proposes a knowledge-based machine learning method using authority information and adding its usage counting features. This method classifies training apps and malicious apps through machine learning using permission features in manifest.xml of Android apps. As a result of the experiment, accuracy, recall, precision, F1 score are 99.01%, 97.70%, 100.0%, 99.01%, respectively. Since recall is higher than other indicators, it accurately predicts malicious apps as malicious. In other words, the proposed system effectively prevents the distribution of malicious apps. As the number of harmful apps develops daily, it was determined in this study that it is critical to detect malicious apps using a machine learning model effectively. However, utilizing permission alone as a criterion for distinguishing between legitimate and malicious apps is insufficient to detect all harmful apps that emerge from new attack technologies. Combining feature information efficient in detecting malicious apps, such as APIs that access and control sensitive data from users or adding other detection criteria will likely improve the detection model's accuracy. According to the upcoming study, recent attackers have used obfuscation to disguise harmful code and hinder static analysis of rogue programs. It is important to consider how to detect harmful apps that are obfuscated in this way. © 2022, Politeknik Negeri Padang. All rights reserved.","Lee S.-A.; Yoon A.-R.; Lee J.-W.; Lee K.","4"
"Technique","Compression Analysis","Faster classification using compression analytics","10.1109/ICDMW53433.2021.00105","2021","Compression analytics have gained recent interest for application in malware classification and digital forensics. This interest is due to the fact that compression analytics rely on measured similarity between byte sequences in datasets without requiring prior feature extraction; in other words, these methods are featureless. Being featureless makes compression analytics particularly appealing for computer security applications, where good static features are either unknown or easy to circumvent by adversaries. However, previous classification methods based on compression analytics relied on algorithms that scaled with the size of each labeled class and the number of classes. In this work, we introduce an approach that, in addition to being featureless, can perform fast and accurate inference that is independent of the size of each labeled class. Our method is based on calculating a representative sample, the Fréchet mean, for each labeled class and using it at inference time. We introduce a greedy algorithm for calculating the Fréchet mean and evaluate its utility for classification across a variety of computer security applications, including authorship attribution of source code, file fragment type detection, and malware classification. © 2021 IEEE.","Ting C.; Johnson N.; Onunkwo U.; Derek Tucker J.","4"
"Technique","Metric Learning","Distance metric learning using particle swarm optimization to improve static malware detection","","2020","Distance metric learning is concerned with finding appropriate parameters of distance function with respect to a particular task. In this work, we present a malware detection system based on static analysis. We use k-nearest neighbors (KNN) classifier with weighted heterogeneous distance function that can handle nominal and numeric features extracted from portable executable file format. Our proposed approach attempts to specify the weights of the features using particle swarm optimization algorithm. The experimental results indicate that KNN with the weighted distance function improves classification accuracy significantly. © Copyright 2020 by SCITEPRESS - Science and Technology Publications, Lda. All rights reserved.","Jureček M.; Lórencz R.","4"
"Technique","Mann-Whitney U Test","X-ANOVA and X-Utest features for Android malware analysis","10.1109/ICACCI.2014.6968608","2014","In this paper we proposed a static analysis framework to classify the android malware. The three different feature likely (a) opcode (b) method and (c) permissions are extracted from the each android.apk file. The dominant attributes are aggregated by modifying two different ranked feature methods such as ANOVA to Extended ANOVA (X-ANOVA) and Wann-Whiteney U-test to Extended U-Test (X-U-Test). These two statistical feature ranking methods retrieve the significant features by removing the irrelevant attributes based on their score. Accuracy of the proposed system is computed by using three different classifiers (J48, ADAboost and Random forest) as well as voted classification technique. The X-U-Test exhibits better accuracy results compared with X-ANOVA. The highest accuracy 89.36% is obtained with opcode while applying X-U-Test and X-ANOVA shows high accuracy of 87.81% in the case of method as a feature. The permission based model acquired highest accuracy in independent (90.47%) and voted (90.63%) classification model. © 2014 IEEE.","Raphael R.; Vinod P.; Omman B.","4"
"Technique","Late Fusion","Android malware defense through a hybrid multi-modal approach","10.1016/j.jnca.2024.104035","2025","The rapid proliferation of Android apps has given rise to a dark side, where increasingly sophisticated malware poses a formidable challenge for detection. To combat this evolving threat, we present an explainable hybrid multi-modal framework. This framework leverages the power of deep learning, with a novel model fusion technique, to illuminate the hidden characteristics of malicious apps. Our approach combines models (leveraging late fusion approach) trained on attributes derived from static and dynamic analysis, hence utilizing the unique strengths of each model. We thoroughly analyze individual feature categories, feature ensembles, and model fusion using traditional machine learning classifiers and deep neural networks across diverse datasets. Our hybrid fused model outperforms others, achieving an F1-score of 99.97% on CICMaldroid2020. We use SHAP (SHapley Additive exPlanations) and t-SNE (t-distributed Stochastic Neighbor Embedding) to further analyze and interpret the best-performing model. We highlight the efficacy of our architectural design through an ablation study, revealing that our approach consistently achieves over 99% detection accuracy across multiple deep learning models. This paves the way groundwork for substantial advancements in security and risk mitigation within interconnected Android OS environments. © 2024 Elsevier Ltd","Asmitha K.A.; Vinod P.; K.A. R.R.; Raveendran N.; Conti M.","3"
"Technique","Homomorphic Encryption","Studying the influence of static API calls for hiding malware","10.1007/978-3-319-44636-3_34","2016","Malware detection has become a challenging task over the last few years. Different concealment strategies such as packing compression, polymorphic encryption and metamorphic obfuscation have produced that malware Analysts need to find more original techniques to discriminate whether a file is malware or not. One of the current benchmark techniques is static analysis of API Calls. This technique aims to detect malware using the API Calls information extracted from the malware files. In this work, we aim to show a complete study of this technique using a behavioural model, built through an evolutionary process, in order to define possible limitations. For this analysis we will use a benchmark dataset to study the discrimination between malware and benignware and evaluate how malware writers are trying to imitate benign behaviour in order to defeat this technique. © Springer International Publishing Switzerland 2016.","Martín A.; Menéndez H.D.; Camacho D.","3"
"Technique","Neural Network Classification","Hybrid Malware Variant Detection Model with Extreme Gradient Boosting and Artificial Neural Network Classifiers","10.32604/cmc.2023.041038","2023","In an era marked by escalating cybersecurity threats, our study addresses the challenge of malware variant detection, a significant concern for a multitude of sectors including petroleum and mining organizations. This paper presents an innovative Application Programmable Interface (API)-based hybrid model designed to enhance the detection performance of malware variants. This model integrates eXtreme Gradient Boosting (XGBoost) and an Artificial Neural Network (ANN) classifier, offering a potent response to the sophisticated evasion and obfuscation techniques frequently deployed by malware authors. The model’s design capitalizes on the benefits of both static and dynamic analysis to extract API-based features, providing a holistic and comprehensive view of malware behavior. From these features, we construct two XGBoost predictors, each of which contributes a valuable perspective on the malicious activities under scrutiny. The outputs of these predictors, interpreted as malicious scores, are then fed into an ANN-based classifier, which processes this data to derive a final decision. The strength of the proposed model lies in its capacity to leverage behavioral and signature-based features, and most importantly, in its ability to extract and analyze the hidden relations between these two types of features. The efficacy of our proposed API-based hybrid model is evident in its performance metrics. It outperformed other models in our tests, achieving an impressive accuracy of 95% and an F-measure of 93%. This significantly improved the detection performance of malware variants, underscoring the value and potential of our approach in the challenging field of cybersecurity. © 2023 Tech Science Press. All rights reserved.","Alhashmi A.A.; Darem A.A.; Alanazi S.M.; Alashjaee A.M.; Aldughayfiq B.; Ghaleb F.A.; Ebad S.A.; Alanazi M.A.","3"
"Technique","Knowledge Distillation","A Novel Knowledge Distillation Framework with Intermediate Loss for Android Malware Detection","10.1109/CSDE56538.2022.10089266","2022","With the popularity and self-contained functions of Android operating system, malicious attackers have targeted it primarily. Along with attackers are gradually skilled in avoid deep learning detectors, many in-depth researches on Android malware detection have been done. However, these works have complex models and enormous parameters. To settle this dilemma, we proposed a knowledge distillation architecture with intermediate loss to narrow the capability gap by promoting the student network emulate valuable hint knowledge from the intermediate layers of teacher network, based on Multi-Layer Perceptron (MLP). Besides, our framework utilizes static based features, namely permissions and vulnerabilities to effectively characterize applications and construct dataset. We evaluated our framework from various performance metrics and compared with other state-of-the-art deep neural networks. The experimen-tal results indicates that our framework own better performance and is perspective.  © 2022 IEEE.","Xia M.; Xu Z.; Zhu H.","3"
"Technique","Evolutionary Algorithms","Characterization of android malware families by a reduced set of static features","10.1007/978-3-319-47364-2_59","2017","Due to the ever increasing amount and severity of attacks aimed at compromising smartphones in general, and Android devices in particular, much effort have been devoted in recent years to deal with such incidents. However, accurate detection of bad-intentioned Android apps still is an open challenge. As a follow-up step in an ongoing research, preset paper explores the selection of features for the characterization of Android-malware families. The idea is to select those features that are most relevant for characterizing malware families. In order to do that, an evolutionary algorithm is proposed to perform feature selection on the Drebin dataset, attaining interesting results on the most informative features for the characterization of representative families of existing Android malware. © Springer International Publishing AG 2017.","Sedano J.; Chira C.; González S.; Herrero Á.; Corchado E.; Villar J.R.","3"
"Technique","Knowledge Distillation Transfer","A Novel Knowledge Distillation Framework with Intermediate Loss for Android Malware Detection","10.1109/CSDE56538.2022.10089266","2022","With the popularity and self-contained functions of Android operating system, malicious attackers have targeted it primarily. Along with attackers are gradually skilled in avoid deep learning detectors, many in-depth researches on Android malware detection have been done. However, these works have complex models and enormous parameters. To settle this dilemma, we proposed a knowledge distillation architecture with intermediate loss to narrow the capability gap by promoting the student network emulate valuable hint knowledge from the intermediate layers of teacher network, based on Multi-Layer Perceptron (MLP). Besides, our framework utilizes static based features, namely permissions and vulnerabilities to effectively characterize applications and construct dataset. We evaluated our framework from various performance metrics and compared with other state-of-the-art deep neural networks. The experimen-tal results indicates that our framework own better performance and is perspective.  © 2022 IEEE.","Xia M.; Xu Z.; Zhu H.","3"
"Technique","SMS Analysis","PIdARCI: Using Assembly Instruction Patterns to Identify, Annotate, and Revert Compiler Idioms","10.1109/PST52912.2021.9647781","2021","Analysis of binary code is a building block of computer security. Especially in malware or firmware analysis where source code oftentimes is not available, techniques like decompilation are utilized to Figure out the functionality of binaries. During the optimization phase in modern compilers, human-readable expressions are often transformed into instruction sequences (compiler idioms or idioms) that may be more efficient in terms of speed or size than the direct translation. However, these transformations are often considerably worse in terms of readability for the analyst. Such compiler specific sequences are not only significantly longer than the apparent translation of the original high-level language operation but also have no trivial correlation to the original expression's semantics. Modern decompilers address this issue by reverting idioms using static, manually crafted rules. In this paper, we introduce a novel approach to find and annotate arithmetic idioms with their corresponding high-level language expressions to significantly simplify manual analysis. In contrast to previous approaches, our method does not require manual work to create the patterns for matching idioms and significantly less manual labour to derive the transformation rules to calculate the original constants. In our evaluation, we compared the results of PIdARCI against the current academic and commercial state-of-the-art Ghidra, RetDec, and Hex Rays / IDA Pro. We show that PIdARCI matches more than 99% of all considered idioms, exceeding the matching rate of the other approaches.  © 2021 IEEE.","Enders S.; Rybalka M.; Padilla E.","3"
"Technique","Bayesian Model Averaging","Android malware detection mechanism based on bayesian model averaging","10.1007/978-981-10-8639-7_9","2019","Since Android is the most widely used operating system for mobile devices, it has been a target for widespread malware attacks. During the past years, many new malware detection mechanisms have been introduced for the Android platform. These methods are generally classified as static analysis and dynamic analysis methods. However, none of the existing mechanisms are able to detect the malware applications with reasonable false positive and negative rates. This is a major concern in the field of Android malware detection. In this paper, we propose a novel malware detection mechanism by combining the estimated malicious probability values of three distinct naive Bayes classifiers based on API calls, permissions, and system calls using Bayesian model averaging approach. The majority of the existing Android malwares have signatures in at least one of API calls, permissions, or system call sequences. Hence, the proposed mechanism can overcome the limitations of the existing static and dynamic malware detection mechanism to a good extent. Our experiments have shown that the proposed mechanism is more accurate than the existing static and dynamic malware detection mechanisms. © Springer Nature Singapore Pte Ltd. 2019","Roopak S.; Thomas T.; Emmanuel S.","3"
"Technique","Cryptojacking Analysis","A Holistic Intelligent Cryptojacking Malware Detection System","10.1109/ACCESS.2024.3488192","2024","Recent statistics indicate a continuous rise in cryptojacking malware. This malware covertly exploits users' device resources to mine cryptocurrencies, such as Bitcoin, without their knowledge or consent. Cryptocurrency mining involves participants competing to generate a unique hash, with successful miners earning cryptocurrency tokens as rewards. As the difficulty of mining new cryptocurrencies increases, greater computational power and resources are required. Unfortunately, the growing popularity of cryptocurrencies has led to a significant increase in cryptojacking malware. Compounding this issue is the lack of adequate, practical solutions to combat this threat. Current shortcomings include a limited number of related studies, particularly in host-based cryptojacking, a scarcity of recent research, reliance on small or outdated datasets, and a shallow understanding of the behavior and characteristics of cryptojacking malware. This paper aims to address these gaps by introducing a holistic, intelligent cryptojacking malware detection system that: 1) provides a detailed analysis of the lifecycle of both host-based and web-based cryptojacking malware; 2) conducts a critical comparison of existing solutions, highlighting their weaknesses; 3) applies deep static analysis to identify key indicators crucial for cryptojacking analysis; 4) executes thorough dynamic analysis to demonstrate the real-world impact of cryptojacking; 5) utilizes a new, large, and robust cryptojacking dataset (CJDS) with over 100,000 samples, where the details of constructing this dataset are provided, (f) develops vision-based predictive models using 23 convolutional neural network (CNN) algorithms, extensively evaluated with comprehensive metrics; and 6) integrates the best-performing model to bulid a highly efficient cryptojacking detection system with an accuracy of 99%. This research offers valuable insights into the characteristics and consequences of cryptojacking, paving the way for further advancements in cybersecurity. It aims to protect digital environments from unauthorized resource exploitation and enhance the security of cryptocurrency-based systems. © 2013 IEEE.","Almurshid H.A.; Almomani I.; Khalifa M.A.; El-Shafai W.","2"
"Technique","Precision-Recall Curves","Threshold Analysis Using Probabilistic Xgboost Classifier for Hardware Trojan Detection","10.1007/s10836-023-06079-2","2023","The fabless nature of integrated circuits manufacturing leaves them vulnerable to modifications by ill-intentioned third party. There arises a necessity for security measures during their manufacturing to protect them from covert modifications known as hardware Trojans. Static analysis of gate-level synthesized integrated circuits can prove helpful in detecting the presence of unwanted circuitry within the host. This paper proposes a static analysis technique of gate-level integrated circuits using supervised probabilistic classifier through effective threshold analysis. New and existing relevant features are extracted that relates to hardware Trojan properties and normalised accordingly. Effective features are selected using their feature importance values. Variance threshold has been used to create a high entropy feature subset to train a supervised model using XGBoost algorithm with relevant hyperparameters. Threshold values of the probabilistic classifier are determined through analysis of threshold obtained using receiver operating characteristic and precision-recall curves. The chosen techniques showcase hardware Trojan detection with high accuracy over gate-level synthesized circuits. © 2023, The Author(s), under exclusive licence to Springer Science+Business Media, LLC, part of Springer Nature.","Dhar T.; Das R.; Giri C.; Roy S.K.","2"
"Technique","API Call Sequencing","EFE: Efficient feature extraction algorithm for dynamic malware analysis in windows executables using API call sequence","","2016","In the history of technological advancements in networks and communicating devices, it is mandatory to have efficient mechanisms to detect the malwares before it corrupts the entire network or the device. Researchers have been adapting to various methodologies to detect malwares using static, dynamic and hybrid approaches. The proposed EFE(Efficient Feature Extraction)algorithm provides an efficient way to detect malwares in dynamic environment using API call sequences. It is clear from the findings that the proposed EFE (Efficient Feature Extraction) algorithm outperforms the other methods by providing a high detection rate when it is classified using SVM algorithm. It is also capable of detecting both known and unknown malwares effectively. © 2016, International Journal of Pharmacy and Technology. All rights reserved.","Jerlin M.A.; Jayakumar C.; Prabhu J.","2"
"Technique","Contrastive Learning","Dynamic malware detection based on supervised contrastive learning","10.1016/j.compeleceng.2025.110108","2025","Application Programming Interface (API) calls record interactions between a program and the operating system or other programs during runtime. Due to this precise tracking capability, API call information is extensively utilized in malware detection. However, most approaches only focus on the API names or simply combine them with API parameters, leading to insufficient semantic information extraction. Additionally, with the continuous development of network technology, the behavioral feature differences between malware and benign software are gradually blurring, which makes it difficult to detect hard samples (e.g., well-disguised or atypical malware) in static analysis or simple behavioral patterns. Therefore, in this paper, we propose DMASCL, a framework that utilizes Dynamic Malware Analysis based on API calls and Supervised Contrastive Learning techniques, which encodes semantic as well as statistical features in each sample, dynamically compares samples from different categories, learns inter-sample differences and performs classification. In particular, we combine API names with API parameters to construct API sentences containing rich semantic information, and propose a hybrid feature encoder for obtaining the semantics and statistical features of API parameters. We then apply supervised contrastive learning techniques for further feature learning, utilizing Gaussian noise to construct contrast tasks. The model is optimized by combining cross-entropy loss for classification with supervised contrastive loss to reinforce relationships between samples, thus enhancing the model's ability to recognize malicious behavior. Our method achieves a 98.42% F1-score and a 98.03% recall in Dataset 1. It achieves a 99.59% F1-score and a 98.86% recall in Dataset 2. The experimental results show an increase in accuracy of 1.05% and 2.27%, respectively, compared to the state-of-the-art method. © 2025","Yang S.; Yang Y.; Zhao D.; Xu L.; Li X.; Yu F.; Hu J.","1"
"Technique","Vision Transformer","Malware Detector Based on Enhanced Vision Transformer","10.1109/MICCIS63508.2024.00035","2024","With the increasing use of automated generation tools, new malicious code variants are being generated at an alarming rate. To combat this, cybersecurity experts use static and dynamic analysis methods to analyze these variants. Static analysis entails examining disassembled code without running the malicious samples, whereas dynamic analysis involves scrutinizing behavioral data by executing samples within a controlled virtual environment. While both approaches have their pros and cons, static analysis proves more advantageous when it comes to handling extensive volumes of malware. This paper outlines the variances between static and dynamic analysis approaches, elucidates the process of extracting raw features in static analysis, and highlights the prevalent inclination towards static analysis when dealing with substantial volumes of malware. The applicability of the proposed framework is confirmed through the validation of diverse benchmark datasets. The suggested approach demonstrated superior performance, achieving an accuracy rate of 99.35% on the Malimg dataset.  © 2024 IEEE.","Zhao P.; Gan G.","1"
"Technique","Image Texture Analysis","GRASE: Granulometry Analysis With Semi Eager Classifier to Detect Malware","10.9781/ijimai.2023.12.002","2024","Technological advancement in communication leading to 5G, motivates everyone to get connected to the internet including ‘Devices’, a technology named Web of Things (WoT). The community benefits from this large-scale network which allows monitoring and controlling of physical devices. But many times, it costs the security as MALicious softWARE (MalWare) developers try to invade the network, as for them, these devices are like a ‘backdoor’ providing them easy ‘entry’. To stop invaders from entering the network, identifying malware and its variants is of great significance for cyberspace. Traditional methods of malware detection like static and dynamic ones, detect the malware but lack against new techniques used by malware developers like obfuscation, polymorphism and encryption. A machine learning approach to detect malware, where the classifier is trained with handcrafted features, is not potent against these techniques and asks for efforts to put in for the feature engineering. The paper proposes a malware classification using a visualization methodology wherein the disassembled malware code is transformed into grey images. It presents the efficacy of Granulometry texture analysis technique for improving malware classification. Furthermore, a Semi Eager (SemiE) classifier, which is a combination of eager learning and lazy learning technique, is used to get robust classification of malware families. The outcome of the experiment is promising since the proposed technique requires less training time to learn the semantics of higher-level malicious behaviours. Identifying the malware (testing phase) is also done faster. A benchmark database like malimg and Microsoft Malware Classification challenge (BIG-2015) has been utilized to analyse the performance of the system. An overall average classification accuracy of 99.03 and 99.11% is achieved, respectively. © 2024, Universidad Internacional de la Rioja. All rights reserved.","Deore M.; Tarambale M.; Kumar J.R.R.; Sakhare S.","1"
"Technique","Batch File Analysis","Static file analysis to detect rootkits in the system","10.1088/1742-6596/2032/1/012137","2021","Rootkits allow attackers to steal data from your computer, exploit its processing power, and monitor user activities. There are two main ways to detect a rootkit in the system: the first implies detecting a rootkit on a running computer, the other - detecting a rootkit in a data image (or on a non-functioning computer). The paper provides practical examples, thus allowing readers to repeat the experiments without too much difficulty. © 2021 Institute of Physics Publishing. All rights reserved.","Svirbutovich O.A.; Zhigalov K.Yu.; Patrusova A.M.","1"
"Technique","Certified Defense","DRSM: DE-RANDOMIZED SMOOTHING ON MALWARE CLASSIFIER PROVIDING CERTIFIED ROBUSTNESS","","2024","Machine Learning (ML) models have been utilized for malware detection for over two decades. Consequently, this ignited an ongoing arms race between malware authors and antivirus systems, compelling researchers to propose defenses for malware-detection models against evasion attacks. However, most if not all existing defenses against evasion attacks suffer from sizable performance degradation and/or can defend against only specific attacks, which makes them less practical in real-world settings. In this work, we develop a certified defense, DRSM (De-Randomized Smoothed MalConv), by redesigning the de-randomized smoothing technique for the domain of malware detection. Specifically, we propose a window ablation scheme to provably limit the impact of adversarial bytes while maximally preserving local structures of the executables. After showing how DRSM is theoretically robust against attacks with contiguous adversarial bytes, we verify its performance and certified robustness experimentally, where we observe only marginal accuracy drops as the cost of robustness. To our knowledge, we are the first to offer certified robustness in the realm of static detection of malware executables. More surprisingly, through evaluating DRSM against 9 empirical attacks of different types, we observe that the proposed defense is empirically robust to some extent against a diverse set of attacks, some of which even fall out of the scope of its original threat model. In addition, we collected 15.5K recent benign raw executables from diverse sources, which will be made public as a dataset called PACE (Publicly Accessible Collection(s) of Executables) to alleviate the scarcity of publicly available benign datasets for studying malware detection and provide future research with more representative data of the time. Our code and dataset are available at-https://github.com/ShoumikSaha/DRSM. © 2024 12th International Conference on Learning Representations, ICLR 2024. All rights reserved.","Saha S.; Wang W.; Kaya Y.; Feizi S.; Dumitras T.","1"
"Technique","Anti-VM Detection","A Research on Countering Virtual Machine Evasion Techniques of Malware in Dynamic Analysis","10.1007/978-3-031-19958-5_55","2023","Malware underlies many criminal activities, especially money-driven criminal activities such as ransomware as well as advanced threats (APT). In recent time, the number and sophistication of malware are increasing significant. To understand malware activities, researchers can used static analysis and dynamic analysis. With dynamic analysis, samples must be run in the safe environment like virtual machine (VM) or an air gapped computer. Many malwares can detect the environment in which they are being launched. They change their behavior if the virtual environment is detected. It is necessary to create a virtual machine with the characteristics of a physical machine. In this study, we propose a system to create virtual machines that can be used to analyze malware using dynamic analysis techniques. The virtual machines generated from the proposed system can deceive malware using Anti-VM techniques. © 2023, The Author(s), under exclusive license to Springer Nature Switzerland AG.","Nep P.R.; Cam N.T.","1"
"Technique","Quantization Methods","Cyber-Malware Detection using Machine Learning","10.1109/ICIMIA60377.2023.10426313","2023","Ransomware poses a significant threat to modern computer systems, making the development of effective detection mechanisms crucial. This project leverages a blend of statistical and dynamic analysis to uncover essential characteristics that differentiate ransomware from benign files. Feature extraction is followed by rigorous feature ranking and selection using techniques like gain ratio, chi-squared tests, and regularization methods like L1 and L2. This process optimizes the dataset, reducing dimensionality and preventing overfitting during model training. Random Forest, the machine learning method used, excels at handling highly dimensional data and mitigating overfitting, making it a suitable choice. To test the model's efficacy, evaluation criteria such as accuracy, precision, F1-score, and recall are used. Cross-validation ensures that it can generalize to previously unseen data. Once the model meets the desired criteria for accuracy and reliability, it is ready for deployment in real-world environments, where it continuously monitors and detects ransomware threats, enhancing cybersecurity measures and safeguarding against malicious attacks. This project represents a significant step forward in the ongoing battle against ransomware, offering an efficient and reliable defense mechanism for critical systems and data.  © 2023 IEEE.","Mane S.B.; Jadhav S.; Gamre C.; Gharat S.; Patil J.; Raina V.","1"
"Technique","DBSCAN Clustering","APEC: App Permission Classification with Efficient Clustering","10.1109/CIISCA59740.2023.00042","2023","Android dominates the smartphone operating system market, publishing several apps daily. Hence it is hard to track apps and restrict malware apps. The apps tend to mine the user data without the user's knowledge. The user allows most permissions without reviewing them and considering their future consequences. Hence, unwanted permissions can breach a user's privacy. The paper enhances the 2 million app permission dataset by adding the category of the apps from the Google Play Store. It uses this dataset and proposes a novel three-Tier static model named APEC (App Permission classification with Efficient Clustering). It checks whether the app permissions are safe or unsafe based on their usage frequency in the app category on Google Play Store. APEC comprises three levels categorizing apps, clustering and approval, and classification. It uses DBSCAN clustering to create a cluster of apps based on category and rates their permissions as safe and unsafe. APEC uses the Decision Tree and Random Forest machine learning algorithm to classify the permissions requested by the new apps as safe or unsafe. It achieves an accuracy of 93.8% and 95.8% using the Decision Tree and Random Forest, respectively. It can assist the user in choosing the appropriate permissions and the developer in choosing the minimum amount required for the apps' smooth functioning,  © 2023 IEEE.","Rawal P.S.; Sethia D.","1"
"Technique","Emulator Detection Analysis","ESAA: Efficient sequence alignment algorithm for dynamic malware analysis in windows executable using api call sequence","10.22266/ijies2017.0630.33","2017","Detection of malware has become more challenging today because of the advancements and technologies adapted to corrupt the network or the devices. Static, dynamic and hybrid malware detection analysis methods have failed to provide complete malware detection. Hence in this work, a bio inspired sequence alignment method used in bioinformatics to compare the similarity between amino acid sequences in protein structures has been adapted to give the best similarity score to detect malwares. The state of art sequence alignment methods like Smith Water Man Algorithm (SWMA) used in bio informatics suffers from the problem of more memory utilization and computation time which is in the order of n2 ie., (O(n2)) and hence in this work an efficient sequence alignment algorithm (ESSA) has been proposed to address the problem of memory utilization thereby making the memory utilization and computation time to the order of n ie., (O(n)) there by making the detection rate higher. It is also clear from the results that the similarity score is high when the sequence length is small. The accuracy of the prediction rate of malware and benign increases.","Jerlin A.; Chinnappan J.","1"
"Technique","Interval Analysis","1st International Conference on Runtime Verification, RV 2010","","2010","The proceedings contain 39 papers. The special focus in this conference is on Runtime Verification. The topics include: Statistical model checking: An overview; Runtime verification with the RV system; a meta-aspect protocol for developing dynamic analyses; behavior abstraction in malware analysis; clara: A framework for partially evaluating finite-state runtime monitors ahead of time; Checking the correspondence between UML models and implementation; compensation-aware runtime monitoring; recovery Tasks: An Automated Approach to Failure Recovery; formally efficient program instrumentation; Code Contracts for.NET: Runtime verification and so much more; interval analysis for concurrent trace programs using transaction sequence graphs; causality analysis in contract violation; reducing configurations to monitor in a software product line; runtime instrumentation for precise flow-sensitive type analysis; trace recording for embedded systems: Lessons learned from five industrial projects; Verification of an AFDX infrastructure using simulations and probabilities; copilot: A Hard Real-Time Runtime Monitor; stealthWorks: Emulating memory errors; efficient data race detection for async-finish parallelism; run-time verification of optimistic concurrency; visual debugging for stream processing applications; who guards the guardians? — Toward V&V of health management software: (Short paper); Aspect-Oriented instrumentation with GCC; runtime Verification for Software Transactional Memories; optimized temporal monitors for systemC; runtime verification of stochastic, faulty systems; low-overhead bug fingerprinting for fast debugging; ESAT: A tool for animating logic-based specifications of evolvable component systems; a tool which mines partial execution traces to improve static analysis; larvaStat: Monitoring of statistical properties; WS-PSC monitor: A tool chain for monitoring temporal and timing properties in composite service based on property sequence chart.","","1"
"Technique","Multi-Agent Systems","Analysis of firewall performance variation to identify the limits of automated network reconfigurations","","2006","Security in computer networks is typically passive, static, and reactive. This is typically due to most networking devices being rule-based, and when updates are necessary, they are normally done manually. Ultimately, the social and hierarchical structure of an organisation should be visible within the configuration of networks. Hence, it is desirable for a distributed system to be capable of reconfiguring itself in a timely-manner to reflect changes in policy, in practices, and in the social hierarchy, such as the promotion of a member of staff, or in the face of a security threat, such as in malware propagation. This paper builds on the concept of an automated mitigation and reconfiguration system for networked devices, and evaluates key firewall system performance tests. These could be important in defining the criteria for the success of this type of security implementation. It thus defines a range of experiments, which evaluate firewall parameters, such as number of rules, and their position in relation to performance metrics, such as CPU utilisation, bandwidth consumption, and network latency. The paper also includes tests with up to 65,000 rules, and presents results on the positions of the rules, such as on the incoming and outgoing ports, and the effect of different network throughputs. It concludes that networks can be made more resilient, under heavy network loads and large rule sets, if rule sets are applied on the outgoing ports. It also shows evidence that configuration interfaces are the performance bottleneck for multi-agent systems that may use these to reconfigure network equipments dynamically.","Saliou L.; Buchanan W.; Graves J.; Munoz J.","1"
